// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module IMG2RLE_IMG2RLE_Pipeline_rle64 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_C_AWVALID,
        m_axi_mem_C_AWREADY,
        m_axi_mem_C_AWADDR,
        m_axi_mem_C_AWID,
        m_axi_mem_C_AWLEN,
        m_axi_mem_C_AWSIZE,
        m_axi_mem_C_AWBURST,
        m_axi_mem_C_AWLOCK,
        m_axi_mem_C_AWCACHE,
        m_axi_mem_C_AWPROT,
        m_axi_mem_C_AWQOS,
        m_axi_mem_C_AWREGION,
        m_axi_mem_C_AWUSER,
        m_axi_mem_C_WVALID,
        m_axi_mem_C_WREADY,
        m_axi_mem_C_WDATA,
        m_axi_mem_C_WSTRB,
        m_axi_mem_C_WLAST,
        m_axi_mem_C_WID,
        m_axi_mem_C_WUSER,
        m_axi_mem_C_ARVALID,
        m_axi_mem_C_ARREADY,
        m_axi_mem_C_ARADDR,
        m_axi_mem_C_ARID,
        m_axi_mem_C_ARLEN,
        m_axi_mem_C_ARSIZE,
        m_axi_mem_C_ARBURST,
        m_axi_mem_C_ARLOCK,
        m_axi_mem_C_ARCACHE,
        m_axi_mem_C_ARPROT,
        m_axi_mem_C_ARQOS,
        m_axi_mem_C_ARREGION,
        m_axi_mem_C_ARUSER,
        m_axi_mem_C_RVALID,
        m_axi_mem_C_RREADY,
        m_axi_mem_C_RDATA,
        m_axi_mem_C_RLAST,
        m_axi_mem_C_RID,
        m_axi_mem_C_RFIFONUM,
        m_axi_mem_C_RUSER,
        m_axi_mem_C_RRESP,
        m_axi_mem_C_BVALID,
        m_axi_mem_C_BREADY,
        m_axi_mem_C_BRESP,
        m_axi_mem_C_BID,
        m_axi_mem_C_BUSER,
        nCb_1,
        MatCb_DRAM,
        zig_zag_32_address0,
        zig_zag_32_ce0,
        zig_zag_32_q0,
        nCb_2_out,
        nCb_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_C_AWVALID;
input   m_axi_mem_C_AWREADY;
output  [63:0] m_axi_mem_C_AWADDR;
output  [0:0] m_axi_mem_C_AWID;
output  [31:0] m_axi_mem_C_AWLEN;
output  [2:0] m_axi_mem_C_AWSIZE;
output  [1:0] m_axi_mem_C_AWBURST;
output  [1:0] m_axi_mem_C_AWLOCK;
output  [3:0] m_axi_mem_C_AWCACHE;
output  [2:0] m_axi_mem_C_AWPROT;
output  [3:0] m_axi_mem_C_AWQOS;
output  [3:0] m_axi_mem_C_AWREGION;
output  [0:0] m_axi_mem_C_AWUSER;
output   m_axi_mem_C_WVALID;
input   m_axi_mem_C_WREADY;
output  [7:0] m_axi_mem_C_WDATA;
output  [0:0] m_axi_mem_C_WSTRB;
output   m_axi_mem_C_WLAST;
output  [0:0] m_axi_mem_C_WID;
output  [0:0] m_axi_mem_C_WUSER;
output   m_axi_mem_C_ARVALID;
input   m_axi_mem_C_ARREADY;
output  [63:0] m_axi_mem_C_ARADDR;
output  [0:0] m_axi_mem_C_ARID;
output  [31:0] m_axi_mem_C_ARLEN;
output  [2:0] m_axi_mem_C_ARSIZE;
output  [1:0] m_axi_mem_C_ARBURST;
output  [1:0] m_axi_mem_C_ARLOCK;
output  [3:0] m_axi_mem_C_ARCACHE;
output  [2:0] m_axi_mem_C_ARPROT;
output  [3:0] m_axi_mem_C_ARQOS;
output  [3:0] m_axi_mem_C_ARREGION;
output  [0:0] m_axi_mem_C_ARUSER;
input   m_axi_mem_C_RVALID;
output   m_axi_mem_C_RREADY;
input  [7:0] m_axi_mem_C_RDATA;
input   m_axi_mem_C_RLAST;
input  [0:0] m_axi_mem_C_RID;
input  [10:0] m_axi_mem_C_RFIFONUM;
input  [0:0] m_axi_mem_C_RUSER;
input  [1:0] m_axi_mem_C_RRESP;
input   m_axi_mem_C_BVALID;
output   m_axi_mem_C_BREADY;
input  [1:0] m_axi_mem_C_BRESP;
input  [0:0] m_axi_mem_C_BID;
input  [0:0] m_axi_mem_C_BUSER;
input  [31:0] nCb_1;
input  [63:0] MatCb_DRAM;
output  [5:0] zig_zag_32_address0;
output   zig_zag_32_ce0;
input  [15:0] zig_zag_32_q0;
output  [31:0] nCb_2_out;
output   nCb_2_out_ap_vld;

reg ap_idle;
reg m_axi_mem_C_AWVALID;
reg[63:0] m_axi_mem_C_AWADDR;
reg[31:0] m_axi_mem_C_AWLEN;
reg m_axi_mem_C_WVALID;
reg[7:0] m_axi_mem_C_WDATA;
reg m_axi_mem_C_BREADY;
reg[5:0] zig_zag_32_address0;
reg zig_zag_32_ce0;
reg nCb_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln10_reg_383;
reg   [0:0] or_ln13_reg_408;
reg    ap_predicate_op60_writereq_state4;
reg    ap_block_state4_io;
reg   [0:0] icmp_ln10_reg_383_pp0_iter1_reg;
reg   [0:0] or_ln13_reg_408_pp0_iter2_reg;
reg    ap_predicate_op75_write_state6;
reg    ap_block_state6_io;
reg   [0:0] icmp_ln10_reg_383_pp0_iter3_reg;
reg    ap_block_state10_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln8_reg_374;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_C_blk_n_AW;
wire    ap_block_pp0_stage1;
reg    mem_C_blk_n_W;
wire    ap_block_pp0_stage0;
reg    mem_C_blk_n_B;
reg   [0:0] icmp_ln10_reg_383_pp0_iter4_reg;
reg   [0:0] or_ln13_reg_408_pp0_iter4_reg;
reg    ap_predicate_op71_write_state5;
reg    ap_block_state5_io;
reg    ap_predicate_op85_writeresp_state11;
reg    ap_block_state11_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [6:0] i_2_reg_367;
wire   [0:0] icmp_ln8_fu_192_p2;
reg   [0:0] icmp_ln8_reg_374_pp0_iter1_reg;
reg   [0:0] icmp_ln8_reg_374_pp0_iter2_reg;
reg   [0:0] icmp_ln8_reg_374_pp0_iter3_reg;
wire   [0:0] icmp_ln10_fu_211_p2;
reg    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln10_reg_383_pp0_iter2_reg;
wire   [7:0] trunc_ln11_fu_217_p1;
reg   [7:0] trunc_ln11_reg_387;
reg   [7:0] trunc_ln11_reg_387_pp0_iter1_reg;
wire   [0:0] icmp_ln13_fu_232_p2;
reg   [0:0] icmp_ln13_reg_397;
reg   [63:0] mem_C_addr_reg_402;
wire   [0:0] or_ln13_fu_274_p2;
reg   [0:0] or_ln13_reg_408_pp0_iter3_reg;
reg  signed [31:0] nCb_load_2_reg_412;
reg   [63:0] mem_C_addr_1_reg_417;
wire   [31:0] count_3_fu_307_p2;
reg   [31:0] count_3_reg_424;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln8_fu_198_p1;
wire   [63:0] zext_ln13_fu_227_p1;
wire   [63:0] add_ln11_fu_252_p2;
wire   [63:0] add_ln14_fu_283_p2;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln15_fu_328_p1;
reg    ap_block_pp0_stage1_01001;
reg   [31:0] count_fu_78;
wire    ap_loop_init;
reg   [6:0] i_fu_82;
wire   [6:0] add_ln8_fu_203_p2;
reg   [6:0] ap_sig_allocacmp_i_2;
reg   [31:0] nCb_fu_86;
wire   [31:0] nCb_3_fu_294_p2;
wire   [31:0] nCb_2_fu_242_p2;
wire   [5:0] trunc_ln8_fu_208_p1;
wire   [5:0] add_ln13_fu_221_p2;
wire  signed [31:0] nCb_2_fu_242_p0;
wire  signed [31:0] sext_ln11_fu_248_p0;
wire  signed [63:0] sext_ln11_fu_248_p1;
wire   [0:0] icmp_ln13_2_fu_268_p2;
wire  signed [31:0] sext_ln14_fu_279_p0;
wire  signed [63:0] sext_ln14_fu_279_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage0;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_308;
reg    ap_condition_500;
reg    ap_condition_504;
reg    ap_condition_508;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 count_fu_78 = 32'd0;
#0 i_fu_82 = 7'd0;
#0 nCb_fu_86 = 32'd0;
#0 ap_done_reg = 1'b0;
end

IMG2RLE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd1) & (or_ln13_reg_408 == 1'd0))) begin
        count_fu_78 <= count_3_fu_307_p2;
    end else if ((((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd1) & (or_ln13_reg_408 == 1'd1)))) begin
        count_fu_78 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_82 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_374 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        i_fu_82 <= add_ln8_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nCb_fu_86 <= nCb_1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_383 == 1'd0))) begin
        nCb_fu_86 <= nCb_2_fu_242_p2;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (or_ln13_reg_408 == 1'd1) & (icmp_ln10_reg_383 == 1'd1))) begin
        nCb_fu_86 <= nCb_3_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        count_3_reg_424 <= count_3_fu_307_p2;
        i_2_reg_367 <= ap_sig_allocacmp_i_2;
        icmp_ln8_reg_374 <= icmp_ln8_fu_192_p2;
        icmp_ln8_reg_374_pp0_iter1_reg <= icmp_ln8_reg_374;
        icmp_ln8_reg_374_pp0_iter2_reg <= icmp_ln8_reg_374_pp0_iter1_reg;
        icmp_ln8_reg_374_pp0_iter3_reg <= icmp_ln8_reg_374_pp0_iter2_reg;
        mem_C_addr_1_reg_417 <= add_ln14_fu_283_p2;
        mem_C_addr_reg_402 <= add_ln11_fu_252_p2;
        or_ln13_reg_408 <= or_ln13_fu_274_p2;
        or_ln13_reg_408_pp0_iter2_reg <= or_ln13_reg_408;
        or_ln13_reg_408_pp0_iter3_reg <= or_ln13_reg_408_pp0_iter2_reg;
        or_ln13_reg_408_pp0_iter4_reg <= or_ln13_reg_408_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        icmp_ln10_reg_383 <= icmp_ln10_fu_211_p2;
        icmp_ln10_reg_383_pp0_iter1_reg <= icmp_ln10_reg_383;
        icmp_ln10_reg_383_pp0_iter2_reg <= icmp_ln10_reg_383_pp0_iter1_reg;
        icmp_ln10_reg_383_pp0_iter3_reg <= icmp_ln10_reg_383_pp0_iter2_reg;
        icmp_ln10_reg_383_pp0_iter4_reg <= icmp_ln10_reg_383_pp0_iter3_reg;
        icmp_ln13_reg_397 <= icmp_ln13_fu_232_p2;
        trunc_ln11_reg_387 <= trunc_ln11_fu_217_p1;
        trunc_ln11_reg_387_pp0_iter1_reg <= trunc_ln11_reg_387;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nCb_load_2_reg_412 <= nCb_fu_86;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_374 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln8_reg_374_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_82;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_308)) begin
        if ((ap_predicate_op60_writereq_state4 == 1'b1)) begin
            m_axi_mem_C_AWADDR = mem_C_addr_1_reg_417;
        end else if ((icmp_ln10_reg_383 == 1'd0)) begin
            m_axi_mem_C_AWADDR = mem_C_addr_reg_402;
        end else begin
            m_axi_mem_C_AWADDR = 'bx;
        end
    end else begin
        m_axi_mem_C_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_308)) begin
        if ((ap_predicate_op60_writereq_state4 == 1'b1)) begin
            m_axi_mem_C_AWLEN = 32'd2;
        end else if ((icmp_ln10_reg_383 == 1'd0)) begin
            m_axi_mem_C_AWLEN = 32'd1;
        end else begin
            m_axi_mem_C_AWLEN = 'bx;
        end
    end else begin
        m_axi_mem_C_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op60_writereq_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln10_reg_383 == 1'd0)))) begin
        m_axi_mem_C_AWVALID = 1'b1;
    end else begin
        m_axi_mem_C_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_predicate_op85_writeresp_state11 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln10_reg_383_pp0_iter3_reg == 1'd0)))) begin
        m_axi_mem_C_BREADY = 1'b1;
    end else begin
        m_axi_mem_C_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
        if ((1'b1 == ap_condition_508)) begin
            m_axi_mem_C_WDATA = trunc_ln15_fu_328_p1;
        end else if ((1'b1 == ap_condition_504)) begin
            m_axi_mem_C_WDATA = 8'd0;
        end else if ((1'b1 == ap_condition_500)) begin
            m_axi_mem_C_WDATA = trunc_ln11_reg_387_pp0_iter1_reg;
        end else begin
            m_axi_mem_C_WDATA = 'bx;
        end
    end else begin
        m_axi_mem_C_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_predicate_op75_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_predicate_op71_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd0)))) begin
        m_axi_mem_C_WVALID = 1'b1;
    end else begin
        m_axi_mem_C_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_predicate_op60_writereq_state4 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln10_reg_383 == 1'd0)))) begin
        mem_C_blk_n_AW = m_axi_mem_C_AWREADY;
    end else begin
        mem_C_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (or_ln13_reg_408_pp0_iter4_reg == 1'd1) & (icmp_ln10_reg_383_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln10_reg_383_pp0_iter3_reg == 1'd0)))) begin
        mem_C_blk_n_B = m_axi_mem_C_BVALID;
    end else begin
        mem_C_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (ap_predicate_op75_write_state6 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd1) & (or_ln13_reg_408 == 1'd1)))) begin
        mem_C_blk_n_W = m_axi_mem_C_WREADY;
    end else begin
        mem_C_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln8_reg_374_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nCb_2_out_ap_vld = 1'b1;
    end else begin
        nCb_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            zig_zag_32_address0 = zext_ln13_fu_227_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            zig_zag_32_address0 = zext_ln8_fu_198_p1;
        end else begin
            zig_zag_32_address0 = 'bx;
        end
    end else begin
        zig_zag_32_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        zig_zag_32_ce0 = 1'b1;
    end else begin
        zig_zag_32_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_252_p2 = ($signed(sext_ln11_fu_248_p1) + $signed(MatCb_DRAM));

assign add_ln13_fu_221_p2 = (trunc_ln8_fu_208_p1 + 6'd1);

assign add_ln14_fu_283_p2 = ($signed(sext_ln14_fu_279_p1) + $signed(MatCb_DRAM));

assign add_ln8_fu_203_p2 = (i_2_reg_367 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter5));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage1_iter4));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage1_iter4)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage1_iter4)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state6_io)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_state10_pp0_stage1_iter4 = ((m_axi_mem_C_BVALID == 1'b0) & (icmp_ln10_reg_383_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter5 = ((m_axi_mem_C_BVALID == 1'b0) & (ap_predicate_op85_writeresp_state11 == 1'b1));
end

always @ (*) begin
    ap_block_state4_io = (((m_axi_mem_C_AWREADY == 1'b0) & (ap_predicate_op60_writereq_state4 == 1'b1)) | ((m_axi_mem_C_AWREADY == 1'b0) & (icmp_ln10_reg_383 == 1'd0)));
end

always @ (*) begin
    ap_block_state5_io = (((m_axi_mem_C_WREADY == 1'b0) & (ap_predicate_op71_write_state5 == 1'b1)) | ((m_axi_mem_C_WREADY == 1'b0) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd0)));
end

always @ (*) begin
    ap_block_state6_io = ((m_axi_mem_C_WREADY == 1'b0) & (ap_predicate_op75_write_state6 == 1'b1));
end

always @ (*) begin
    ap_condition_308 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_500 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd0));
end

always @ (*) begin
    ap_condition_504 = ((ap_predicate_op71_write_state5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001));
end

always @ (*) begin
    ap_condition_508 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001) & (ap_predicate_op75_write_state6 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op60_writereq_state4 = ((or_ln13_reg_408 == 1'd1) & (icmp_ln10_reg_383 == 1'd1));
end

always @ (*) begin
    ap_predicate_op71_write_state5 = ((icmp_ln10_reg_383_pp0_iter1_reg == 1'd1) & (or_ln13_reg_408 == 1'd1));
end

always @ (*) begin
    ap_predicate_op75_write_state6 = ((or_ln13_reg_408_pp0_iter2_reg == 1'd1) & (icmp_ln10_reg_383_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op85_writeresp_state11 = ((or_ln13_reg_408_pp0_iter4_reg == 1'd1) & (icmp_ln10_reg_383_pp0_iter4_reg == 1'd1));
end

assign count_3_fu_307_p2 = (count_fu_78 + 32'd1);

assign icmp_ln10_fu_211_p2 = ((zig_zag_32_q0 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_2_fu_268_p2 = ((zig_zag_32_q0 != 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_232_p2 = ((i_2_reg_367 == 7'd63) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_192_p2 = ((ap_sig_allocacmp_i_2 == 7'd64) ? 1'b1 : 1'b0);

assign m_axi_mem_C_ARADDR = 64'd0;

assign m_axi_mem_C_ARBURST = 2'd0;

assign m_axi_mem_C_ARCACHE = 4'd0;

assign m_axi_mem_C_ARID = 1'd0;

assign m_axi_mem_C_ARLEN = 32'd0;

assign m_axi_mem_C_ARLOCK = 2'd0;

assign m_axi_mem_C_ARPROT = 3'd0;

assign m_axi_mem_C_ARQOS = 4'd0;

assign m_axi_mem_C_ARREGION = 4'd0;

assign m_axi_mem_C_ARSIZE = 3'd0;

assign m_axi_mem_C_ARUSER = 1'd0;

assign m_axi_mem_C_ARVALID = 1'b0;

assign m_axi_mem_C_AWBURST = 2'd0;

assign m_axi_mem_C_AWCACHE = 4'd0;

assign m_axi_mem_C_AWID = 1'd0;

assign m_axi_mem_C_AWLOCK = 2'd0;

assign m_axi_mem_C_AWPROT = 3'd0;

assign m_axi_mem_C_AWQOS = 4'd0;

assign m_axi_mem_C_AWREGION = 4'd0;

assign m_axi_mem_C_AWSIZE = 3'd0;

assign m_axi_mem_C_AWUSER = 1'd0;

assign m_axi_mem_C_RREADY = 1'b0;

assign m_axi_mem_C_WID = 1'd0;

assign m_axi_mem_C_WLAST = 1'b0;

assign m_axi_mem_C_WSTRB = 1'd1;

assign m_axi_mem_C_WUSER = 1'd0;

assign nCb_2_fu_242_p0 = nCb_fu_86;

assign nCb_2_fu_242_p2 = ($signed(nCb_2_fu_242_p0) + $signed(32'd1));

assign nCb_2_out = nCb_fu_86;

assign nCb_3_fu_294_p2 = ($signed(nCb_load_2_reg_412) + $signed(32'd2));

assign or_ln13_fu_274_p2 = (icmp_ln13_reg_397 | icmp_ln13_2_fu_268_p2);

assign sext_ln11_fu_248_p0 = nCb_fu_86;

assign sext_ln11_fu_248_p1 = sext_ln11_fu_248_p0;

assign sext_ln14_fu_279_p0 = nCb_fu_86;

assign sext_ln14_fu_279_p1 = sext_ln14_fu_279_p0;

assign trunc_ln11_fu_217_p1 = zig_zag_32_q0[7:0];

assign trunc_ln15_fu_328_p1 = count_3_reg_424[7:0];

assign trunc_ln8_fu_208_p1 = i_2_reg_367[5:0];

assign zext_ln13_fu_227_p1 = add_ln13_fu_221_p2;

assign zext_ln8_fu_198_p1 = ap_sig_allocacmp_i_2;

endmodule //IMG2RLE_IMG2RLE_Pipeline_rle64
