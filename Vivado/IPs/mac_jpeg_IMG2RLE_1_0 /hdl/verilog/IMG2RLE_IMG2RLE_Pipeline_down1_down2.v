// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module IMG2RLE_IMG2RLE_Pipeline_down1_down2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Cr_7_address0,
        Cr_7_ce0,
        Cr_7_we0,
        Cr_7_d0,
        Cr_6_address0,
        Cr_6_ce0,
        Cr_6_we0,
        Cr_6_d0,
        Cr_5_address0,
        Cr_5_ce0,
        Cr_5_we0,
        Cr_5_d0,
        Cr_4_address0,
        Cr_4_ce0,
        Cr_4_we0,
        Cr_4_d0,
        Cr_3_address0,
        Cr_3_ce0,
        Cr_3_we0,
        Cr_3_d0,
        Cr_2_address0,
        Cr_2_ce0,
        Cr_2_we0,
        Cr_2_d0,
        Cr_1_address0,
        Cr_1_ce0,
        Cr_1_we0,
        Cr_1_d0,
        Cr_address0,
        Cr_ce0,
        Cr_we0,
        Cr_d0,
        Cb_7_address0,
        Cb_7_ce0,
        Cb_7_we0,
        Cb_7_d0,
        Cb_6_address0,
        Cb_6_ce0,
        Cb_6_we0,
        Cb_6_d0,
        Cb_5_address0,
        Cb_5_ce0,
        Cb_5_we0,
        Cb_5_d0,
        Cb_4_address0,
        Cb_4_ce0,
        Cb_4_we0,
        Cb_4_d0,
        Cb_3_address0,
        Cb_3_ce0,
        Cb_3_we0,
        Cb_3_d0,
        Cb_2_address0,
        Cb_2_ce0,
        Cb_2_we0,
        Cb_2_d0,
        Cb_1_address0,
        Cb_1_ce0,
        Cb_1_we0,
        Cb_1_d0,
        Cb_address0,
        Cb_ce0,
        Cb_we0,
        Cb_d0,
        Image_Cb_address0,
        Image_Cb_ce0,
        Image_Cb_q0,
        Image_Cb_address1,
        Image_Cb_ce1,
        Image_Cb_q1,
        Image_Cb_1_address0,
        Image_Cb_1_ce0,
        Image_Cb_1_q0,
        Image_Cb_1_address1,
        Image_Cb_1_ce1,
        Image_Cb_1_q1,
        Image_Cr_address0,
        Image_Cr_ce0,
        Image_Cr_q0,
        Image_Cr_address1,
        Image_Cr_ce1,
        Image_Cr_q1,
        Image_Cr_1_address0,
        Image_Cr_1_ce0,
        Image_Cr_1_q0,
        Image_Cr_1_address1,
        Image_Cr_1_ce1,
        Image_Cr_1_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] Cr_7_address0;
output   Cr_7_ce0;
output   Cr_7_we0;
output  [7:0] Cr_7_d0;
output  [2:0] Cr_6_address0;
output   Cr_6_ce0;
output   Cr_6_we0;
output  [7:0] Cr_6_d0;
output  [2:0] Cr_5_address0;
output   Cr_5_ce0;
output   Cr_5_we0;
output  [7:0] Cr_5_d0;
output  [2:0] Cr_4_address0;
output   Cr_4_ce0;
output   Cr_4_we0;
output  [7:0] Cr_4_d0;
output  [2:0] Cr_3_address0;
output   Cr_3_ce0;
output   Cr_3_we0;
output  [7:0] Cr_3_d0;
output  [2:0] Cr_2_address0;
output   Cr_2_ce0;
output   Cr_2_we0;
output  [7:0] Cr_2_d0;
output  [2:0] Cr_1_address0;
output   Cr_1_ce0;
output   Cr_1_we0;
output  [7:0] Cr_1_d0;
output  [2:0] Cr_address0;
output   Cr_ce0;
output   Cr_we0;
output  [7:0] Cr_d0;
output  [2:0] Cb_7_address0;
output   Cb_7_ce0;
output   Cb_7_we0;
output  [15:0] Cb_7_d0;
output  [2:0] Cb_6_address0;
output   Cb_6_ce0;
output   Cb_6_we0;
output  [15:0] Cb_6_d0;
output  [2:0] Cb_5_address0;
output   Cb_5_ce0;
output   Cb_5_we0;
output  [15:0] Cb_5_d0;
output  [2:0] Cb_4_address0;
output   Cb_4_ce0;
output   Cb_4_we0;
output  [15:0] Cb_4_d0;
output  [2:0] Cb_3_address0;
output   Cb_3_ce0;
output   Cb_3_we0;
output  [15:0] Cb_3_d0;
output  [2:0] Cb_2_address0;
output   Cb_2_ce0;
output   Cb_2_we0;
output  [15:0] Cb_2_d0;
output  [2:0] Cb_1_address0;
output   Cb_1_ce0;
output   Cb_1_we0;
output  [15:0] Cb_1_d0;
output  [2:0] Cb_address0;
output   Cb_ce0;
output   Cb_we0;
output  [15:0] Cb_d0;
output  [6:0] Image_Cb_address0;
output   Image_Cb_ce0;
input  [9:0] Image_Cb_q0;
output  [6:0] Image_Cb_address1;
output   Image_Cb_ce1;
input  [9:0] Image_Cb_q1;
output  [6:0] Image_Cb_1_address0;
output   Image_Cb_1_ce0;
input  [9:0] Image_Cb_1_q0;
output  [6:0] Image_Cb_1_address1;
output   Image_Cb_1_ce1;
input  [9:0] Image_Cb_1_q1;
output  [6:0] Image_Cr_address0;
output   Image_Cr_ce0;
input  [7:0] Image_Cr_q0;
output  [6:0] Image_Cr_address1;
output   Image_Cr_ce1;
input  [7:0] Image_Cr_q1;
output  [6:0] Image_Cr_1_address0;
output   Image_Cr_1_ce0;
input  [7:0] Image_Cr_1_q0;
output  [6:0] Image_Cr_1_address1;
output   Image_Cr_1_ce1;
input  [7:0] Image_Cr_1_q1;

reg ap_idle;
reg Cr_7_ce0;
reg Cr_7_we0;
reg Cr_6_ce0;
reg Cr_6_we0;
reg Cr_5_ce0;
reg Cr_5_we0;
reg Cr_4_ce0;
reg Cr_4_we0;
reg Cr_3_ce0;
reg Cr_3_we0;
reg Cr_2_ce0;
reg Cr_2_we0;
reg Cr_1_ce0;
reg Cr_1_we0;
reg Cr_ce0;
reg Cr_we0;
reg Cb_7_ce0;
reg Cb_7_we0;
reg Cb_6_ce0;
reg Cb_6_we0;
reg Cb_5_ce0;
reg Cb_5_we0;
reg Cb_4_ce0;
reg Cb_4_we0;
reg Cb_3_ce0;
reg Cb_3_we0;
reg Cb_2_ce0;
reg Cb_2_we0;
reg Cb_1_ce0;
reg Cb_1_we0;
reg Cb_ce0;
reg Cb_we0;
reg Image_Cb_ce0;
reg Image_Cb_ce1;
reg Image_Cb_1_ce0;
reg Image_Cb_1_ce1;
reg Image_Cr_ce0;
reg Image_Cr_ce1;
reg Image_Cr_1_ce0;
reg Image_Cr_1_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln158_fu_436_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] select_ln158_fu_466_p3;
reg   [3:0] select_ln158_reg_734;
reg   [3:0] select_ln158_reg_734_pp0_iter1_reg;
wire   [2:0] trunc_ln158_fu_482_p1;
reg   [2:0] trunc_ln158_reg_739;
reg   [2:0] trunc_ln158_reg_739_pp0_iter1_reg;
reg   [2:0] trunc_ln158_reg_739_pp0_iter2_reg;
wire   [63:0] zext_ln161_fu_506_p1;
reg   [63:0] zext_ln161_reg_743;
wire   [63:0] zext_ln161_1_fu_527_p1;
reg   [63:0] zext_ln161_1_reg_763;
wire   [8:0] add_ln160_fu_563_p2;
reg   [8:0] add_ln160_reg_793;
reg   [7:0] Image_Cr_1_load_1_reg_798;
reg   [7:0] Image_Cr_load_1_reg_803;
wire   [16:0] add_ln161_fu_585_p2;
reg   [16:0] add_ln161_reg_808;
reg   [15:0] trunc_ln6_reg_813;
reg   [2:0] Cb_addr_reg_818;
reg   [2:0] Cb_1_addr_reg_823;
reg   [2:0] Cb_2_addr_reg_828;
reg   [2:0] Cb_3_addr_reg_833;
reg   [2:0] Cb_4_addr_reg_838;
reg   [2:0] Cb_5_addr_reg_843;
reg   [2:0] Cb_6_addr_reg_848;
reg   [2:0] Cb_7_addr_reg_853;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln159_fu_591_p1;
reg   [3:0] l_fu_106;
wire   [3:0] add_ln159_fu_534_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_l_load;
reg   [3:0] k_fu_110;
wire   [3:0] select_ln158_1_fu_474_p3;
reg   [3:0] ap_sig_allocacmp_k_load;
reg   [6:0] indvar_flatten6_fu_114;
wire   [6:0] add_ln158_1_fu_442_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [7:0] xor_ln160_fu_641_p2;
wire   [15:0] add_ln161_3_fu_696_p2;
wire   [0:0] icmp_ln159_fu_460_p2;
wire   [3:0] add_ln158_fu_454_p2;
wire   [2:0] trunc_ln160_fu_486_p1;
wire   [6:0] tmp_s_fu_496_p4;
wire   [3:0] shl_ln160_fu_490_p2;
wire   [3:0] or_ln160_fu_513_p2;
wire   [6:0] tmp_3_fu_519_p3;
wire   [8:0] zext_ln160_1_fu_559_p1;
wire   [8:0] zext_ln160_fu_555_p1;
wire  signed [15:0] sext_ln161_fu_569_p1;
wire  signed [15:0] sext_ln161_1_fu_577_p1;
wire   [16:0] zext_ln161_4_fu_581_p1;
wire   [16:0] zext_ln161_3_fu_573_p1;
wire   [9:0] zext_ln160_2_fu_610_p1;
wire   [9:0] zext_ln160_3_fu_613_p1;
wire   [9:0] add_ln160_1_fu_616_p2;
wire   [9:0] zext_ln160_4_fu_622_p1;
wire   [9:0] add_ln160_2_fu_625_p2;
wire   [7:0] trunc_ln5_cast_fu_631_p4;
wire  signed [15:0] sext_ln161_2_fu_658_p1;
wire   [17:0] zext_ln161_2_fu_655_p1;
wire   [17:0] zext_ln161_5_fu_662_p1;
wire  signed [15:0] sext_ln161_3_fu_672_p1;
wire   [17:0] add_ln161_1_fu_666_p2;
wire   [17:0] zext_ln161_6_fu_676_p1;
wire   [17:0] add_ln161_2_fu_680_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 l_fu_106 = 4'd0;
#0 k_fu_110 = 4'd0;
#0 indvar_flatten6_fu_114 = 7'd0;
#0 ap_done_reg = 1'b0;
end

IMG2RLE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln158_fu_436_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_114 <= add_ln158_1_fu_442_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_114 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln158_fu_436_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_110 <= select_ln158_1_fu_474_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_110 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln158_fu_436_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            l_fu_106 <= add_ln159_fu_534_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            l_fu_106 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        Cb_1_addr_reg_823 <= zext_ln159_fu_591_p1;
        Cb_2_addr_reg_828 <= zext_ln159_fu_591_p1;
        Cb_3_addr_reg_833 <= zext_ln159_fu_591_p1;
        Cb_4_addr_reg_838 <= zext_ln159_fu_591_p1;
        Cb_5_addr_reg_843 <= zext_ln159_fu_591_p1;
        Cb_6_addr_reg_848 <= zext_ln159_fu_591_p1;
        Cb_7_addr_reg_853 <= zext_ln159_fu_591_p1;
        Cb_addr_reg_818 <= zext_ln159_fu_591_p1;
        trunc_ln158_reg_739_pp0_iter2_reg <= trunc_ln158_reg_739_pp0_iter1_reg;
        trunc_ln6_reg_813 <= {{add_ln161_2_fu_680_p2[17:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cr_1_load_1_reg_798 <= Image_Cr_1_q0;
        Image_Cr_load_1_reg_803 <= Image_Cr_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln160_reg_793 <= add_ln160_fu_563_p2;
        add_ln161_reg_808 <= add_ln161_fu_585_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln158_reg_734 <= select_ln158_fu_466_p3;
        select_ln158_reg_734_pp0_iter1_reg <= select_ln158_reg_734;
        trunc_ln158_reg_739 <= trunc_ln158_fu_482_p1;
        trunc_ln158_reg_739_pp0_iter1_reg <= trunc_ln158_reg_739;
        zext_ln161_1_reg_763[6 : 1] <= zext_ln161_1_fu_527_p1[6 : 1];
        zext_ln161_reg_743[6 : 1] <= zext_ln161_fu_506_p1[6 : 1];
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Cb_1_ce0 = 1'b1;
    end else begin
        Cb_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln158_reg_739_pp0_iter2_reg == 3'd1))) begin
        Cb_1_we0 = 1'b1;
    end else begin
        Cb_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Cb_2_ce0 = 1'b1;
    end else begin
        Cb_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln158_reg_739_pp0_iter2_reg == 3'd2))) begin
        Cb_2_we0 = 1'b1;
    end else begin
        Cb_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Cb_3_ce0 = 1'b1;
    end else begin
        Cb_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln158_reg_739_pp0_iter2_reg == 3'd3))) begin
        Cb_3_we0 = 1'b1;
    end else begin
        Cb_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Cb_4_ce0 = 1'b1;
    end else begin
        Cb_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln158_reg_739_pp0_iter2_reg == 3'd4))) begin
        Cb_4_we0 = 1'b1;
    end else begin
        Cb_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Cb_5_ce0 = 1'b1;
    end else begin
        Cb_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln158_reg_739_pp0_iter2_reg == 3'd5))) begin
        Cb_5_we0 = 1'b1;
    end else begin
        Cb_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Cb_6_ce0 = 1'b1;
    end else begin
        Cb_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln158_reg_739_pp0_iter2_reg == 3'd6))) begin
        Cb_6_we0 = 1'b1;
    end else begin
        Cb_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Cb_7_ce0 = 1'b1;
    end else begin
        Cb_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln158_reg_739_pp0_iter2_reg == 3'd7))) begin
        Cb_7_we0 = 1'b1;
    end else begin
        Cb_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Cb_ce0 = 1'b1;
    end else begin
        Cb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (trunc_ln158_reg_739_pp0_iter2_reg == 3'd0))) begin
        Cb_we0 = 1'b1;
    end else begin
        Cb_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Cr_1_ce0 = 1'b1;
    end else begin
        Cr_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln158_reg_739_pp0_iter1_reg == 3'd1))) begin
        Cr_1_we0 = 1'b1;
    end else begin
        Cr_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Cr_2_ce0 = 1'b1;
    end else begin
        Cr_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln158_reg_739_pp0_iter1_reg == 3'd2))) begin
        Cr_2_we0 = 1'b1;
    end else begin
        Cr_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Cr_3_ce0 = 1'b1;
    end else begin
        Cr_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln158_reg_739_pp0_iter1_reg == 3'd3))) begin
        Cr_3_we0 = 1'b1;
    end else begin
        Cr_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Cr_4_ce0 = 1'b1;
    end else begin
        Cr_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln158_reg_739_pp0_iter1_reg == 3'd4))) begin
        Cr_4_we0 = 1'b1;
    end else begin
        Cr_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Cr_5_ce0 = 1'b1;
    end else begin
        Cr_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln158_reg_739_pp0_iter1_reg == 3'd5))) begin
        Cr_5_we0 = 1'b1;
    end else begin
        Cr_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Cr_6_ce0 = 1'b1;
    end else begin
        Cr_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln158_reg_739_pp0_iter1_reg == 3'd6))) begin
        Cr_6_we0 = 1'b1;
    end else begin
        Cr_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Cr_7_ce0 = 1'b1;
    end else begin
        Cr_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln158_reg_739_pp0_iter1_reg == 3'd7))) begin
        Cr_7_we0 = 1'b1;
    end else begin
        Cr_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Cr_ce0 = 1'b1;
    end else begin
        Cr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln158_reg_739_pp0_iter1_reg == 3'd0))) begin
        Cr_we0 = 1'b1;
    end else begin
        Cr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cb_1_ce0 = 1'b1;
    end else begin
        Image_Cb_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cb_1_ce1 = 1'b1;
    end else begin
        Image_Cb_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cb_ce0 = 1'b1;
    end else begin
        Image_Cb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cb_ce1 = 1'b1;
    end else begin
        Image_Cb_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cr_1_ce0 = 1'b1;
    end else begin
        Image_Cr_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cr_1_ce1 = 1'b1;
    end else begin
        Image_Cr_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cr_ce0 = 1'b1;
    end else begin
        Image_Cr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Image_Cr_ce1 = 1'b1;
    end else begin
        Image_Cr_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln158_fu_436_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 4'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_l_load = 4'd0;
    end else begin
        ap_sig_allocacmp_l_load = l_fu_106;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cb_1_address0 = Cb_1_addr_reg_823;

assign Cb_1_d0 = add_ln161_3_fu_696_p2;

assign Cb_2_address0 = Cb_2_addr_reg_828;

assign Cb_2_d0 = add_ln161_3_fu_696_p2;

assign Cb_3_address0 = Cb_3_addr_reg_833;

assign Cb_3_d0 = add_ln161_3_fu_696_p2;

assign Cb_4_address0 = Cb_4_addr_reg_838;

assign Cb_4_d0 = add_ln161_3_fu_696_p2;

assign Cb_5_address0 = Cb_5_addr_reg_843;

assign Cb_5_d0 = add_ln161_3_fu_696_p2;

assign Cb_6_address0 = Cb_6_addr_reg_848;

assign Cb_6_d0 = add_ln161_3_fu_696_p2;

assign Cb_7_address0 = Cb_7_addr_reg_853;

assign Cb_7_d0 = add_ln161_3_fu_696_p2;

assign Cb_address0 = Cb_addr_reg_818;

assign Cb_d0 = add_ln161_3_fu_696_p2;

assign Cr_1_address0 = zext_ln159_fu_591_p1;

assign Cr_1_d0 = xor_ln160_fu_641_p2;

assign Cr_2_address0 = zext_ln159_fu_591_p1;

assign Cr_2_d0 = xor_ln160_fu_641_p2;

assign Cr_3_address0 = zext_ln159_fu_591_p1;

assign Cr_3_d0 = xor_ln160_fu_641_p2;

assign Cr_4_address0 = zext_ln159_fu_591_p1;

assign Cr_4_d0 = xor_ln160_fu_641_p2;

assign Cr_5_address0 = zext_ln159_fu_591_p1;

assign Cr_5_d0 = xor_ln160_fu_641_p2;

assign Cr_6_address0 = zext_ln159_fu_591_p1;

assign Cr_6_d0 = xor_ln160_fu_641_p2;

assign Cr_7_address0 = zext_ln159_fu_591_p1;

assign Cr_7_d0 = xor_ln160_fu_641_p2;

assign Cr_address0 = zext_ln159_fu_591_p1;

assign Cr_d0 = xor_ln160_fu_641_p2;

assign Image_Cb_1_address0 = zext_ln161_reg_743;

assign Image_Cb_1_address1 = zext_ln161_1_fu_527_p1;

assign Image_Cb_address0 = zext_ln161_1_reg_763;

assign Image_Cb_address1 = zext_ln161_fu_506_p1;

assign Image_Cr_1_address0 = zext_ln161_fu_506_p1;

assign Image_Cr_1_address1 = zext_ln161_1_fu_527_p1;

assign Image_Cr_address0 = zext_ln161_1_fu_527_p1;

assign Image_Cr_address1 = zext_ln161_fu_506_p1;

assign add_ln158_1_fu_442_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 7'd1);

assign add_ln158_fu_454_p2 = (ap_sig_allocacmp_k_load + 4'd1);

assign add_ln159_fu_534_p2 = (select_ln158_fu_466_p3 + 4'd1);

assign add_ln160_1_fu_616_p2 = (zext_ln160_2_fu_610_p1 + zext_ln160_3_fu_613_p1);

assign add_ln160_2_fu_625_p2 = (add_ln160_1_fu_616_p2 + zext_ln160_4_fu_622_p1);

assign add_ln160_fu_563_p2 = (zext_ln160_1_fu_559_p1 + zext_ln160_fu_555_p1);

assign add_ln161_1_fu_666_p2 = (zext_ln161_2_fu_655_p1 + zext_ln161_5_fu_662_p1);

assign add_ln161_2_fu_680_p2 = (add_ln161_1_fu_666_p2 + zext_ln161_6_fu_676_p1);

assign add_ln161_3_fu_696_p2 = ($signed(trunc_ln6_reg_813) + $signed(16'd65408));

assign add_ln161_fu_585_p2 = (zext_ln161_4_fu_581_p1 + zext_ln161_3_fu_573_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln158_fu_436_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln159_fu_460_p2 = ((ap_sig_allocacmp_l_load == 4'd8) ? 1'b1 : 1'b0);

assign or_ln160_fu_513_p2 = (shl_ln160_fu_490_p2 | 4'd1);

assign select_ln158_1_fu_474_p3 = ((icmp_ln159_fu_460_p2[0:0] == 1'b1) ? add_ln158_fu_454_p2 : ap_sig_allocacmp_k_load);

assign select_ln158_fu_466_p3 = ((icmp_ln159_fu_460_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_l_load);

assign sext_ln161_1_fu_577_p1 = $signed(Image_Cb_1_q1);

assign sext_ln161_2_fu_658_p1 = $signed(Image_Cb_1_q0);

assign sext_ln161_3_fu_672_p1 = $signed(Image_Cb_q0);

assign sext_ln161_fu_569_p1 = $signed(Image_Cb_q1);

assign shl_ln160_fu_490_p2 = select_ln158_fu_466_p3 << 4'd1;

assign tmp_3_fu_519_p3 = {{trunc_ln158_fu_482_p1}, {or_ln160_fu_513_p2}};

assign tmp_s_fu_496_p4 = {{{trunc_ln158_fu_482_p1}, {trunc_ln160_fu_486_p1}}, {1'd0}};

assign trunc_ln158_fu_482_p1 = select_ln158_1_fu_474_p3[2:0];

assign trunc_ln160_fu_486_p1 = select_ln158_fu_466_p3[2:0];

assign trunc_ln5_cast_fu_631_p4 = {{add_ln160_2_fu_625_p2[9:2]}};

assign xor_ln160_fu_641_p2 = (trunc_ln5_cast_fu_631_p4 ^ 8'd128);

assign zext_ln159_fu_591_p1 = select_ln158_reg_734_pp0_iter1_reg;

assign zext_ln160_1_fu_559_p1 = Image_Cr_1_q1;

assign zext_ln160_2_fu_610_p1 = add_ln160_reg_793;

assign zext_ln160_3_fu_613_p1 = Image_Cr_1_load_1_reg_798;

assign zext_ln160_4_fu_622_p1 = Image_Cr_load_1_reg_803;

assign zext_ln160_fu_555_p1 = Image_Cr_q1;

assign zext_ln161_1_fu_527_p1 = tmp_3_fu_519_p3;

assign zext_ln161_2_fu_655_p1 = add_ln161_reg_808;

assign zext_ln161_3_fu_573_p1 = $unsigned(sext_ln161_fu_569_p1);

assign zext_ln161_4_fu_581_p1 = $unsigned(sext_ln161_1_fu_577_p1);

assign zext_ln161_5_fu_662_p1 = $unsigned(sext_ln161_2_fu_658_p1);

assign zext_ln161_6_fu_676_p1 = $unsigned(sext_ln161_3_fu_672_p1);

assign zext_ln161_fu_506_p1 = tmp_s_fu_496_p4;

always @ (posedge ap_clk) begin
    zext_ln161_reg_743[0] <= 1'b0;
    zext_ln161_reg_743[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln161_1_reg_763[0] <= 1'b1;
    zext_ln161_1_reg_763[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //IMG2RLE_IMG2RLE_Pipeline_down1_down2
