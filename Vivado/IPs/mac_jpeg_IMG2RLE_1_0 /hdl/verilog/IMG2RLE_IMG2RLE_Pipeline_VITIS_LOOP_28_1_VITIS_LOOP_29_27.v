// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module IMG2RLE_IMG2RLE_Pipeline_VITIS_LOOP_28_1_VITIS_LOOP_29_27 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dct_1_address0,
        dct_1_ce0,
        dct_1_q0,
        temp_1_address0,
        temp_1_ce0,
        temp_1_we0,
        temp_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] dct_1_address0;
output   dct_1_ce0;
input  [15:0] dct_1_q0;
output  [5:0] temp_1_address0;
output   temp_1_ce0;
output   temp_1_we0;
output  [15:0] temp_1_d0;

reg ap_idle;
reg dct_1_ce0;
reg temp_1_ce0;
reg temp_1_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_97_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] add_ln30_fu_159_p2;
reg   [5:0] add_ln30_reg_215;
wire   [63:0] zext_ln30_1_fu_186_p1;
reg   [63:0] zext_ln30_1_reg_220;
wire    ap_block_pp0_stage0;
reg   [3:0] j_fu_40;
wire   [3:0] add_ln29_fu_165_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_44;
wire   [3:0] select_ln28_1_fu_135_p3;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [6:0] indvar_flatten118_fu_48;
wire   [6:0] add_ln28_fu_103_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten118_load;
wire   [0:0] icmp_ln29_fu_121_p2;
wire   [3:0] add_ln28_1_fu_115_p2;
wire   [2:0] trunc_ln30_fu_143_p1;
wire   [3:0] select_ln28_fu_127_p3;
wire   [5:0] tmp_s_fu_147_p3;
wire   [5:0] zext_ln30_fu_155_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_40 = 4'd0;
#0 i_fu_44 = 4'd0;
#0 indvar_flatten118_fu_48 = 7'd0;
#0 ap_done_reg = 1'b0;
end

IMG2RLE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_97_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_44 <= select_ln28_1_fu_135_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_44 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_97_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten118_fu_48 <= add_ln28_fu_103_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten118_fu_48 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_97_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_40 <= add_ln29_fu_165_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_40 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln30_reg_215 <= add_ln30_fu_159_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        zext_ln30_1_reg_220[5 : 0] <= zext_ln30_1_fu_186_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_97_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_44;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten118_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten118_load = indvar_flatten118_fu_48;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_40;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dct_1_ce0 = 1'b1;
    end else begin
        dct_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_1_ce0 = 1'b1;
    end else begin
        temp_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        temp_1_we0 = 1'b1;
    end else begin
        temp_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_1_fu_115_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln28_fu_103_p2 = (ap_sig_allocacmp_indvar_flatten118_load + 7'd1);

assign add_ln29_fu_165_p2 = (select_ln28_fu_127_p3 + 4'd1);

assign add_ln30_fu_159_p2 = (tmp_s_fu_147_p3 + zext_ln30_fu_155_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dct_1_address0 = zext_ln30_1_fu_186_p1;

assign icmp_ln28_fu_97_p2 = ((ap_sig_allocacmp_indvar_flatten118_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_121_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign select_ln28_1_fu_135_p3 = ((icmp_ln29_fu_121_p2[0:0] == 1'b1) ? add_ln28_1_fu_115_p2 : ap_sig_allocacmp_i_load);

assign select_ln28_fu_127_p3 = ((icmp_ln29_fu_121_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign temp_1_address0 = zext_ln30_1_reg_220;

assign temp_1_d0 = dct_1_q0;

assign tmp_s_fu_147_p3 = {{trunc_ln30_fu_143_p1}, {3'd0}};

assign trunc_ln30_fu_143_p1 = select_ln28_1_fu_135_p3[2:0];

assign zext_ln30_1_fu_186_p1 = add_ln30_reg_215;

assign zext_ln30_fu_155_p1 = select_ln28_fu_127_p3;

always @ (posedge ap_clk) begin
    zext_ln30_1_reg_220[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //IMG2RLE_IMG2RLE_Pipeline_VITIS_LOOP_28_1_VITIS_LOOP_29_27
