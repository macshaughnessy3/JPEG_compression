// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module IMG2RLE_IMG2RLE_Pipeline_M1_M2_L1_L2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dct_middle_address0,
        dct_middle_ce0,
        dct_middle_we0,
        dct_middle_d0,
        dct_middle_address1,
        dct_middle_ce1,
        dct_middle_q1,
        Y_address0,
        Y_ce0,
        Y_q0,
        Y_1_address0,
        Y_1_ce0,
        Y_1_q0,
        Y_2_address0,
        Y_2_ce0,
        Y_2_q0,
        Y_3_address0,
        Y_3_ce0,
        Y_3_q0,
        Y_4_address0,
        Y_4_ce0,
        Y_4_q0,
        Y_5_address0,
        Y_5_ce0,
        Y_5_q0,
        Y_6_address0,
        Y_6_ce0,
        Y_6_q0,
        Y_7_address0,
        Y_7_ce0,
        Y_7_q0,
        Y_8_address0,
        Y_8_ce0,
        Y_8_q0,
        Y_9_address0,
        Y_9_ce0,
        Y_9_q0,
        Y_10_address0,
        Y_10_ce0,
        Y_10_q0,
        Y_11_address0,
        Y_11_ce0,
        Y_11_q0,
        Y_12_address0,
        Y_12_ce0,
        Y_12_q0,
        Y_13_address0,
        Y_13_ce0,
        Y_13_q0,
        Y_14_address0,
        Y_14_ce0,
        Y_14_q0,
        Y_15_address0,
        Y_15_ce0,
        Y_15_q0,
        dct12_i761_0_address0,
        dct12_i761_0_ce0,
        dct12_i761_0_q0,
        dct12_i761_1_address0,
        dct12_i761_1_ce0,
        dct12_i761_1_q0,
        dct12_i761_2_address0,
        dct12_i761_2_ce0,
        dct12_i761_2_q0,
        dct12_i761_3_address0,
        dct12_i761_3_ce0,
        dct12_i761_3_q0,
        dct12_i761_4_address0,
        dct12_i761_4_ce0,
        dct12_i761_4_q0,
        dct12_i761_5_address0,
        dct12_i761_5_ce0,
        dct12_i761_5_q0,
        dct12_i761_6_address0,
        dct12_i761_6_ce0,
        dct12_i761_6_q0,
        dct12_i761_7_address0,
        dct12_i761_7_ce0,
        dct12_i761_7_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] dct_middle_address0;
output   dct_middle_ce0;
output   dct_middle_we0;
output  [10:0] dct_middle_d0;
output  [7:0] dct_middle_address1;
output   dct_middle_ce1;
input  [10:0] dct_middle_q1;
output  [3:0] Y_address0;
output   Y_ce0;
input  [7:0] Y_q0;
output  [3:0] Y_1_address0;
output   Y_1_ce0;
input  [7:0] Y_1_q0;
output  [3:0] Y_2_address0;
output   Y_2_ce0;
input  [7:0] Y_2_q0;
output  [3:0] Y_3_address0;
output   Y_3_ce0;
input  [7:0] Y_3_q0;
output  [3:0] Y_4_address0;
output   Y_4_ce0;
input  [7:0] Y_4_q0;
output  [3:0] Y_5_address0;
output   Y_5_ce0;
input  [7:0] Y_5_q0;
output  [3:0] Y_6_address0;
output   Y_6_ce0;
input  [7:0] Y_6_q0;
output  [3:0] Y_7_address0;
output   Y_7_ce0;
input  [7:0] Y_7_q0;
output  [3:0] Y_8_address0;
output   Y_8_ce0;
input  [7:0] Y_8_q0;
output  [3:0] Y_9_address0;
output   Y_9_ce0;
input  [7:0] Y_9_q0;
output  [3:0] Y_10_address0;
output   Y_10_ce0;
input  [7:0] Y_10_q0;
output  [3:0] Y_11_address0;
output   Y_11_ce0;
input  [7:0] Y_11_q0;
output  [3:0] Y_12_address0;
output   Y_12_ce0;
input  [7:0] Y_12_q0;
output  [3:0] Y_13_address0;
output   Y_13_ce0;
input  [7:0] Y_13_q0;
output  [3:0] Y_14_address0;
output   Y_14_ce0;
input  [7:0] Y_14_q0;
output  [3:0] Y_15_address0;
output   Y_15_ce0;
input  [7:0] Y_15_q0;
output  [2:0] dct12_i761_0_address0;
output   dct12_i761_0_ce0;
input  [10:0] dct12_i761_0_q0;
output  [2:0] dct12_i761_1_address0;
output   dct12_i761_1_ce0;
input  [11:0] dct12_i761_1_q0;
output  [2:0] dct12_i761_2_address0;
output   dct12_i761_2_ce0;
input  [11:0] dct12_i761_2_q0;
output  [2:0] dct12_i761_3_address0;
output   dct12_i761_3_ce0;
input  [11:0] dct12_i761_3_q0;
output  [2:0] dct12_i761_4_address0;
output   dct12_i761_4_ce0;
input  [11:0] dct12_i761_4_q0;
output  [2:0] dct12_i761_5_address0;
output   dct12_i761_5_ce0;
input  [11:0] dct12_i761_5_q0;
output  [2:0] dct12_i761_6_address0;
output   dct12_i761_6_ce0;
input  [11:0] dct12_i761_6_q0;
output  [2:0] dct12_i761_7_address0;
output   dct12_i761_7_ce0;
input  [11:0] dct12_i761_7_q0;

reg ap_idle;
reg dct_middle_ce0;
reg dct_middle_we0;
reg dct_middle_ce1;
reg Y_ce0;
reg Y_1_ce0;
reg Y_2_ce0;
reg Y_3_ce0;
reg Y_4_ce0;
reg Y_5_ce0;
reg Y_6_ce0;
reg Y_7_ce0;
reg Y_8_ce0;
reg Y_9_ce0;
reg Y_10_ce0;
reg Y_11_ce0;
reg Y_12_ce0;
reg Y_13_ce0;
reg Y_14_ce0;
reg Y_15_ce0;
reg dct12_i761_0_ce0;
reg dct12_i761_1_ce0;
reg dct12_i761_2_ce0;
reg dct12_i761_3_ce0;
reg dct12_i761_4_ce0;
reg dct12_i761_5_ce0;
reg dct12_i761_6_ce0;
reg dct12_i761_7_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln54_fu_503_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln55_fu_518_p2;
reg   [0:0] icmp_ln55_reg_1081;
reg   [0:0] icmp_ln55_reg_1081_pp0_iter1_reg;
wire   [0:0] or_ln55_fu_593_p2;
reg   [0:0] or_ln55_reg_1091;
wire   [0:0] and_ln55_fu_615_p2;
reg   [0:0] and_ln55_reg_1096;
wire   [3:0] empty_209_fu_660_p2;
reg   [3:0] empty_209_reg_1101;
reg   [3:0] empty_209_reg_1101_pp0_iter2_reg;
wire   [3:0] select_ln56_1_fu_733_p3;
reg   [3:0] select_ln56_1_reg_1107;
wire   [0:0] trunc_ln54_fu_740_p1;
reg   [0:0] trunc_ln54_reg_1112;
reg   [0:0] trunc_ln54_reg_1112_pp0_iter3_reg;
wire   [63:0] zext_ln60_1_fu_756_p1;
reg   [63:0] zext_ln60_1_reg_1165;
reg  signed [11:0] dct12_i761_2_load_reg_1235;
reg   [11:0] dct12_i761_3_load_reg_1240;
reg  signed [11:0] dct12_i761_3_load_reg_1240_pp0_iter4_reg;
reg  signed [11:0] dct12_i761_4_load_reg_1245;
reg  signed [11:0] dct12_i761_5_load_reg_1250;
reg  signed [11:0] dct12_i761_6_load_reg_1255;
reg   [7:0] dct_middle_addr_reg_1265;
reg   [7:0] dct_middle_addr_reg_1265_pp0_iter4_reg;
reg   [7:0] dct_middle_addr_reg_1265_pp0_iter5_reg;
reg   [7:0] dct_middle_addr_reg_1265_pp0_iter6_reg;
reg   [7:0] dct_middle_addr_reg_1265_pp0_iter7_reg;
wire   [7:0] select_ln60_2_fu_837_p3;
reg  signed [7:0] select_ln60_2_reg_1311;
wire   [7:0] select_ln60_6_fu_844_p3;
reg  signed [7:0] select_ln60_6_reg_1316;
wire   [7:0] select_ln60_3_fu_877_p3;
reg  signed [7:0] select_ln60_3_reg_1336;
reg  signed [10:0] dct_middle_load_reg_1351;
wire   [19:0] mul_ln63_1_fu_909_p2;
reg  signed [19:0] mul_ln63_1_reg_1356;
wire   [19:0] mul_ln63_7_fu_915_p2;
reg  signed [19:0] mul_ln63_7_reg_1361;
wire   [19:0] mul_ln63_3_fu_930_p2;
reg  signed [19:0] mul_ln63_3_reg_1371;
wire   [20:0] add_ln63_2_fu_942_p2;
reg   [20:0] add_ln63_2_reg_1376;
reg   [9:0] tmp_reg_1386;
wire   [63:0] zext_ln56_fu_744_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_59_cast_fu_810_p1;
reg   [3:0] jj_fu_108;
wire   [3:0] add_ln57_fu_666_p2;
wire    ap_loop_init;
reg   [3:0] ii_fu_112;
reg   [7:0] indvar_flatten13_fu_116;
wire   [7:0] select_ln56_2_fu_678_p3;
reg   [1:0] ll_fu_120;
wire   [1:0] select_ln55_1_fu_621_p3;
reg   [8:0] indvar_flatten26_fu_124;
wire   [8:0] select_ln55_2_fu_530_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten26_load;
reg   [1:0] kk_fu_128;
wire   [1:0] select_ln54_1_fu_713_p3;
reg   [8:0] indvar_flatten48_fu_132;
wire   [8:0] add_ln54_1_fu_509_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten48_load;
wire   [8:0] add_ln55_1_fu_524_p2;
wire   [0:0] icmp_ln56_fu_575_p2;
wire   [0:0] xor_ln54_fu_564_p2;
wire   [1:0] select_ln54_fu_557_p3;
wire   [0:0] and_ln54_1_fu_581_p2;
wire   [0:0] xor_ln55_fu_598_p2;
wire   [0:0] or_ln55_1_fu_604_p2;
wire   [0:0] and_ln54_fu_609_p2;
wire   [0:0] icmp_ln57_fu_569_p2;
wire   [1:0] add_ln55_fu_587_p2;
wire   [0:0] or_ln56_fu_629_p2;
wire   [0:0] or_ln56_1_fu_635_p2;
wire   [0:0] empty_fu_648_p1;
wire   [3:0] select_ln56_fu_640_p3;
wire   [3:0] tmp_6_fu_652_p3;
wire   [7:0] add_ln56_1_fu_672_p2;
wire   [1:0] add_ln54_fu_707_p2;
wire   [3:0] select_ln55_fu_720_p3;
wire   [3:0] add_ln56_fu_727_p2;
wire   [3:0] tmp_s_fu_779_p3;
wire   [3:0] empty_208_fu_786_p2;
wire   [7:0] tmp_7_fu_803_p3;
wire  signed [7:0] select_ln60_fu_815_p3;
wire  signed [7:0] select_ln60_1_fu_826_p3;
wire  signed [7:0] select_ln60_7_fu_851_p3;
wire  signed [7:0] select_ln60_4_fu_884_p3;
wire  signed [7:0] select_ln60_5_fu_895_p3;
wire  signed [18:0] grp_fu_994_p3;
wire  signed [19:0] grp_fu_1003_p3;
wire  signed [20:0] sext_ln63_6_fu_939_p1;
wire  signed [20:0] sext_ln63_5_fu_936_p1;
wire  signed [19:0] grp_fu_986_p3;
wire  signed [19:0] grp_fu_1011_p3;
wire  signed [20:0] grp_fu_1019_p3;
wire  signed [21:0] sext_ln63_9_fu_957_p1;
wire  signed [21:0] sext_ln63_7_fu_954_p1;
wire   [21:0] add_ln63_6_fu_960_p2;
wire  signed [21:0] sext_ln63_10_fu_951_p1;
wire   [21:0] add_ln63_7_fu_966_p2;
wire   [10:0] grp_fu_1003_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [18:0] grp_fu_1003_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 jj_fu_108 = 4'd0;
#0 ii_fu_112 = 4'd0;
#0 indvar_flatten13_fu_116 = 8'd0;
#0 ll_fu_120 = 2'd0;
#0 indvar_flatten26_fu_124 = 9'd0;
#0 kk_fu_128 = 2'd0;
#0 indvar_flatten48_fu_132 = 9'd0;
#0 ap_done_reg = 1'b0;
end

IMG2RLE_mul_8s_12s_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
mul_8s_12s_20_1_1_U634(
    .din0(select_ln60_2_reg_1311),
    .din1(dct12_i761_2_load_reg_1235),
    .dout(mul_ln63_1_fu_909_p2)
);

IMG2RLE_mul_8s_12s_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
mul_8s_12s_20_1_1_U635(
    .din0(select_ln60_6_reg_1316),
    .din1(dct12_i761_6_load_reg_1255),
    .dout(mul_ln63_7_fu_915_p2)
);

IMG2RLE_mul_8s_12s_20_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 20 ))
mul_8s_12s_20_1_1_U636(
    .din0(select_ln60_3_reg_1336),
    .din1(dct12_i761_3_load_reg_1240_pp0_iter4_reg),
    .dout(mul_ln63_3_fu_930_p2)
);

IMG2RLE_mac_muladd_8s_12s_20s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
mac_muladd_8s_12s_20s_20_4_1_U637(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln60_7_fu_851_p3),
    .din1(dct12_i761_7_q0),
    .din2(mul_ln63_7_reg_1361),
    .ce(1'b1),
    .dout(grp_fu_986_p3)
);

IMG2RLE_mac_muladd_8s_12s_11s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 11 ),
    .dout_WIDTH( 19 ))
mac_muladd_8s_12s_11s_19_4_1_U638(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln60_1_fu_826_p3),
    .din1(dct12_i761_1_q0),
    .din2(dct_middle_load_reg_1351),
    .ce(1'b1),
    .dout(grp_fu_994_p3)
);

IMG2RLE_mac_muladd_8s_11ns_20s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
mac_muladd_8s_11ns_20s_20_4_1_U639(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln60_fu_815_p3),
    .din1(grp_fu_1003_p1),
    .din2(mul_ln63_1_reg_1356),
    .ce(1'b1),
    .dout(grp_fu_1003_p3)
);

IMG2RLE_mac_muladd_8s_12s_20s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 20 ))
mac_muladd_8s_12s_20s_20_4_1_U640(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln60_4_fu_884_p3),
    .din1(dct12_i761_4_load_reg_1245),
    .din2(mul_ln63_3_reg_1371),
    .ce(1'b1),
    .dout(grp_fu_1011_p3)
);

IMG2RLE_mac_muladd_8s_12s_20s_21_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 20 ),
    .dout_WIDTH( 21 ))
mac_muladd_8s_12s_20s_21_4_1_U641(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln60_5_fu_895_p3),
    .din1(dct12_i761_5_load_reg_1250),
    .din2(grp_fu_986_p3),
    .ce(1'b1),
    .dout(grp_fu_1019_p3)
);

IMG2RLE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ii_fu_112 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ii_fu_112 <= select_ln56_1_fu_733_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_116 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            indvar_flatten13_fu_116 <= select_ln56_2_fu_678_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln54_fu_503_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten26_fu_124 <= select_ln55_2_fu_530_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten26_fu_124 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln54_fu_503_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten48_fu_132 <= add_ln54_1_fu_509_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten48_fu_132 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            jj_fu_108 <= 4'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            jj_fu_108 <= add_ln57_fu_666_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kk_fu_128 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            kk_fu_128 <= select_ln54_1_fu_713_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ll_fu_120 <= 2'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ll_fu_120 <= select_ln55_1_fu_621_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln63_2_reg_1376 <= add_ln63_2_fu_942_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        dct12_i761_2_load_reg_1235 <= dct12_i761_2_q0;
        dct12_i761_3_load_reg_1240 <= dct12_i761_3_q0;
        dct12_i761_3_load_reg_1240_pp0_iter4_reg <= dct12_i761_3_load_reg_1240;
        dct12_i761_4_load_reg_1245 <= dct12_i761_4_q0;
        dct12_i761_5_load_reg_1250 <= dct12_i761_5_q0;
        dct12_i761_6_load_reg_1255 <= dct12_i761_6_q0;
        dct_middle_addr_reg_1265 <= tmp_59_cast_fu_810_p1;
        dct_middle_addr_reg_1265_pp0_iter4_reg <= dct_middle_addr_reg_1265;
        dct_middle_addr_reg_1265_pp0_iter5_reg <= dct_middle_addr_reg_1265_pp0_iter4_reg;
        dct_middle_addr_reg_1265_pp0_iter6_reg <= dct_middle_addr_reg_1265_pp0_iter5_reg;
        dct_middle_addr_reg_1265_pp0_iter7_reg <= dct_middle_addr_reg_1265_pp0_iter6_reg;
        empty_209_reg_1101_pp0_iter2_reg <= empty_209_reg_1101;
        mul_ln63_1_reg_1356 <= mul_ln63_1_fu_909_p2;
        mul_ln63_3_reg_1371 <= mul_ln63_3_fu_930_p2;
        mul_ln63_7_reg_1361 <= mul_ln63_7_fu_915_p2;
        select_ln56_1_reg_1107 <= select_ln56_1_fu_733_p3;
        select_ln60_2_reg_1311 <= select_ln60_2_fu_837_p3;
        select_ln60_3_reg_1336 <= select_ln60_3_fu_877_p3;
        select_ln60_6_reg_1316 <= select_ln60_6_fu_844_p3;
        tmp_reg_1386 <= {{add_ln63_7_fu_966_p2[21:12]}};
        trunc_ln54_reg_1112 <= trunc_ln54_fu_740_p1;
        trunc_ln54_reg_1112_pp0_iter3_reg <= trunc_ln54_reg_1112;
        zext_ln60_1_reg_1165[3 : 0] <= zext_ln60_1_fu_756_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln55_reg_1096 <= and_ln55_fu_615_p2;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_209_reg_1101 <= empty_209_fu_660_p2;
        icmp_ln55_reg_1081 <= icmp_ln55_fu_518_p2;
        icmp_ln55_reg_1081_pp0_iter1_reg <= icmp_ln55_reg_1081;
        or_ln55_reg_1091 <= or_ln55_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        dct_middle_load_reg_1351 <= dct_middle_q1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_10_ce0 = 1'b1;
    end else begin
        Y_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Y_11_ce0 = 1'b1;
    end else begin
        Y_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Y_12_ce0 = 1'b1;
    end else begin
        Y_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Y_13_ce0 = 1'b1;
    end else begin
        Y_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_14_ce0 = 1'b1;
    end else begin
        Y_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_15_ce0 = 1'b1;
    end else begin
        Y_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_1_ce0 = 1'b1;
    end else begin
        Y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_2_ce0 = 1'b1;
    end else begin
        Y_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Y_3_ce0 = 1'b1;
    end else begin
        Y_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Y_4_ce0 = 1'b1;
    end else begin
        Y_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Y_5_ce0 = 1'b1;
    end else begin
        Y_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_6_ce0 = 1'b1;
    end else begin
        Y_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_7_ce0 = 1'b1;
    end else begin
        Y_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_8_ce0 = 1'b1;
    end else begin
        Y_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_9_ce0 = 1'b1;
    end else begin
        Y_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Y_ce0 = 1'b1;
    end else begin
        Y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_503_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter7_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten26_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten26_load = indvar_flatten26_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten48_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten48_load = indvar_flatten48_fu_132;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dct12_i761_0_ce0 = 1'b1;
    end else begin
        dct12_i761_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dct12_i761_1_ce0 = 1'b1;
    end else begin
        dct12_i761_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dct12_i761_2_ce0 = 1'b1;
    end else begin
        dct12_i761_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dct12_i761_3_ce0 = 1'b1;
    end else begin
        dct12_i761_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dct12_i761_4_ce0 = 1'b1;
    end else begin
        dct12_i761_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dct12_i761_5_ce0 = 1'b1;
    end else begin
        dct12_i761_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dct12_i761_6_ce0 = 1'b1;
    end else begin
        dct12_i761_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dct12_i761_7_ce0 = 1'b1;
    end else begin
        dct12_i761_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        dct_middle_ce0 = 1'b1;
    end else begin
        dct_middle_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dct_middle_ce1 = 1'b1;
    end else begin
        dct_middle_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        dct_middle_we0 = 1'b1;
    end else begin
        dct_middle_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Y_10_address0 = zext_ln60_1_fu_756_p1;

assign Y_11_address0 = zext_ln60_1_reg_1165;

assign Y_12_address0 = zext_ln60_1_reg_1165;

assign Y_13_address0 = zext_ln60_1_reg_1165;

assign Y_14_address0 = zext_ln60_1_fu_756_p1;

assign Y_15_address0 = zext_ln60_1_fu_756_p1;

assign Y_1_address0 = zext_ln60_1_fu_756_p1;

assign Y_2_address0 = zext_ln60_1_fu_756_p1;

assign Y_3_address0 = zext_ln60_1_reg_1165;

assign Y_4_address0 = zext_ln60_1_reg_1165;

assign Y_5_address0 = zext_ln60_1_reg_1165;

assign Y_6_address0 = zext_ln60_1_fu_756_p1;

assign Y_7_address0 = zext_ln60_1_fu_756_p1;

assign Y_8_address0 = zext_ln60_1_fu_756_p1;

assign Y_9_address0 = zext_ln60_1_fu_756_p1;

assign Y_address0 = zext_ln60_1_fu_756_p1;

assign add_ln54_1_fu_509_p2 = (ap_sig_allocacmp_indvar_flatten48_load + 9'd1);

assign add_ln54_fu_707_p2 = (kk_fu_128 + 2'd1);

assign add_ln55_1_fu_524_p2 = (ap_sig_allocacmp_indvar_flatten26_load + 9'd1);

assign add_ln55_fu_587_p2 = (select_ln54_fu_557_p3 + 2'd1);

assign add_ln56_1_fu_672_p2 = (indvar_flatten13_fu_116 + 8'd1);

assign add_ln56_fu_727_p2 = (select_ln55_fu_720_p3 + 4'd1);

assign add_ln57_fu_666_p2 = (select_ln56_fu_640_p3 + 4'd1);

assign add_ln63_2_fu_942_p2 = ($signed(sext_ln63_6_fu_939_p1) + $signed(sext_ln63_5_fu_936_p1));

assign add_ln63_6_fu_960_p2 = ($signed(sext_ln63_9_fu_957_p1) + $signed(sext_ln63_7_fu_954_p1));

assign add_ln63_7_fu_966_p2 = ($signed(add_ln63_6_fu_960_p2) + $signed(sext_ln63_10_fu_951_p1));

assign and_ln54_1_fu_581_p2 = (xor_ln54_fu_564_p2 & icmp_ln56_fu_575_p2);

assign and_ln54_fu_609_p2 = (xor_ln54_fu_564_p2 & or_ln55_1_fu_604_p2);

assign and_ln55_fu_615_p2 = (icmp_ln57_fu_569_p2 & and_ln54_fu_609_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign dct12_i761_0_address0 = zext_ln56_fu_744_p1;

assign dct12_i761_1_address0 = zext_ln56_fu_744_p1;

assign dct12_i761_2_address0 = zext_ln56_fu_744_p1;

assign dct12_i761_3_address0 = zext_ln56_fu_744_p1;

assign dct12_i761_4_address0 = zext_ln56_fu_744_p1;

assign dct12_i761_5_address0 = zext_ln56_fu_744_p1;

assign dct12_i761_6_address0 = zext_ln56_fu_744_p1;

assign dct12_i761_7_address0 = zext_ln56_fu_744_p1;

assign dct_middle_address0 = dct_middle_addr_reg_1265_pp0_iter7_reg;

assign dct_middle_address1 = tmp_59_cast_fu_810_p1;

assign dct_middle_d0 = $signed(tmp_reg_1386);

assign empty_208_fu_786_p2 = (select_ln56_1_reg_1107 + tmp_s_fu_779_p3);

assign empty_209_fu_660_p2 = (select_ln56_fu_640_p3 + tmp_6_fu_652_p3);

assign empty_fu_648_p1 = select_ln55_1_fu_621_p3[0:0];

assign grp_fu_1003_p1 = grp_fu_1003_p10;

assign grp_fu_1003_p10 = dct12_i761_0_q0;

assign icmp_ln54_fu_503_p2 = ((ap_sig_allocacmp_indvar_flatten48_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_518_p2 = ((ap_sig_allocacmp_indvar_flatten26_load == 9'd128) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_575_p2 = ((indvar_flatten13_fu_116 == 8'd64) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_569_p2 = ((jj_fu_108 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln55_1_fu_604_p2 = (xor_ln55_fu_598_p2 | icmp_ln55_reg_1081);

assign or_ln55_fu_593_p2 = (icmp_ln55_reg_1081 | and_ln54_1_fu_581_p2);

assign or_ln56_1_fu_635_p2 = (or_ln56_fu_629_p2 | icmp_ln55_reg_1081);

assign or_ln56_fu_629_p2 = (and_ln55_fu_615_p2 | and_ln54_1_fu_581_p2);

assign select_ln54_1_fu_713_p3 = ((icmp_ln55_reg_1081_pp0_iter1_reg[0:0] == 1'b1) ? add_ln54_fu_707_p2 : kk_fu_128);

assign select_ln54_fu_557_p3 = ((icmp_ln55_reg_1081[0:0] == 1'b1) ? 2'd0 : ll_fu_120);

assign select_ln55_1_fu_621_p3 = ((and_ln54_1_fu_581_p2[0:0] == 1'b1) ? add_ln55_fu_587_p2 : select_ln54_fu_557_p3);

assign select_ln55_2_fu_530_p3 = ((icmp_ln55_fu_518_p2[0:0] == 1'b1) ? 9'd1 : add_ln55_1_fu_524_p2);

assign select_ln55_fu_720_p3 = ((or_ln55_reg_1091[0:0] == 1'b1) ? 4'd0 : ii_fu_112);

assign select_ln56_1_fu_733_p3 = ((and_ln55_reg_1096[0:0] == 1'b1) ? add_ln56_fu_727_p2 : select_ln55_fu_720_p3);

assign select_ln56_2_fu_678_p3 = ((or_ln55_fu_593_p2[0:0] == 1'b1) ? 8'd1 : add_ln56_1_fu_672_p2);

assign select_ln56_fu_640_p3 = ((or_ln56_1_fu_635_p2[0:0] == 1'b1) ? 4'd0 : jj_fu_108);

assign select_ln60_1_fu_826_p3 = ((trunc_ln54_reg_1112[0:0] == 1'b1) ? Y_9_q0 : Y_1_q0);

assign select_ln60_2_fu_837_p3 = ((trunc_ln54_reg_1112[0:0] == 1'b1) ? Y_10_q0 : Y_2_q0);

assign select_ln60_3_fu_877_p3 = ((trunc_ln54_reg_1112_pp0_iter3_reg[0:0] == 1'b1) ? Y_11_q0 : Y_3_q0);

assign select_ln60_4_fu_884_p3 = ((trunc_ln54_reg_1112_pp0_iter3_reg[0:0] == 1'b1) ? Y_12_q0 : Y_4_q0);

assign select_ln60_5_fu_895_p3 = ((trunc_ln54_reg_1112_pp0_iter3_reg[0:0] == 1'b1) ? Y_13_q0 : Y_5_q0);

assign select_ln60_6_fu_844_p3 = ((trunc_ln54_reg_1112[0:0] == 1'b1) ? Y_14_q0 : Y_6_q0);

assign select_ln60_7_fu_851_p3 = ((trunc_ln54_reg_1112[0:0] == 1'b1) ? Y_15_q0 : Y_7_q0);

assign select_ln60_fu_815_p3 = ((trunc_ln54_reg_1112[0:0] == 1'b1) ? Y_8_q0 : Y_q0);

assign sext_ln63_10_fu_951_p1 = $signed(add_ln63_2_reg_1376);

assign sext_ln63_5_fu_936_p1 = grp_fu_994_p3;

assign sext_ln63_6_fu_939_p1 = grp_fu_1003_p3;

assign sext_ln63_7_fu_954_p1 = grp_fu_1011_p3;

assign sext_ln63_9_fu_957_p1 = grp_fu_1019_p3;

assign tmp_59_cast_fu_810_p1 = tmp_7_fu_803_p3;

assign tmp_6_fu_652_p3 = {{empty_fu_648_p1}, {3'd0}};

assign tmp_7_fu_803_p3 = {{empty_208_fu_786_p2}, {empty_209_reg_1101_pp0_iter2_reg}};

assign tmp_s_fu_779_p3 = {{trunc_ln54_reg_1112}, {3'd0}};

assign trunc_ln54_fu_740_p1 = select_ln54_1_fu_713_p3[0:0];

assign xor_ln54_fu_564_p2 = (icmp_ln55_reg_1081 ^ 1'd1);

assign xor_ln55_fu_598_p2 = (icmp_ln56_fu_575_p2 ^ 1'd1);

assign zext_ln56_fu_744_p1 = select_ln56_1_fu_733_p3;

assign zext_ln60_1_fu_756_p1 = empty_209_reg_1101;

always @ (posedge ap_clk) begin
    zext_ln60_1_reg_1165[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //IMG2RLE_IMG2RLE_Pipeline_M1_M2_L1_L2
