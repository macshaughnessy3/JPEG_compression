// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module IMG2RLE_IMG2RLE_Pipeline_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Cb_7_address0,
        Cb_7_ce0,
        Cb_7_we0,
        Cb_7_d0,
        Cb_6_address0,
        Cb_6_ce0,
        Cb_6_we0,
        Cb_6_d0,
        Cb_5_address0,
        Cb_5_ce0,
        Cb_5_we0,
        Cb_5_d0,
        Cb_4_address0,
        Cb_4_ce0,
        Cb_4_we0,
        Cb_4_d0,
        Cb_3_address0,
        Cb_3_ce0,
        Cb_3_we0,
        Cb_3_d0,
        Cb_2_address0,
        Cb_2_ce0,
        Cb_2_we0,
        Cb_2_d0,
        Cb_1_address0,
        Cb_1_ce0,
        Cb_1_we0,
        Cb_1_d0,
        Cb_address0,
        Cb_ce0,
        Cb_we0,
        Cb_d0,
        phi_ln141
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] Cb_7_address0;
output   Cb_7_ce0;
output   Cb_7_we0;
output  [15:0] Cb_7_d0;
output  [2:0] Cb_6_address0;
output   Cb_6_ce0;
output   Cb_6_we0;
output  [15:0] Cb_6_d0;
output  [2:0] Cb_5_address0;
output   Cb_5_ce0;
output   Cb_5_we0;
output  [15:0] Cb_5_d0;
output  [2:0] Cb_4_address0;
output   Cb_4_ce0;
output   Cb_4_we0;
output  [15:0] Cb_4_d0;
output  [2:0] Cb_3_address0;
output   Cb_3_ce0;
output   Cb_3_we0;
output  [15:0] Cb_3_d0;
output  [2:0] Cb_2_address0;
output   Cb_2_ce0;
output   Cb_2_we0;
output  [15:0] Cb_2_d0;
output  [2:0] Cb_1_address0;
output   Cb_1_ce0;
output   Cb_1_we0;
output  [15:0] Cb_1_d0;
output  [2:0] Cb_address0;
output   Cb_ce0;
output   Cb_we0;
output  [15:0] Cb_d0;
input  [2:0] phi_ln141;

reg ap_idle;
reg Cb_7_ce0;
reg Cb_7_we0;
reg Cb_6_ce0;
reg Cb_6_we0;
reg Cb_5_ce0;
reg Cb_5_we0;
reg Cb_4_ce0;
reg Cb_4_we0;
reg Cb_3_ce0;
reg Cb_3_we0;
reg Cb_2_ce0;
reg Cb_2_we0;
reg Cb_1_ce0;
reg Cb_1_we0;
reg Cb_ce0;
reg Cb_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln141_fu_202_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln141_fu_184_p1;
reg   [2:0] arrayinit_curidx19_fu_54;
wire   [2:0] add_ln141_fu_196_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_arrayinit_curidx19_load;
wire   [2:0] phi_ln141_read_read_fu_58_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 arrayinit_curidx19_fu_54 = 3'd0;
#0 ap_done_reg = 1'b0;
end

IMG2RLE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        arrayinit_curidx19_fu_54 <= add_ln141_fu_196_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Cb_1_ce0 = 1'b1;
    end else begin
        Cb_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln141_read_read_fu_58_p2 == 3'd1))) begin
        Cb_1_we0 = 1'b1;
    end else begin
        Cb_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Cb_2_ce0 = 1'b1;
    end else begin
        Cb_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln141_read_read_fu_58_p2 == 3'd2))) begin
        Cb_2_we0 = 1'b1;
    end else begin
        Cb_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Cb_3_ce0 = 1'b1;
    end else begin
        Cb_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln141_read_read_fu_58_p2 == 3'd3))) begin
        Cb_3_we0 = 1'b1;
    end else begin
        Cb_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Cb_4_ce0 = 1'b1;
    end else begin
        Cb_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln141_read_read_fu_58_p2 == 3'd4))) begin
        Cb_4_we0 = 1'b1;
    end else begin
        Cb_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Cb_5_ce0 = 1'b1;
    end else begin
        Cb_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln141_read_read_fu_58_p2 == 3'd5))) begin
        Cb_5_we0 = 1'b1;
    end else begin
        Cb_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Cb_6_ce0 = 1'b1;
    end else begin
        Cb_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln141_read_read_fu_58_p2 == 3'd6))) begin
        Cb_6_we0 = 1'b1;
    end else begin
        Cb_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Cb_7_ce0 = 1'b1;
    end else begin
        Cb_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln141_read_read_fu_58_p2 == 3'd7))) begin
        Cb_7_we0 = 1'b1;
    end else begin
        Cb_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Cb_ce0 = 1'b1;
    end else begin
        Cb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln141_read_read_fu_58_p2 == 3'd0))) begin
        Cb_we0 = 1'b1;
    end else begin
        Cb_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln141_fu_202_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_arrayinit_curidx19_load = 3'd0;
    end else begin
        ap_sig_allocacmp_arrayinit_curidx19_load = arrayinit_curidx19_fu_54;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cb_1_address0 = zext_ln141_fu_184_p1;

assign Cb_1_d0 = 16'd0;

assign Cb_2_address0 = zext_ln141_fu_184_p1;

assign Cb_2_d0 = 16'd0;

assign Cb_3_address0 = zext_ln141_fu_184_p1;

assign Cb_3_d0 = 16'd0;

assign Cb_4_address0 = zext_ln141_fu_184_p1;

assign Cb_4_d0 = 16'd0;

assign Cb_5_address0 = zext_ln141_fu_184_p1;

assign Cb_5_d0 = 16'd0;

assign Cb_6_address0 = zext_ln141_fu_184_p1;

assign Cb_6_d0 = 16'd0;

assign Cb_7_address0 = zext_ln141_fu_184_p1;

assign Cb_7_d0 = 16'd0;

assign Cb_address0 = zext_ln141_fu_184_p1;

assign Cb_d0 = 16'd0;

assign add_ln141_fu_196_p2 = (ap_sig_allocacmp_arrayinit_curidx19_load + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln141_fu_202_p2 = ((ap_sig_allocacmp_arrayinit_curidx19_load == 3'd7) ? 1'b1 : 1'b0);

assign phi_ln141_read_read_fu_58_p2 = phi_ln141;

assign zext_ln141_fu_184_p1 = ap_sig_allocacmp_arrayinit_curidx19_load;

endmodule //IMG2RLE_IMG2RLE_Pipeline_3
