// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module IMG2RLE_IMG2RLE_Pipeline_color1_color2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_A_AWVALID,
        m_axi_mem_A_AWREADY,
        m_axi_mem_A_AWADDR,
        m_axi_mem_A_AWID,
        m_axi_mem_A_AWLEN,
        m_axi_mem_A_AWSIZE,
        m_axi_mem_A_AWBURST,
        m_axi_mem_A_AWLOCK,
        m_axi_mem_A_AWCACHE,
        m_axi_mem_A_AWPROT,
        m_axi_mem_A_AWQOS,
        m_axi_mem_A_AWREGION,
        m_axi_mem_A_AWUSER,
        m_axi_mem_A_WVALID,
        m_axi_mem_A_WREADY,
        m_axi_mem_A_WDATA,
        m_axi_mem_A_WSTRB,
        m_axi_mem_A_WLAST,
        m_axi_mem_A_WID,
        m_axi_mem_A_WUSER,
        m_axi_mem_A_ARVALID,
        m_axi_mem_A_ARREADY,
        m_axi_mem_A_ARADDR,
        m_axi_mem_A_ARID,
        m_axi_mem_A_ARLEN,
        m_axi_mem_A_ARSIZE,
        m_axi_mem_A_ARBURST,
        m_axi_mem_A_ARLOCK,
        m_axi_mem_A_ARCACHE,
        m_axi_mem_A_ARPROT,
        m_axi_mem_A_ARQOS,
        m_axi_mem_A_ARREGION,
        m_axi_mem_A_ARUSER,
        m_axi_mem_A_RVALID,
        m_axi_mem_A_RREADY,
        m_axi_mem_A_RDATA,
        m_axi_mem_A_RLAST,
        m_axi_mem_A_RID,
        m_axi_mem_A_RFIFONUM,
        m_axi_mem_A_RUSER,
        m_axi_mem_A_RRESP,
        m_axi_mem_A_BVALID,
        m_axi_mem_A_BREADY,
        m_axi_mem_A_BRESP,
        m_axi_mem_A_BID,
        m_axi_mem_A_BUSER,
        Y_address0,
        Y_ce0,
        Y_we0,
        Y_d0,
        Y_1_address0,
        Y_1_ce0,
        Y_1_we0,
        Y_1_d0,
        Y_2_address0,
        Y_2_ce0,
        Y_2_we0,
        Y_2_d0,
        Y_3_address0,
        Y_3_ce0,
        Y_3_we0,
        Y_3_d0,
        Y_4_address0,
        Y_4_ce0,
        Y_4_we0,
        Y_4_d0,
        Y_5_address0,
        Y_5_ce0,
        Y_5_we0,
        Y_5_d0,
        Y_6_address0,
        Y_6_ce0,
        Y_6_we0,
        Y_6_d0,
        Y_7_address0,
        Y_7_ce0,
        Y_7_we0,
        Y_7_d0,
        Y_8_address0,
        Y_8_ce0,
        Y_8_we0,
        Y_8_d0,
        Y_9_address0,
        Y_9_ce0,
        Y_9_we0,
        Y_9_d0,
        Y_10_address0,
        Y_10_ce0,
        Y_10_we0,
        Y_10_d0,
        Y_11_address0,
        Y_11_ce0,
        Y_11_we0,
        Y_11_d0,
        Y_12_address0,
        Y_12_ce0,
        Y_12_we0,
        Y_12_d0,
        Y_13_address0,
        Y_13_ce0,
        Y_13_we0,
        Y_13_d0,
        Y_14_address0,
        Y_14_ce0,
        Y_14_we0,
        Y_14_d0,
        Y_15_address0,
        Y_15_ce0,
        Y_15_we0,
        Y_15_d0,
        Image_Cb_address0,
        Image_Cb_ce0,
        Image_Cb_we0,
        Image_Cb_d0,
        Image_Cb_1_address0,
        Image_Cb_1_ce0,
        Image_Cb_1_we0,
        Image_Cb_1_d0,
        Image_Cr_address0,
        Image_Cr_ce0,
        Image_Cr_we0,
        Image_Cr_d0,
        Image_Cr_1_address0,
        Image_Cr_1_ce0,
        Image_Cr_1_we0,
        Image_Cr_1_d0,
        empty_51,
        empty_52,
        MatRGB_DRAM,
        empty,
        add_ln136,
        xor_ln136
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_A_AWVALID;
input   m_axi_mem_A_AWREADY;
output  [63:0] m_axi_mem_A_AWADDR;
output  [0:0] m_axi_mem_A_AWID;
output  [31:0] m_axi_mem_A_AWLEN;
output  [2:0] m_axi_mem_A_AWSIZE;
output  [1:0] m_axi_mem_A_AWBURST;
output  [1:0] m_axi_mem_A_AWLOCK;
output  [3:0] m_axi_mem_A_AWCACHE;
output  [2:0] m_axi_mem_A_AWPROT;
output  [3:0] m_axi_mem_A_AWQOS;
output  [3:0] m_axi_mem_A_AWREGION;
output  [0:0] m_axi_mem_A_AWUSER;
output   m_axi_mem_A_WVALID;
input   m_axi_mem_A_WREADY;
output  [31:0] m_axi_mem_A_WDATA;
output  [3:0] m_axi_mem_A_WSTRB;
output   m_axi_mem_A_WLAST;
output  [0:0] m_axi_mem_A_WID;
output  [0:0] m_axi_mem_A_WUSER;
output   m_axi_mem_A_ARVALID;
input   m_axi_mem_A_ARREADY;
output  [63:0] m_axi_mem_A_ARADDR;
output  [0:0] m_axi_mem_A_ARID;
output  [31:0] m_axi_mem_A_ARLEN;
output  [2:0] m_axi_mem_A_ARSIZE;
output  [1:0] m_axi_mem_A_ARBURST;
output  [1:0] m_axi_mem_A_ARLOCK;
output  [3:0] m_axi_mem_A_ARCACHE;
output  [2:0] m_axi_mem_A_ARPROT;
output  [3:0] m_axi_mem_A_ARQOS;
output  [3:0] m_axi_mem_A_ARREGION;
output  [0:0] m_axi_mem_A_ARUSER;
input   m_axi_mem_A_RVALID;
output   m_axi_mem_A_RREADY;
input  [31:0] m_axi_mem_A_RDATA;
input   m_axi_mem_A_RLAST;
input  [0:0] m_axi_mem_A_RID;
input  [8:0] m_axi_mem_A_RFIFONUM;
input  [0:0] m_axi_mem_A_RUSER;
input  [1:0] m_axi_mem_A_RRESP;
input   m_axi_mem_A_BVALID;
output   m_axi_mem_A_BREADY;
input  [1:0] m_axi_mem_A_BRESP;
input  [0:0] m_axi_mem_A_BID;
input  [0:0] m_axi_mem_A_BUSER;
output  [3:0] Y_address0;
output   Y_ce0;
output   Y_we0;
output  [7:0] Y_d0;
output  [3:0] Y_1_address0;
output   Y_1_ce0;
output   Y_1_we0;
output  [7:0] Y_1_d0;
output  [3:0] Y_2_address0;
output   Y_2_ce0;
output   Y_2_we0;
output  [7:0] Y_2_d0;
output  [3:0] Y_3_address0;
output   Y_3_ce0;
output   Y_3_we0;
output  [7:0] Y_3_d0;
output  [3:0] Y_4_address0;
output   Y_4_ce0;
output   Y_4_we0;
output  [7:0] Y_4_d0;
output  [3:0] Y_5_address0;
output   Y_5_ce0;
output   Y_5_we0;
output  [7:0] Y_5_d0;
output  [3:0] Y_6_address0;
output   Y_6_ce0;
output   Y_6_we0;
output  [7:0] Y_6_d0;
output  [3:0] Y_7_address0;
output   Y_7_ce0;
output   Y_7_we0;
output  [7:0] Y_7_d0;
output  [3:0] Y_8_address0;
output   Y_8_ce0;
output   Y_8_we0;
output  [7:0] Y_8_d0;
output  [3:0] Y_9_address0;
output   Y_9_ce0;
output   Y_9_we0;
output  [7:0] Y_9_d0;
output  [3:0] Y_10_address0;
output   Y_10_ce0;
output   Y_10_we0;
output  [7:0] Y_10_d0;
output  [3:0] Y_11_address0;
output   Y_11_ce0;
output   Y_11_we0;
output  [7:0] Y_11_d0;
output  [3:0] Y_12_address0;
output   Y_12_ce0;
output   Y_12_we0;
output  [7:0] Y_12_d0;
output  [3:0] Y_13_address0;
output   Y_13_ce0;
output   Y_13_we0;
output  [7:0] Y_13_d0;
output  [3:0] Y_14_address0;
output   Y_14_ce0;
output   Y_14_we0;
output  [7:0] Y_14_d0;
output  [3:0] Y_15_address0;
output   Y_15_ce0;
output   Y_15_we0;
output  [7:0] Y_15_d0;
output  [6:0] Image_Cb_address0;
output   Image_Cb_ce0;
output   Image_Cb_we0;
output  [9:0] Image_Cb_d0;
output  [6:0] Image_Cb_1_address0;
output   Image_Cb_1_ce0;
output   Image_Cb_1_we0;
output  [9:0] Image_Cb_1_d0;
output  [6:0] Image_Cr_address0;
output   Image_Cr_ce0;
output   Image_Cr_we0;
output  [7:0] Image_Cr_d0;
output  [6:0] Image_Cr_1_address0;
output   Image_Cr_1_ce0;
output   Image_Cr_1_we0;
output  [7:0] Image_Cr_1_d0;
input  [4:0] empty_51;
input  [4:0] empty_52;
input  [63:0] MatRGB_DRAM;
input  [1:0] empty;
input  [1:0] add_ln136;
input  [1:0] xor_ln136;

reg ap_idle;
reg m_axi_mem_A_ARVALID;
reg[63:0] m_axi_mem_A_ARADDR;
reg m_axi_mem_A_RREADY;
reg Y_ce0;
reg Y_we0;
reg Y_1_ce0;
reg Y_1_we0;
reg Y_2_ce0;
reg Y_2_we0;
reg Y_3_ce0;
reg Y_3_we0;
reg Y_4_ce0;
reg Y_4_we0;
reg Y_5_ce0;
reg Y_5_we0;
reg Y_6_ce0;
reg Y_6_we0;
reg Y_7_ce0;
reg Y_7_we0;
reg Y_8_ce0;
reg Y_8_we0;
reg Y_9_ce0;
reg Y_9_we0;
reg Y_10_ce0;
reg Y_10_we0;
reg Y_11_ce0;
reg Y_11_we0;
reg Y_12_ce0;
reg Y_12_we0;
reg Y_13_ce0;
reg Y_13_we0;
reg Y_14_ce0;
reg Y_14_we0;
reg Y_15_ce0;
reg Y_15_we0;
reg Image_Cb_ce0;
reg Image_Cb_we0;
reg Image_Cb_1_ce0;
reg Image_Cb_1_we0;
reg Image_Cr_ce0;
reg Image_Cr_we0;
reg Image_Cr_1_ce0;
reg Image_Cr_1_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
reg   [0:0] icmp_ln144_reg_1289;
reg    ap_block_state3_io;
reg    ap_block_state12_pp0_stage2_iter3;
reg    ap_block_pp0_stage2_subdone;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_A_blk_n_AR;
wire    ap_block_pp0_stage2;
reg    mem_A_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0;
reg    ap_block_state13_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln144_fu_564_p2;
reg   [0:0] icmp_ln144_reg_1289_pp0_iter1_reg;
reg   [0:0] icmp_ln144_reg_1289_pp0_iter2_reg;
reg   [0:0] icmp_ln144_reg_1289_pp0_iter3_reg;
reg   [0:0] icmp_ln144_reg_1289_pp0_iter4_reg;
wire   [8:0] add_ln144_1_fu_570_p2;
reg   [8:0] add_ln144_1_reg_1293;
reg   [4:0] jj_load_reg_1298;
reg   [4:0] ii_load_reg_1303;
wire   [4:0] add_ln144_fu_582_p2;
reg   [4:0] add_ln144_reg_1308;
wire   [0:0] icmp_ln145_fu_588_p2;
reg   [0:0] icmp_ln145_reg_1313;
wire   [4:0] select_ln144_fu_594_p3;
reg   [4:0] select_ln144_reg_1319;
reg    ap_block_state11_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
reg   [4:0] select_ln144_reg_1319_pp0_iter1_reg;
reg   [4:0] select_ln144_reg_1319_pp0_iter2_reg;
reg   [4:0] select_ln144_reg_1319_pp0_iter3_reg;
reg   [4:0] select_ln144_reg_1319_pp0_iter4_reg;
wire   [4:0] select_ln144_1_fu_600_p3;
reg   [4:0] select_ln144_1_reg_1326;
wire   [0:0] trunc_ln144_fu_605_p1;
reg   [0:0] trunc_ln144_reg_1331;
reg   [0:0] trunc_ln144_reg_1331_pp0_iter1_reg;
reg   [0:0] trunc_ln144_reg_1331_pp0_iter2_reg;
reg   [0:0] trunc_ln144_reg_1331_pp0_iter3_reg;
reg   [0:0] trunc_ln144_reg_1331_pp0_iter4_reg;
wire   [3:0] trunc_ln144_1_fu_609_p1;
reg   [3:0] trunc_ln144_1_reg_1335;
reg   [3:0] trunc_ln144_1_reg_1335_pp0_iter1_reg;
reg   [3:0] trunc_ln144_1_reg_1335_pp0_iter2_reg;
reg   [3:0] trunc_ln144_1_reg_1335_pp0_iter3_reg;
reg   [3:0] trunc_ln144_1_reg_1335_pp0_iter4_reg;
reg   [2:0] lshr_ln_reg_1339;
reg   [2:0] lshr_ln_reg_1339_pp0_iter1_reg;
reg   [2:0] lshr_ln_reg_1339_pp0_iter2_reg;
reg   [2:0] lshr_ln_reg_1339_pp0_iter3_reg;
reg   [2:0] lshr_ln_reg_1339_pp0_iter4_reg;
wire   [63:0] empty_207_fu_658_p2;
reg   [63:0] empty_207_reg_1344;
reg   [63:0] mem_A_addr_reg_1350;
reg   [63:0] mem_A_addr_1_reg_1356;
reg    ap_block_pp0_stage2_11001;
reg   [63:0] mem_A_addr_2_reg_1362;
reg   [31:0] mem_A_addr_read_reg_1368;
reg   [31:0] mem_A_addr_1_read_reg_1373;
wire   [7:0] trunc_ln150_fu_768_p1;
reg   [7:0] trunc_ln150_reg_1378;
wire   [7:0] trunc_ln146_1_fu_788_p1;
reg   [7:0] trunc_ln146_1_reg_1388;
reg   [31:0] mem_A_addr_2_read_reg_1398;
wire   [7:0] trunc_ln146_2_fu_808_p1;
reg   [7:0] trunc_ln146_2_reg_1403;
wire   [14:0] add_ln150_fu_834_p2;
reg   [14:0] add_ln150_reg_1412;
wire   [15:0] sub_ln151_1_fu_887_p2;
reg   [15:0] sub_ln151_1_reg_1417;
wire   [14:0] sub_ln152_fu_935_p2;
reg   [14:0] sub_ln152_reg_1422;
wire   [14:0] add_ln152_3_fu_958_p2;
reg   [14:0] add_ln152_3_reg_1427;
wire   [6:0] add_ln151_3_fu_974_p2;
reg   [6:0] add_ln151_3_reg_1432;
wire   [15:0] add_ln150_3_fu_1020_p2;
reg   [15:0] add_ln150_3_reg_1437;
reg   [8:0] trunc_ln151_1_reg_1442;
reg   [7:0] trunc_ln3_reg_1447;
wire   [7:0] add_ln154_fu_1213_p2;
reg   [7:0] add_ln154_reg_1452;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln151_11_fu_1153_p1;
wire   [63:0] zext_ln145_fu_1219_p1;
wire  signed [63:0] sext_ln146_fu_674_p1;
wire  signed [63:0] sext_ln146_1_fu_699_p1;
wire  signed [63:0] sext_ln146_2_fu_724_p1;
reg   [4:0] jj_fu_202;
wire   [4:0] add_ln145_fu_734_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_jj_load;
reg   [4:0] ii_fu_206;
reg   [4:0] ap_sig_allocacmp_ii_load;
reg   [8:0] indvar_flatten_fu_210;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [9:0] add_ln151_2_fu_1198_p2;
wire   [7:0] xor_ln152_fu_1206_p2;
wire   [19:0] tmp_4_fu_627_p4;
wire   [3:0] trunc_ln146_fu_623_p1;
wire   [10:0] tmp_5_fu_640_p4;
wire   [63:0] p_cast77_fu_649_p1;
wire   [63:0] tmp_fu_653_p2;
wire   [63:0] p_cast76_fu_636_p1;
wire   [61:0] trunc_ln146_4_fu_664_p4;
wire   [63:0] add_ln146_fu_684_p2;
wire   [61:0] trunc_ln146_5_fu_689_p4;
wire   [63:0] add_ln146_1_fu_709_p2;
wire   [61:0] trunc_ln146_6_fu_714_p4;
wire   [4:0] shl_ln_fu_752_p3;
wire   [31:0] zext_ln146_fu_759_p1;
wire   [31:0] lshr_ln146_fu_763_p2;
wire   [4:0] shl_ln146_1_fu_772_p3;
wire   [31:0] zext_ln146_1_fu_779_p1;
wire   [31:0] lshr_ln146_1_fu_783_p2;
wire   [4:0] shl_ln146_2_fu_792_p3;
wire   [31:0] zext_ln146_2_fu_799_p1;
wire   [31:0] lshr_ln146_2_fu_803_p2;
wire   [13:0] shl_ln1_fu_812_p3;
wire   [8:0] shl_ln150_1_fu_819_p3;
wire   [14:0] zext_ln150_fu_826_p1;
wire   [14:0] zext_ln150_1_fu_830_p1;
wire   [13:0] shl_ln151_2_fu_840_p3;
wire   [12:0] shl_ln151_3_fu_847_p3;
wire   [14:0] zext_ln151_2_fu_854_p1;
wire   [14:0] zext_ln151_3_fu_858_p1;
wire   [14:0] add_ln151_fu_862_p2;
wire   [8:0] shl_ln151_4_fu_868_p3;
wire   [15:0] zext_ln151_4_fu_875_p1;
wire   [15:0] zext_ln151_6_fu_883_p1;
wire   [12:0] shl_ln3_fu_893_p3;
wire   [9:0] shl_ln152_1_fu_900_p3;
wire   [13:0] zext_ln152_fu_907_p1;
wire   [13:0] zext_ln152_1_fu_911_p1;
wire   [13:0] add_ln152_fu_915_p2;
wire   [13:0] zext_ln152_2_fu_921_p1;
wire   [13:0] add_ln152_1_fu_925_p2;
wire   [14:0] zext_ln152_3_fu_931_p1;
wire   [10:0] shl_ln152_2_fu_941_p3;
wire   [14:0] zext_ln152_4_fu_948_p1;
wire   [14:0] add_ln152_2_fu_952_p2;
wire   [14:0] zext_ln151_5_fu_879_p1;
wire   [6:0] tmp_s_fu_964_p3;
wire   [6:0] zext_ln151_7_fu_971_p1;
wire   [14:0] shl_ln150_2_fu_980_p3;
wire   [15:0] zext_ln150_2_fu_987_p1;
wire   [15:0] zext_ln150_3_fu_990_p1;
wire   [15:0] add_ln150_1_fu_994_p2;
wire   [15:0] zext_ln150_4_fu_1000_p1;
wire   [11:0] shl_ln150_3_fu_1009_p3;
wire   [15:0] add_ln150_2_fu_1003_p2;
wire   [15:0] zext_ln150_5_fu_1016_p1;
wire   [14:0] shl_ln2_fu_1026_p3;
wire   [11:0] shl_ln151_1_fu_1033_p3;
wire   [15:0] zext_ln151_fu_1040_p1;
wire   [15:0] zext_ln151_1_fu_1044_p1;
wire   [15:0] sub_ln151_fu_1048_p2;
wire  signed [16:0] sext_ln151_fu_1054_p1;
wire  signed [16:0] sext_ln151_1_fu_1058_p1;
wire   [8:0] shl_ln151_5_fu_1067_p3;
wire   [12:0] zext_ln151_8_fu_1074_p1;
wire   [12:0] zext_ln151_9_fu_1078_p1;
wire   [12:0] add_ln151_1_fu_1082_p2;
wire   [16:0] sub_ln151_2_fu_1061_p2;
wire   [16:0] zext_ln151_10_fu_1088_p1;
wire   [16:0] sub_ln151_3_fu_1092_p2;
wire  signed [15:0] sext_ln152_fu_1108_p1;
wire   [15:0] zext_ln152_5_fu_1111_p1;
wire   [14:0] shl_ln152_3_fu_1120_p3;
wire   [15:0] zext_ln152_6_fu_1127_p1;
wire   [15:0] sub_ln152_1_fu_1114_p2;
wire   [15:0] sub_ln152_2_fu_1131_p2;
wire   [15:0] add_ln152_4_fu_1137_p2;
wire   [10:0] shl_ln150_4_fu_1160_p3;
wire   [15:0] zext_ln150_6_fu_1167_p1;
wire   [15:0] add_ln150_4_fu_1171_p2;
wire   [15:0] zext_ln150_7_fu_1176_p1;
wire   [15:0] add_ln150_5_fu_1179_p2;
wire  signed [9:0] sext_ln151_2_fu_1195_p1;
wire   [7:0] trunc_ln2_fu_1185_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage1;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [2:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 jj_fu_202 = 5'd0;
#0 ii_fu_206 = 5'd0;
#0 indvar_flatten_fu_210 = 9'd0;
#0 ap_done_reg = 1'b0;
end

IMG2RLE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter4_stage1) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter4_stage1) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter4_stage1) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter4_stage1) & (ap_idle_pp0_0to3 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ii_fu_206 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln144_reg_1289 == 1'd0))) begin
        ii_fu_206 <= select_ln144_1_reg_1326;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_210 <= 9'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln144_reg_1289 == 1'd0))) begin
        indvar_flatten_fu_210 <= add_ln144_1_reg_1293;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        jj_fu_202 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln144_reg_1289 == 1'd0))) begin
        jj_fu_202 <= add_ln145_fu_734_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln144_1_reg_1293 <= add_ln144_1_fu_570_p2;
        add_ln144_reg_1308 <= add_ln144_fu_582_p2;
        add_ln154_reg_1452 <= add_ln154_fu_1213_p2;
        icmp_ln144_reg_1289 <= icmp_ln144_fu_564_p2;
        icmp_ln144_reg_1289_pp0_iter1_reg <= icmp_ln144_reg_1289;
        icmp_ln144_reg_1289_pp0_iter2_reg <= icmp_ln144_reg_1289_pp0_iter1_reg;
        icmp_ln144_reg_1289_pp0_iter3_reg <= icmp_ln144_reg_1289_pp0_iter2_reg;
        icmp_ln144_reg_1289_pp0_iter4_reg <= icmp_ln144_reg_1289_pp0_iter3_reg;
        icmp_ln145_reg_1313 <= icmp_ln145_fu_588_p2;
        ii_load_reg_1303 <= ap_sig_allocacmp_ii_load;
        jj_load_reg_1298 <= ap_sig_allocacmp_jj_load;
        mem_A_addr_2_read_reg_1398 <= m_axi_mem_A_RDATA;
        trunc_ln146_1_reg_1388 <= trunc_ln146_1_fu_788_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln150_3_reg_1437 <= add_ln150_3_fu_1020_p2;
        add_ln151_3_reg_1432 <= add_ln151_3_fu_974_p2;
        mem_A_addr_1_read_reg_1373 <= m_axi_mem_A_RDATA;
        mem_A_addr_1_reg_1356 <= sext_ln146_1_fu_699_p1;
        mem_A_addr_2_reg_1362 <= sext_ln146_2_fu_724_p1;
        trunc_ln150_reg_1378 <= trunc_ln150_fu_768_p1;
        trunc_ln151_1_reg_1442 <= {{sub_ln151_3_fu_1092_p2[16:8]}};
        trunc_ln3_reg_1447 <= {{add_ln152_4_fu_1137_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln150_reg_1412[14 : 1] <= add_ln150_fu_834_p2[14 : 1];
        add_ln152_3_reg_1427[14 : 1] <= add_ln152_3_fu_958_p2[14 : 1];
        empty_207_reg_1344 <= empty_207_fu_658_p2;
        lshr_ln_reg_1339 <= {{select_ln144_1_fu_600_p3[3:1]}};
        lshr_ln_reg_1339_pp0_iter1_reg <= lshr_ln_reg_1339;
        lshr_ln_reg_1339_pp0_iter2_reg <= lshr_ln_reg_1339_pp0_iter1_reg;
        lshr_ln_reg_1339_pp0_iter3_reg <= lshr_ln_reg_1339_pp0_iter2_reg;
        lshr_ln_reg_1339_pp0_iter4_reg <= lshr_ln_reg_1339_pp0_iter3_reg;
        mem_A_addr_read_reg_1368 <= m_axi_mem_A_RDATA;
        mem_A_addr_reg_1350 <= sext_ln146_fu_674_p1;
        select_ln144_1_reg_1326 <= select_ln144_1_fu_600_p3;
        select_ln144_reg_1319 <= select_ln144_fu_594_p3;
        select_ln144_reg_1319_pp0_iter1_reg <= select_ln144_reg_1319;
        select_ln144_reg_1319_pp0_iter2_reg <= select_ln144_reg_1319_pp0_iter1_reg;
        select_ln144_reg_1319_pp0_iter3_reg <= select_ln144_reg_1319_pp0_iter2_reg;
        select_ln144_reg_1319_pp0_iter4_reg <= select_ln144_reg_1319_pp0_iter3_reg;
        sub_ln151_1_reg_1417[15 : 1] <= sub_ln151_1_fu_887_p2[15 : 1];
        sub_ln152_reg_1422[14 : 1] <= sub_ln152_fu_935_p2[14 : 1];
        trunc_ln144_1_reg_1335 <= trunc_ln144_1_fu_609_p1;
        trunc_ln144_1_reg_1335_pp0_iter1_reg <= trunc_ln144_1_reg_1335;
        trunc_ln144_1_reg_1335_pp0_iter2_reg <= trunc_ln144_1_reg_1335_pp0_iter1_reg;
        trunc_ln144_1_reg_1335_pp0_iter3_reg <= trunc_ln144_1_reg_1335_pp0_iter2_reg;
        trunc_ln144_1_reg_1335_pp0_iter4_reg <= trunc_ln144_1_reg_1335_pp0_iter3_reg;
        trunc_ln144_reg_1331 <= trunc_ln144_fu_605_p1;
        trunc_ln144_reg_1331_pp0_iter1_reg <= trunc_ln144_reg_1331;
        trunc_ln144_reg_1331_pp0_iter2_reg <= trunc_ln144_reg_1331_pp0_iter1_reg;
        trunc_ln144_reg_1331_pp0_iter3_reg <= trunc_ln144_reg_1331_pp0_iter2_reg;
        trunc_ln144_reg_1331_pp0_iter4_reg <= trunc_ln144_reg_1331_pp0_iter3_reg;
        trunc_ln146_2_reg_1403 <= trunc_ln146_2_fu_808_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Image_Cb_1_ce0 = 1'b1;
    end else begin
        Image_Cb_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1331_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Image_Cb_1_we0 = 1'b1;
    end else begin
        Image_Cb_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Image_Cb_ce0 = 1'b1;
    end else begin
        Image_Cb_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1331_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Image_Cb_we0 = 1'b1;
    end else begin
        Image_Cb_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Image_Cr_1_ce0 = 1'b1;
    end else begin
        Image_Cr_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1331_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Image_Cr_1_we0 = 1'b1;
    end else begin
        Image_Cr_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Image_Cr_ce0 = 1'b1;
    end else begin
        Image_Cr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_reg_1331_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        Image_Cr_we0 = 1'b1;
    end else begin
        Image_Cr_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_10_ce0 = 1'b1;
    end else begin
        Y_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd10) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_10_we0 = 1'b1;
    end else begin
        Y_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_11_ce0 = 1'b1;
    end else begin
        Y_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd11) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_11_we0 = 1'b1;
    end else begin
        Y_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_12_ce0 = 1'b1;
    end else begin
        Y_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd12) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_12_we0 = 1'b1;
    end else begin
        Y_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_13_ce0 = 1'b1;
    end else begin
        Y_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd13) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_13_we0 = 1'b1;
    end else begin
        Y_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_14_ce0 = 1'b1;
    end else begin
        Y_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd14) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_14_we0 = 1'b1;
    end else begin
        Y_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_15_ce0 = 1'b1;
    end else begin
        Y_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd15) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_15_we0 = 1'b1;
    end else begin
        Y_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_1_ce0 = 1'b1;
    end else begin
        Y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_1_we0 = 1'b1;
    end else begin
        Y_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_2_ce0 = 1'b1;
    end else begin
        Y_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd2) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_2_we0 = 1'b1;
    end else begin
        Y_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_3_ce0 = 1'b1;
    end else begin
        Y_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd3) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_3_we0 = 1'b1;
    end else begin
        Y_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_4_ce0 = 1'b1;
    end else begin
        Y_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd4) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_4_we0 = 1'b1;
    end else begin
        Y_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_5_ce0 = 1'b1;
    end else begin
        Y_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd5) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_5_we0 = 1'b1;
    end else begin
        Y_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_6_ce0 = 1'b1;
    end else begin
        Y_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd6) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_6_we0 = 1'b1;
    end else begin
        Y_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_7_ce0 = 1'b1;
    end else begin
        Y_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd7) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_7_we0 = 1'b1;
    end else begin
        Y_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_8_ce0 = 1'b1;
    end else begin
        Y_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd8) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_8_we0 = 1'b1;
    end else begin
        Y_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_9_ce0 = 1'b1;
    end else begin
        Y_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd9) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_9_we0 = 1'b1;
    end else begin
        Y_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_ce0 = 1'b1;
    end else begin
        Y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln144_1_reg_1335_pp0_iter4_reg == 4'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        Y_we0 = 1'b1;
    end else begin
        Y_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (icmp_ln144_reg_1289 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln144_reg_1289_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_ii_load = 5'd0;
    end else begin
        ap_sig_allocacmp_ii_load = ii_fu_206;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_210;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_jj_load = 5'd0;
    end else begin
        ap_sig_allocacmp_jj_load = jj_fu_202;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_mem_A_ARADDR = mem_A_addr_2_reg_1362;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mem_A_ARADDR = mem_A_addr_1_reg_1356;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln144_reg_1289 == 1'd0))) begin
        m_axi_mem_A_ARADDR = mem_A_addr_reg_1350;
    end else begin
        m_axi_mem_A_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln144_reg_1289 == 1'd0)))) begin
        m_axi_mem_A_ARVALID = 1'b1;
    end else begin
        m_axi_mem_A_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        m_axi_mem_A_RREADY = 1'b1;
    end else begin
        m_axi_mem_A_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (icmp_ln144_reg_1289 == 1'd0)))) begin
        mem_A_blk_n_AR = m_axi_mem_A_ARREADY;
    end else begin
        mem_A_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)))) begin
        mem_A_blk_n_R = m_axi_mem_A_RVALID;
    end else begin
        mem_A_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter4_stage1) & (ap_idle_pp0_0to3 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Image_Cb_1_address0 = zext_ln151_11_fu_1153_p1;

assign Image_Cb_1_d0 = add_ln151_2_fu_1198_p2;

assign Image_Cb_address0 = zext_ln151_11_fu_1153_p1;

assign Image_Cb_d0 = add_ln151_2_fu_1198_p2;

assign Image_Cr_1_address0 = zext_ln151_11_fu_1153_p1;

assign Image_Cr_1_d0 = xor_ln152_fu_1206_p2;

assign Image_Cr_address0 = zext_ln151_11_fu_1153_p1;

assign Image_Cr_d0 = xor_ln152_fu_1206_p2;

assign Y_10_address0 = zext_ln145_fu_1219_p1;

assign Y_10_d0 = add_ln154_reg_1452;

assign Y_11_address0 = zext_ln145_fu_1219_p1;

assign Y_11_d0 = add_ln154_reg_1452;

assign Y_12_address0 = zext_ln145_fu_1219_p1;

assign Y_12_d0 = add_ln154_reg_1452;

assign Y_13_address0 = zext_ln145_fu_1219_p1;

assign Y_13_d0 = add_ln154_reg_1452;

assign Y_14_address0 = zext_ln145_fu_1219_p1;

assign Y_14_d0 = add_ln154_reg_1452;

assign Y_15_address0 = zext_ln145_fu_1219_p1;

assign Y_15_d0 = add_ln154_reg_1452;

assign Y_1_address0 = zext_ln145_fu_1219_p1;

assign Y_1_d0 = add_ln154_reg_1452;

assign Y_2_address0 = zext_ln145_fu_1219_p1;

assign Y_2_d0 = add_ln154_reg_1452;

assign Y_3_address0 = zext_ln145_fu_1219_p1;

assign Y_3_d0 = add_ln154_reg_1452;

assign Y_4_address0 = zext_ln145_fu_1219_p1;

assign Y_4_d0 = add_ln154_reg_1452;

assign Y_5_address0 = zext_ln145_fu_1219_p1;

assign Y_5_d0 = add_ln154_reg_1452;

assign Y_6_address0 = zext_ln145_fu_1219_p1;

assign Y_6_d0 = add_ln154_reg_1452;

assign Y_7_address0 = zext_ln145_fu_1219_p1;

assign Y_7_d0 = add_ln154_reg_1452;

assign Y_8_address0 = zext_ln145_fu_1219_p1;

assign Y_8_d0 = add_ln154_reg_1452;

assign Y_9_address0 = zext_ln145_fu_1219_p1;

assign Y_9_d0 = add_ln154_reg_1452;

assign Y_address0 = zext_ln145_fu_1219_p1;

assign Y_d0 = add_ln154_reg_1452;

assign add_ln144_1_fu_570_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln144_fu_582_p2 = (ap_sig_allocacmp_ii_load + 5'd1);

assign add_ln145_fu_734_p2 = (select_ln144_reg_1319 + 5'd1);

assign add_ln146_1_fu_709_p2 = (empty_207_reg_1344 + 64'd2);

assign add_ln146_fu_684_p2 = (empty_207_reg_1344 + 64'd1);

assign add_ln150_1_fu_994_p2 = (zext_ln150_2_fu_987_p1 + zext_ln150_3_fu_990_p1);

assign add_ln150_2_fu_1003_p2 = (add_ln150_1_fu_994_p2 + zext_ln150_4_fu_1000_p1);

assign add_ln150_3_fu_1020_p2 = (add_ln150_2_fu_1003_p2 + zext_ln150_5_fu_1016_p1);

assign add_ln150_4_fu_1171_p2 = (add_ln150_3_reg_1437 + zext_ln150_6_fu_1167_p1);

assign add_ln150_5_fu_1179_p2 = (add_ln150_4_fu_1171_p2 + zext_ln150_7_fu_1176_p1);

assign add_ln150_fu_834_p2 = (zext_ln150_fu_826_p1 + zext_ln150_1_fu_830_p1);

assign add_ln151_1_fu_1082_p2 = (zext_ln151_8_fu_1074_p1 + zext_ln151_9_fu_1078_p1);

assign add_ln151_2_fu_1198_p2 = ($signed(sext_ln151_2_fu_1195_p1) + $signed(10'd128));

assign add_ln151_3_fu_974_p2 = (tmp_s_fu_964_p3 + zext_ln151_7_fu_971_p1);

assign add_ln151_fu_862_p2 = (zext_ln151_2_fu_854_p1 + zext_ln151_3_fu_858_p1);

assign add_ln152_1_fu_925_p2 = (add_ln152_fu_915_p2 + zext_ln152_2_fu_921_p1);

assign add_ln152_2_fu_952_p2 = (zext_ln151_2_fu_854_p1 + zext_ln152_4_fu_948_p1);

assign add_ln152_3_fu_958_p2 = (add_ln152_2_fu_952_p2 + zext_ln151_5_fu_879_p1);

assign add_ln152_4_fu_1137_p2 = (sub_ln152_1_fu_1114_p2 + sub_ln152_2_fu_1131_p2);

assign add_ln152_fu_915_p2 = (zext_ln152_fu_907_p1 + zext_ln152_1_fu_911_p1);

assign add_ln154_fu_1213_p2 = ($signed(trunc_ln2_fu_1185_p4) + $signed(8'd144));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter4)) | ((m_axi_mem_A_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state13_pp0_stage0_iter4)) | ((m_axi_mem_A_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage1_iter3)) | ((m_axi_mem_A_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage1_iter3)) | ((m_axi_mem_A_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage2_iter3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state12_pp0_stage2_iter3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state11_pp0_stage1_iter3 = (m_axi_mem_A_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage2_iter3 = (m_axi_mem_A_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter4 = (m_axi_mem_A_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state3_io = ((m_axi_mem_A_ARREADY == 1'b0) & (icmp_ln144_reg_1289 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign empty_207_fu_658_p2 = (tmp_fu_653_p2 + p_cast76_fu_636_p1);

assign icmp_ln144_fu_564_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln145_fu_588_p2 = ((ap_sig_allocacmp_jj_load == 5'd16) ? 1'b1 : 1'b0);

assign lshr_ln146_1_fu_783_p2 = mem_A_addr_1_read_reg_1373 >> zext_ln146_1_fu_779_p1;

assign lshr_ln146_2_fu_803_p2 = mem_A_addr_2_read_reg_1398 >> zext_ln146_2_fu_799_p1;

assign lshr_ln146_fu_763_p2 = mem_A_addr_read_reg_1368 >> zext_ln146_fu_759_p1;

assign m_axi_mem_A_ARBURST = 2'd0;

assign m_axi_mem_A_ARCACHE = 4'd0;

assign m_axi_mem_A_ARID = 1'd0;

assign m_axi_mem_A_ARLEN = 32'd1;

assign m_axi_mem_A_ARLOCK = 2'd0;

assign m_axi_mem_A_ARPROT = 3'd0;

assign m_axi_mem_A_ARQOS = 4'd0;

assign m_axi_mem_A_ARREGION = 4'd0;

assign m_axi_mem_A_ARSIZE = 3'd0;

assign m_axi_mem_A_ARUSER = 1'd0;

assign m_axi_mem_A_AWADDR = 64'd0;

assign m_axi_mem_A_AWBURST = 2'd0;

assign m_axi_mem_A_AWCACHE = 4'd0;

assign m_axi_mem_A_AWID = 1'd0;

assign m_axi_mem_A_AWLEN = 32'd0;

assign m_axi_mem_A_AWLOCK = 2'd0;

assign m_axi_mem_A_AWPROT = 3'd0;

assign m_axi_mem_A_AWQOS = 4'd0;

assign m_axi_mem_A_AWREGION = 4'd0;

assign m_axi_mem_A_AWSIZE = 3'd0;

assign m_axi_mem_A_AWUSER = 1'd0;

assign m_axi_mem_A_AWVALID = 1'b0;

assign m_axi_mem_A_BREADY = 1'b0;

assign m_axi_mem_A_WDATA = 32'd0;

assign m_axi_mem_A_WID = 1'd0;

assign m_axi_mem_A_WLAST = 1'b0;

assign m_axi_mem_A_WSTRB = 4'd0;

assign m_axi_mem_A_WUSER = 1'd0;

assign m_axi_mem_A_WVALID = 1'b0;

assign p_cast76_fu_636_p1 = tmp_4_fu_627_p4;

assign p_cast77_fu_649_p1 = tmp_5_fu_640_p4;

assign select_ln144_1_fu_600_p3 = ((icmp_ln145_reg_1313[0:0] == 1'b1) ? add_ln144_reg_1308 : ii_load_reg_1303);

assign select_ln144_fu_594_p3 = ((icmp_ln145_reg_1313[0:0] == 1'b1) ? 5'd0 : jj_load_reg_1298);

assign sext_ln146_1_fu_699_p1 = $signed(trunc_ln146_5_fu_689_p4);

assign sext_ln146_2_fu_724_p1 = $signed(trunc_ln146_6_fu_714_p4);

assign sext_ln146_fu_674_p1 = $signed(trunc_ln146_4_fu_664_p4);

assign sext_ln151_1_fu_1058_p1 = $signed(sub_ln151_1_reg_1417);

assign sext_ln151_2_fu_1195_p1 = $signed(trunc_ln151_1_reg_1442);

assign sext_ln151_fu_1054_p1 = $signed(sub_ln151_fu_1048_p2);

assign sext_ln152_fu_1108_p1 = $signed(sub_ln152_reg_1422);

assign shl_ln146_1_fu_772_p3 = {{add_ln136}, {3'd0}};

assign shl_ln146_2_fu_792_p3 = {{xor_ln136}, {3'd0}};

assign shl_ln150_1_fu_819_p3 = {{trunc_ln150_reg_1378}, {1'd0}};

assign shl_ln150_2_fu_980_p3 = {{trunc_ln146_1_reg_1388}, {7'd0}};

assign shl_ln150_3_fu_1009_p3 = {{trunc_ln146_2_reg_1403}, {4'd0}};

assign shl_ln150_4_fu_1160_p3 = {{trunc_ln146_2_reg_1403}, {3'd0}};

assign shl_ln151_1_fu_1033_p3 = {{trunc_ln150_reg_1378}, {4'd0}};

assign shl_ln151_2_fu_840_p3 = {{trunc_ln146_1_reg_1388}, {6'd0}};

assign shl_ln151_3_fu_847_p3 = {{trunc_ln146_1_reg_1388}, {5'd0}};

assign shl_ln151_4_fu_868_p3 = {{trunc_ln146_1_reg_1388}, {1'd0}};

assign shl_ln151_5_fu_1067_p3 = {{trunc_ln146_2_reg_1403}, {1'd0}};

assign shl_ln152_1_fu_900_p3 = {{trunc_ln150_reg_1378}, {2'd0}};

assign shl_ln152_2_fu_941_p3 = {{trunc_ln146_1_reg_1388}, {3'd0}};

assign shl_ln152_3_fu_1120_p3 = {{trunc_ln146_2_reg_1403}, {7'd0}};

assign shl_ln1_fu_812_p3 = {{trunc_ln150_reg_1378}, {6'd0}};

assign shl_ln2_fu_1026_p3 = {{trunc_ln150_reg_1378}, {7'd0}};

assign shl_ln3_fu_893_p3 = {{trunc_ln150_reg_1378}, {5'd0}};

assign shl_ln_fu_752_p3 = {{empty}, {3'd0}};

assign sub_ln151_1_fu_887_p2 = (zext_ln151_4_fu_875_p1 - zext_ln151_6_fu_883_p1);

assign sub_ln151_2_fu_1061_p2 = ($signed(sext_ln151_fu_1054_p1) - $signed(sext_ln151_1_fu_1058_p1));

assign sub_ln151_3_fu_1092_p2 = (sub_ln151_2_fu_1061_p2 - zext_ln151_10_fu_1088_p1);

assign sub_ln151_fu_1048_p2 = (zext_ln151_fu_1040_p1 - zext_ln151_1_fu_1044_p1);

assign sub_ln152_1_fu_1114_p2 = ($signed(sext_ln152_fu_1108_p1) - $signed(zext_ln152_5_fu_1111_p1));

assign sub_ln152_2_fu_1131_p2 = (zext_ln152_6_fu_1127_p1 - zext_ln150_5_fu_1016_p1);

assign sub_ln152_fu_935_p2 = (15'd0 - zext_ln152_3_fu_931_p1);

assign tmp_4_fu_627_p4 = {{{empty_51}, {trunc_ln144_1_fu_609_p1}}, {11'd0}};

assign tmp_5_fu_640_p4 = {{{empty_52}, {trunc_ln146_fu_623_p1}}, {2'd0}};

assign tmp_fu_653_p2 = (p_cast77_fu_649_p1 + MatRGB_DRAM);

assign tmp_s_fu_964_p3 = {{lshr_ln_reg_1339_pp0_iter4_reg}, {4'd0}};

assign trunc_ln144_1_fu_609_p1 = select_ln144_1_fu_600_p3[3:0];

assign trunc_ln144_fu_605_p1 = select_ln144_1_fu_600_p3[0:0];

assign trunc_ln146_1_fu_788_p1 = lshr_ln146_1_fu_783_p2[7:0];

assign trunc_ln146_2_fu_808_p1 = lshr_ln146_2_fu_803_p2[7:0];

assign trunc_ln146_4_fu_664_p4 = {{empty_207_fu_658_p2[63:2]}};

assign trunc_ln146_5_fu_689_p4 = {{add_ln146_fu_684_p2[63:2]}};

assign trunc_ln146_6_fu_714_p4 = {{add_ln146_1_fu_709_p2[63:2]}};

assign trunc_ln146_fu_623_p1 = select_ln144_fu_594_p3[3:0];

assign trunc_ln150_fu_768_p1 = lshr_ln146_fu_763_p2[7:0];

assign trunc_ln2_fu_1185_p4 = {{add_ln150_5_fu_1179_p2[15:8]}};

assign xor_ln152_fu_1206_p2 = (trunc_ln3_reg_1447 ^ 8'd128);

assign zext_ln145_fu_1219_p1 = select_ln144_reg_1319_pp0_iter4_reg;

assign zext_ln146_1_fu_779_p1 = shl_ln146_1_fu_772_p3;

assign zext_ln146_2_fu_799_p1 = shl_ln146_2_fu_792_p3;

assign zext_ln146_fu_759_p1 = shl_ln_fu_752_p3;

assign zext_ln150_1_fu_830_p1 = shl_ln150_1_fu_819_p3;

assign zext_ln150_2_fu_987_p1 = add_ln150_reg_1412;

assign zext_ln150_3_fu_990_p1 = shl_ln150_2_fu_980_p3;

assign zext_ln150_4_fu_1000_p1 = trunc_ln146_1_reg_1388;

assign zext_ln150_5_fu_1016_p1 = shl_ln150_3_fu_1009_p3;

assign zext_ln150_6_fu_1167_p1 = shl_ln150_4_fu_1160_p3;

assign zext_ln150_7_fu_1176_p1 = trunc_ln146_2_reg_1403;

assign zext_ln150_fu_826_p1 = shl_ln1_fu_812_p3;

assign zext_ln151_10_fu_1088_p1 = add_ln151_1_fu_1082_p2;

assign zext_ln151_11_fu_1153_p1 = add_ln151_3_reg_1432;

assign zext_ln151_1_fu_1044_p1 = shl_ln151_1_fu_1033_p3;

assign zext_ln151_2_fu_854_p1 = shl_ln151_2_fu_840_p3;

assign zext_ln151_3_fu_858_p1 = shl_ln151_3_fu_847_p3;

assign zext_ln151_4_fu_875_p1 = add_ln151_fu_862_p2;

assign zext_ln151_5_fu_879_p1 = shl_ln151_4_fu_868_p3;

assign zext_ln151_6_fu_883_p1 = shl_ln151_4_fu_868_p3;

assign zext_ln151_7_fu_971_p1 = select_ln144_reg_1319_pp0_iter4_reg;

assign zext_ln151_8_fu_1074_p1 = shl_ln150_3_fu_1009_p3;

assign zext_ln151_9_fu_1078_p1 = shl_ln151_5_fu_1067_p3;

assign zext_ln151_fu_1040_p1 = shl_ln2_fu_1026_p3;

assign zext_ln152_1_fu_911_p1 = shl_ln152_1_fu_900_p3;

assign zext_ln152_2_fu_921_p1 = shl_ln150_1_fu_819_p3;

assign zext_ln152_3_fu_931_p1 = add_ln152_1_fu_925_p2;

assign zext_ln152_4_fu_948_p1 = shl_ln152_2_fu_941_p3;

assign zext_ln152_5_fu_1111_p1 = add_ln152_3_reg_1427;

assign zext_ln152_6_fu_1127_p1 = shl_ln152_3_fu_1120_p3;

assign zext_ln152_fu_907_p1 = shl_ln3_fu_893_p3;

always @ (posedge ap_clk) begin
    add_ln150_reg_1412[0] <= 1'b0;
    sub_ln151_1_reg_1417[0] <= 1'b0;
    sub_ln152_reg_1422[0] <= 1'b0;
    add_ln152_3_reg_1427[0] <= 1'b0;
end

endmodule //IMG2RLE_IMG2RLE_Pipeline_color1_color2
