// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module IMG2RLE_IMG2RLE_Pipeline_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Y_15_address0,
        Y_15_ce0,
        Y_15_we0,
        Y_15_d0,
        Y_14_address0,
        Y_14_ce0,
        Y_14_we0,
        Y_14_d0,
        Y_13_address0,
        Y_13_ce0,
        Y_13_we0,
        Y_13_d0,
        Y_12_address0,
        Y_12_ce0,
        Y_12_we0,
        Y_12_d0,
        Y_11_address0,
        Y_11_ce0,
        Y_11_we0,
        Y_11_d0,
        Y_10_address0,
        Y_10_ce0,
        Y_10_we0,
        Y_10_d0,
        Y_9_address0,
        Y_9_ce0,
        Y_9_we0,
        Y_9_d0,
        Y_8_address0,
        Y_8_ce0,
        Y_8_we0,
        Y_8_d0,
        Y_7_address0,
        Y_7_ce0,
        Y_7_we0,
        Y_7_d0,
        Y_6_address0,
        Y_6_ce0,
        Y_6_we0,
        Y_6_d0,
        Y_5_address0,
        Y_5_ce0,
        Y_5_we0,
        Y_5_d0,
        Y_4_address0,
        Y_4_ce0,
        Y_4_we0,
        Y_4_d0,
        Y_3_address0,
        Y_3_ce0,
        Y_3_we0,
        Y_3_d0,
        Y_2_address0,
        Y_2_ce0,
        Y_2_we0,
        Y_2_d0,
        Y_1_address0,
        Y_1_ce0,
        Y_1_we0,
        Y_1_d0,
        Y_address0,
        Y_ce0,
        Y_we0,
        Y_d0,
        phi_ln140
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] Y_15_address0;
output   Y_15_ce0;
output   Y_15_we0;
output  [7:0] Y_15_d0;
output  [3:0] Y_14_address0;
output   Y_14_ce0;
output   Y_14_we0;
output  [7:0] Y_14_d0;
output  [3:0] Y_13_address0;
output   Y_13_ce0;
output   Y_13_we0;
output  [7:0] Y_13_d0;
output  [3:0] Y_12_address0;
output   Y_12_ce0;
output   Y_12_we0;
output  [7:0] Y_12_d0;
output  [3:0] Y_11_address0;
output   Y_11_ce0;
output   Y_11_we0;
output  [7:0] Y_11_d0;
output  [3:0] Y_10_address0;
output   Y_10_ce0;
output   Y_10_we0;
output  [7:0] Y_10_d0;
output  [3:0] Y_9_address0;
output   Y_9_ce0;
output   Y_9_we0;
output  [7:0] Y_9_d0;
output  [3:0] Y_8_address0;
output   Y_8_ce0;
output   Y_8_we0;
output  [7:0] Y_8_d0;
output  [3:0] Y_7_address0;
output   Y_7_ce0;
output   Y_7_we0;
output  [7:0] Y_7_d0;
output  [3:0] Y_6_address0;
output   Y_6_ce0;
output   Y_6_we0;
output  [7:0] Y_6_d0;
output  [3:0] Y_5_address0;
output   Y_5_ce0;
output   Y_5_we0;
output  [7:0] Y_5_d0;
output  [3:0] Y_4_address0;
output   Y_4_ce0;
output   Y_4_we0;
output  [7:0] Y_4_d0;
output  [3:0] Y_3_address0;
output   Y_3_ce0;
output   Y_3_we0;
output  [7:0] Y_3_d0;
output  [3:0] Y_2_address0;
output   Y_2_ce0;
output   Y_2_we0;
output  [7:0] Y_2_d0;
output  [3:0] Y_1_address0;
output   Y_1_ce0;
output   Y_1_we0;
output  [7:0] Y_1_d0;
output  [3:0] Y_address0;
output   Y_ce0;
output   Y_we0;
output  [7:0] Y_d0;
input  [3:0] phi_ln140;

reg ap_idle;
reg Y_15_ce0;
reg Y_15_we0;
reg Y_14_ce0;
reg Y_14_we0;
reg Y_13_ce0;
reg Y_13_we0;
reg Y_12_ce0;
reg Y_12_we0;
reg Y_11_ce0;
reg Y_11_we0;
reg Y_10_ce0;
reg Y_10_we0;
reg Y_9_ce0;
reg Y_9_we0;
reg Y_8_ce0;
reg Y_8_we0;
reg Y_7_ce0;
reg Y_7_we0;
reg Y_6_ce0;
reg Y_6_we0;
reg Y_5_ce0;
reg Y_5_we0;
reg Y_4_ce0;
reg Y_4_we0;
reg Y_3_ce0;
reg Y_3_we0;
reg Y_2_ce0;
reg Y_2_we0;
reg Y_1_ce0;
reg Y_1_we0;
reg Y_ce0;
reg Y_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln140_fu_354_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln140_fu_328_p1;
reg   [3:0] arrayinit_curidx7_fu_86;
wire   [3:0] add_ln140_fu_348_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_arrayinit_curidx7_load;
wire   [3:0] phi_ln140_read_read_fu_90_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 arrayinit_curidx7_fu_86 = 4'd0;
#0 ap_done_reg = 1'b0;
end

IMG2RLE_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        arrayinit_curidx7_fu_86 <= add_ln140_fu_348_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_10_ce0 = 1'b1;
    end else begin
        Y_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd10))) begin
        Y_10_we0 = 1'b1;
    end else begin
        Y_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_11_ce0 = 1'b1;
    end else begin
        Y_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd11))) begin
        Y_11_we0 = 1'b1;
    end else begin
        Y_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_12_ce0 = 1'b1;
    end else begin
        Y_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd12))) begin
        Y_12_we0 = 1'b1;
    end else begin
        Y_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_13_ce0 = 1'b1;
    end else begin
        Y_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd13))) begin
        Y_13_we0 = 1'b1;
    end else begin
        Y_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_14_ce0 = 1'b1;
    end else begin
        Y_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd14))) begin
        Y_14_we0 = 1'b1;
    end else begin
        Y_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_15_ce0 = 1'b1;
    end else begin
        Y_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd15))) begin
        Y_15_we0 = 1'b1;
    end else begin
        Y_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_1_ce0 = 1'b1;
    end else begin
        Y_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd1))) begin
        Y_1_we0 = 1'b1;
    end else begin
        Y_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_2_ce0 = 1'b1;
    end else begin
        Y_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd2))) begin
        Y_2_we0 = 1'b1;
    end else begin
        Y_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_3_ce0 = 1'b1;
    end else begin
        Y_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd3))) begin
        Y_3_we0 = 1'b1;
    end else begin
        Y_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_4_ce0 = 1'b1;
    end else begin
        Y_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd4))) begin
        Y_4_we0 = 1'b1;
    end else begin
        Y_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_5_ce0 = 1'b1;
    end else begin
        Y_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd5))) begin
        Y_5_we0 = 1'b1;
    end else begin
        Y_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_6_ce0 = 1'b1;
    end else begin
        Y_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd6))) begin
        Y_6_we0 = 1'b1;
    end else begin
        Y_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_7_ce0 = 1'b1;
    end else begin
        Y_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd7))) begin
        Y_7_we0 = 1'b1;
    end else begin
        Y_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_8_ce0 = 1'b1;
    end else begin
        Y_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd8))) begin
        Y_8_we0 = 1'b1;
    end else begin
        Y_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_9_ce0 = 1'b1;
    end else begin
        Y_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd9))) begin
        Y_9_we0 = 1'b1;
    end else begin
        Y_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        Y_ce0 = 1'b1;
    end else begin
        Y_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1) & (phi_ln140_read_read_fu_90_p2 == 4'd0))) begin
        Y_we0 = 1'b1;
    end else begin
        Y_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln140_fu_354_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_arrayinit_curidx7_load = 4'd0;
    end else begin
        ap_sig_allocacmp_arrayinit_curidx7_load = arrayinit_curidx7_fu_86;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Y_10_address0 = zext_ln140_fu_328_p1;

assign Y_10_d0 = 8'd0;

assign Y_11_address0 = zext_ln140_fu_328_p1;

assign Y_11_d0 = 8'd0;

assign Y_12_address0 = zext_ln140_fu_328_p1;

assign Y_12_d0 = 8'd0;

assign Y_13_address0 = zext_ln140_fu_328_p1;

assign Y_13_d0 = 8'd0;

assign Y_14_address0 = zext_ln140_fu_328_p1;

assign Y_14_d0 = 8'd0;

assign Y_15_address0 = zext_ln140_fu_328_p1;

assign Y_15_d0 = 8'd0;

assign Y_1_address0 = zext_ln140_fu_328_p1;

assign Y_1_d0 = 8'd0;

assign Y_2_address0 = zext_ln140_fu_328_p1;

assign Y_2_d0 = 8'd0;

assign Y_3_address0 = zext_ln140_fu_328_p1;

assign Y_3_d0 = 8'd0;

assign Y_4_address0 = zext_ln140_fu_328_p1;

assign Y_4_d0 = 8'd0;

assign Y_5_address0 = zext_ln140_fu_328_p1;

assign Y_5_d0 = 8'd0;

assign Y_6_address0 = zext_ln140_fu_328_p1;

assign Y_6_d0 = 8'd0;

assign Y_7_address0 = zext_ln140_fu_328_p1;

assign Y_7_d0 = 8'd0;

assign Y_8_address0 = zext_ln140_fu_328_p1;

assign Y_8_d0 = 8'd0;

assign Y_9_address0 = zext_ln140_fu_328_p1;

assign Y_9_d0 = 8'd0;

assign Y_address0 = zext_ln140_fu_328_p1;

assign Y_d0 = 8'd0;

assign add_ln140_fu_348_p2 = (ap_sig_allocacmp_arrayinit_curidx7_load + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln140_fu_354_p2 = ((ap_sig_allocacmp_arrayinit_curidx7_load == 4'd15) ? 1'b1 : 1'b0);

assign phi_ln140_read_read_fu_90_p2 = phi_ln140;

assign zext_ln140_fu_328_p1 = ap_sig_allocacmp_arrayinit_curidx7_load;

endmodule //IMG2RLE_IMG2RLE_Pipeline_2
