// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert_2_color_convert_2,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.000000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=28,HLS_VERSION=2023_2}" *)

module color_convert_2 (
        ap_clk,
        ap_rst_n,
        stream_in_48_TDATA,
        stream_in_48_TVALID,
        stream_in_48_TREADY,
        stream_in_48_TKEEP,
        stream_in_48_TSTRB,
        stream_in_48_TUSER,
        stream_in_48_TLAST,
        stream_out_48_TDATA,
        stream_out_48_TVALID,
        stream_out_48_TREADY,
        stream_out_48_TKEEP,
        stream_out_48_TSTRB,
        stream_out_48_TUSER,
        stream_out_48_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [63:0] stream_in_48_TDATA;
input   stream_in_48_TVALID;
output   stream_in_48_TREADY;
input  [7:0] stream_in_48_TKEEP;
input  [7:0] stream_in_48_TSTRB;
input  [0:0] stream_in_48_TUSER;
input  [0:0] stream_in_48_TLAST;
output  [63:0] stream_out_48_TDATA;
output   stream_out_48_TVALID;
input   stream_out_48_TREADY;
output  [7:0] stream_out_48_TKEEP;
output  [7:0] stream_out_48_TSTRB;
output  [0:0] stream_out_48_TUSER;
output  [0:0] stream_out_48_TLAST;

 reg    ap_rst_n_inv;
reg    stream_in_48_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    stream_out_48_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_stream_out_48_V_data_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_stream_in_48_V_data_V_U_apdone_blk;
wire   [63:0] stream_in_48_TDATA_int_regslice;
wire    stream_in_48_TVALID_int_regslice;
reg    stream_in_48_TREADY_int_regslice;
wire    regslice_both_stream_in_48_V_data_V_U_ack_in;
wire    regslice_both_stream_in_48_V_keep_V_U_apdone_blk;
wire   [7:0] stream_in_48_TKEEP_int_regslice;
wire    regslice_both_stream_in_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_in_48_V_keep_V_U_ack_in;
wire    regslice_both_stream_in_48_V_strb_V_U_apdone_blk;
wire   [7:0] stream_in_48_TSTRB_int_regslice;
wire    regslice_both_stream_in_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_in_48_V_strb_V_U_ack_in;
wire    regslice_both_stream_in_48_V_user_V_U_apdone_blk;
wire   [0:0] stream_in_48_TUSER_int_regslice;
wire    regslice_both_stream_in_48_V_user_V_U_vld_out;
wire    regslice_both_stream_in_48_V_user_V_U_ack_in;
wire    regslice_both_stream_in_48_V_last_V_U_apdone_blk;
wire   [0:0] stream_in_48_TLAST_int_regslice;
wire    regslice_both_stream_in_48_V_last_V_U_vld_out;
wire    regslice_both_stream_in_48_V_last_V_U_ack_in;
reg    stream_out_48_TVALID_int_regslice;
wire    stream_out_48_TREADY_int_regslice;
wire    regslice_both_stream_out_48_V_data_V_U_vld_out;
wire    regslice_both_stream_out_48_V_keep_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_out_48_V_strb_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_out_48_V_user_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_user_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_user_V_U_vld_out;
wire    regslice_both_stream_out_48_V_last_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_last_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

color_convert_2_regslice_both #(
    .DataWidth( 64 ))
regslice_both_stream_in_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TDATA),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_data_V_U_ack_in),
    .data_out(stream_in_48_TDATA_int_regslice),
    .vld_out(stream_in_48_TVALID_int_regslice),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_data_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_in_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TKEEP),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_keep_V_U_ack_in),
    .data_out(stream_in_48_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_keep_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_keep_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_in_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TSTRB),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_strb_V_U_ack_in),
    .data_out(stream_in_48_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_strb_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_strb_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TUSER),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_user_V_U_ack_in),
    .data_out(stream_in_48_TUSER_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_user_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_user_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TLAST),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_last_V_U_ack_in),
    .data_out(stream_in_48_TLAST_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_last_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_last_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 64 ))
regslice_both_stream_out_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TDATA_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(stream_out_48_TREADY_int_regslice),
    .data_out(stream_out_48_TDATA),
    .vld_out(regslice_both_stream_out_48_V_data_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_data_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_out_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TKEEP_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy),
    .data_out(stream_out_48_TKEEP),
    .vld_out(regslice_both_stream_out_48_V_keep_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_keep_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_out_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TSTRB_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy),
    .data_out(stream_out_48_TSTRB),
    .vld_out(regslice_both_stream_out_48_V_strb_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_strb_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TUSER_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_user_V_U_ack_in_dummy),
    .data_out(stream_out_48_TUSER),
    .vld_out(regslice_both_stream_out_48_V_user_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_user_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TLAST_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_last_V_U_ack_in_dummy),
    .data_out(stream_out_48_TLAST),
    .vld_out(regslice_both_stream_out_48_V_last_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_48_TDATA_blk_n = stream_in_48_TVALID_int_regslice;
    end else begin
        stream_in_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_48_TREADY_int_regslice = 1'b1;
    end else begin
        stream_in_48_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        stream_out_48_TDATA_blk_n = stream_out_48_TREADY_int_regslice;
    end else begin
        stream_out_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_out_48_TVALID_int_regslice = 1'b1;
    end else begin
        stream_out_48_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_pp0_stage0_iter1) | (stream_out_48_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & ((1'b1 == ap_block_state1_pp0_stage0_iter0) | (stream_out_48_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_pp0_stage0_iter1) | (stream_out_48_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & ((1'b1 == ap_block_state1_pp0_stage0_iter0) | (stream_out_48_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((stream_out_48_TREADY_int_regslice == 1'b0) | (stream_in_48_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_stream_out_48_V_data_V_U_apdone_blk == 1'b1) | (stream_out_48_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign stream_in_48_TREADY = regslice_both_stream_in_48_V_data_V_U_ack_in;

assign stream_out_48_TVALID = regslice_both_stream_out_48_V_data_V_U_vld_out;


reg find_kernel_block = 0;
// synthesis translate_off
`include "color_convert_2_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //color_convert_2

