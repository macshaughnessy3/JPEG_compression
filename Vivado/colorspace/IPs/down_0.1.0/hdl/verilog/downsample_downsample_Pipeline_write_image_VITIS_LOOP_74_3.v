// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module downsample_downsample_Pipeline_write_image_VITIS_LOOP_74_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        stream_out_48_TREADY,
        downsample_block_address0,
        downsample_block_ce0,
        downsample_block_q0,
        stream_out_48_TDATA,
        stream_out_48_TVALID,
        stream_out_48_TKEEP,
        stream_out_48_TSTRB,
        stream_out_48_TUSER,
        stream_out_48_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   stream_out_48_TREADY;
output  [15:0] downsample_block_address0;
output   downsample_block_ce0;
input  [63:0] downsample_block_q0;
output  [63:0] stream_out_48_TDATA;
output   stream_out_48_TVALID;
output  [7:0] stream_out_48_TKEEP;
output  [7:0] stream_out_48_TSTRB;
output  [0:0] stream_out_48_TUSER;
output  [0:0] stream_out_48_TLAST;

reg ap_idle;
reg downsample_block_ce0;
reg stream_out_48_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln73_reg_282;
reg   [0:0] icmp_ln73_reg_282_pp0_iter3_reg;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln73_fu_150_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    stream_out_48_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg   [0:0] curr_pixel_out_last_1_reg_120;
reg   [0:0] curr_pixel_out_last_1_reg_120_pp0_iter1_reg;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] curr_pixel_out_last_1_reg_120_pp0_iter2_reg;
reg   [0:0] curr_pixel_out_last_1_reg_120_pp0_iter3_reg;
reg   [0:0] icmp_ln73_reg_282_pp0_iter1_reg;
reg   [0:0] icmp_ln73_reg_282_pp0_iter2_reg;
wire   [7:0] select_ln51_fu_174_p3;
reg   [7:0] select_ln51_reg_286;
reg   [7:0] select_ln51_reg_286_pp0_iter1_reg;
wire   [0:0] curr_pixel_out_last_fu_218_p2;
reg   [0:0] curr_pixel_out_last_reg_296;
reg   [0:0] ap_phi_mux_curr_pixel_out_last_1_phi_fu_124_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln75_fu_248_p1;
reg   [7:0] j_fu_72;
wire   [7:0] add_ln74_fu_224_p2;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [7:0] i_fu_76;
wire   [7:0] select_ln73_fu_188_p3;
reg   [7:0] ap_sig_allocacmp_i_load;
reg   [15:0] indvar_flatten13_fu_80;
wire   [15:0] add_ln73_fu_156_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten13_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln74_fu_168_p2;
wire   [7:0] add_ln73_1_fu_182_p2;
wire   [0:0] cmp174_fu_200_p2;
wire   [0:0] icmp_ln77_fu_206_p2;
wire   [0:0] and_ln77_fu_212_p2;
wire   [15:0] grp_fu_252_p3;
wire   [7:0] grp_fu_252_p0;
wire   [7:0] grp_fu_252_p1;
wire   [7:0] grp_fu_252_p2;
reg    grp_fu_252_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_252_p00;
wire   [15:0] grp_fu_252_p20;
reg    ap_condition_272;
reg    ap_condition_276;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 j_fu_72 = 8'd0;
#0 i_fu_76 = 8'd0;
#0 indvar_flatten13_fu_80 = 16'd0;
#0 ap_done_reg = 1'b0;
end

downsample_mac_muladd_8ns_8ns_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_8ns_16_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_252_p0),
    .din1(grp_fu_252_p1),
    .din2(grp_fu_252_p2),
    .ce(grp_fu_252_ce),
    .dout(grp_fu_252_p3)
);

downsample_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
            curr_pixel_out_last_1_reg_120 <= 1'd0;
        end else if ((1'b1 == ap_condition_276)) begin
            curr_pixel_out_last_1_reg_120 <= curr_pixel_out_last_reg_296;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln73_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_76 <= select_ln73_fu_188_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln73_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten13_fu_80 <= add_ln73_fu_156_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_80 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln73_fu_150_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_72 <= add_ln74_fu_224_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_72 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        curr_pixel_out_last_1_reg_120_pp0_iter1_reg <= curr_pixel_out_last_1_reg_120;
        icmp_ln73_reg_282 <= icmp_ln73_fu_150_p2;
        icmp_ln73_reg_282_pp0_iter1_reg <= icmp_ln73_reg_282;
        select_ln51_reg_286 <= select_ln51_fu_174_p3;
        select_ln51_reg_286_pp0_iter1_reg <= select_ln51_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        curr_pixel_out_last_1_reg_120_pp0_iter2_reg <= curr_pixel_out_last_1_reg_120_pp0_iter1_reg;
        curr_pixel_out_last_1_reg_120_pp0_iter3_reg <= curr_pixel_out_last_1_reg_120_pp0_iter2_reg;
        icmp_ln73_reg_282_pp0_iter2_reg <= icmp_ln73_reg_282_pp0_iter1_reg;
        icmp_ln73_reg_282_pp0_iter3_reg <= icmp_ln73_reg_282_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        curr_pixel_out_last_reg_296 <= curr_pixel_out_last_fu_218_p2;
    end
end

always @ (*) begin
    if (((icmp_ln73_fu_150_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_curr_pixel_out_last_1_phi_fu_124_p4 = 1'd0;
        end else if ((1'b1 == ap_condition_272)) begin
            ap_phi_mux_curr_pixel_out_last_1_phi_fu_124_p4 = curr_pixel_out_last_reg_296;
        end else begin
            ap_phi_mux_curr_pixel_out_last_1_phi_fu_124_p4 = 1'd0;
        end
    end else begin
        ap_phi_mux_curr_pixel_out_last_1_phi_fu_124_p4 = 1'd0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 8'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten13_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten13_load = indvar_flatten13_fu_80;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        downsample_block_ce0 = 1'b1;
    end else begin
        downsample_block_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_252_ce = 1'b1;
    end else begin
        grp_fu_252_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln73_reg_282_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        stream_out_48_TDATA_blk_n = stream_out_48_TREADY;
    end else begin
        stream_out_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln73_reg_282_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        stream_out_48_TVALID = 1'b1;
    end else begin
        stream_out_48_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln73_1_fu_182_p2 = (ap_sig_allocacmp_i_load + 8'd1);

assign add_ln73_fu_156_p2 = (ap_sig_allocacmp_indvar_flatten13_load + 16'd1);

assign add_ln74_fu_224_p2 = (select_ln51_fu_174_p3 + 8'd1);

assign and_ln77_fu_212_p2 = (icmp_ln77_fu_206_p2 & cmp174_fu_200_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage0_iter4));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_io) | (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & ((1'b1 == ap_block_state5_io) | (1'b1 == ap_block_state5_pp0_stage0_iter4)));
end

always @ (*) begin
    ap_block_state5_io = ((icmp_ln73_reg_282_pp0_iter3_reg == 1'd0) & (stream_out_48_TREADY == 1'b0));
end

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = ((icmp_ln73_reg_282_pp0_iter3_reg == 1'd0) & (stream_out_48_TREADY == 1'b0));
end

always @ (*) begin
    ap_condition_272 = ((1'b0 == ap_block_pp0_stage0) & (icmp_ln73_reg_282 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_condition_276 = ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln73_reg_282 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cmp174_fu_200_p2 = ((select_ln73_fu_188_p3 == 8'd249) ? 1'b1 : 1'b0);

assign curr_pixel_out_last_fu_218_p2 = (ap_phi_mux_curr_pixel_out_last_1_phi_fu_124_p4 | and_ln77_fu_212_p2);

assign downsample_block_address0 = zext_ln75_fu_248_p1;

assign grp_fu_252_p0 = grp_fu_252_p00;

assign grp_fu_252_p00 = select_ln73_fu_188_p3;

assign grp_fu_252_p1 = 16'd250;

assign grp_fu_252_p2 = grp_fu_252_p20;

assign grp_fu_252_p20 = select_ln51_reg_286_pp0_iter1_reg;

assign icmp_ln73_fu_150_p2 = ((ap_sig_allocacmp_indvar_flatten13_load == 16'd62500) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_168_p2 = ((ap_sig_allocacmp_j_load == 8'd250) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_206_p2 = ((select_ln51_fu_174_p3 > 8'd247) ? 1'b1 : 1'b0);

assign select_ln51_fu_174_p3 = ((icmp_ln74_fu_168_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_load);

assign select_ln73_fu_188_p3 = ((icmp_ln74_fu_168_p2[0:0] == 1'b1) ? add_ln73_1_fu_182_p2 : ap_sig_allocacmp_i_load);

assign stream_out_48_TDATA = downsample_block_q0;

assign stream_out_48_TKEEP = 8'd255;

assign stream_out_48_TLAST = curr_pixel_out_last_1_reg_120_pp0_iter3_reg;

assign stream_out_48_TSTRB = 'bx;

assign stream_out_48_TUSER = 'bx;

assign zext_ln75_fu_248_p1 = grp_fu_252_p3;

endmodule //downsample_downsample_Pipeline_write_image_VITIS_LOOP_74_3
