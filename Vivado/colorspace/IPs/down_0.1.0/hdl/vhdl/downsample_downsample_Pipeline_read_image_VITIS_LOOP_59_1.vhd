-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity downsample_downsample_Pipeline_read_image_VITIS_LOOP_59_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_48_TVALID : IN STD_LOGIC;
    image_block_2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_2_ce0 : OUT STD_LOGIC;
    image_block_2_we0 : OUT STD_LOGIC;
    image_block_2_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    image_block_1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_1_ce0 : OUT STD_LOGIC;
    image_block_1_we0 : OUT STD_LOGIC;
    image_block_1_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    image_block_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_ce0 : OUT STD_LOGIC;
    image_block_we0 : OUT STD_LOGIC;
    image_block_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    stream_in_48_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    stream_in_48_TREADY : OUT STD_LOGIC;
    stream_in_48_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_in_48_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    stream_in_48_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_48_TLAST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of downsample_downsample_Pipeline_read_image_VITIS_LOOP_59_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv18_3D090 : STD_LOGIC_VECTOR (17 downto 0) := "111101000010010000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv9_1F4 : STD_LOGIC_VECTOR (8 downto 0) := "111110100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv18_3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000011";
    constant ap_const_lv37_55556 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001010101010101010110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv18_1F4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000111110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln58_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal stream_in_48_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln58_fu_183_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln58_reg_309 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln58_reg_309_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln50_fu_213_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter2_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter3_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter4_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter5_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter6_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter7_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter8_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter9_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter10_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter11_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter12_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter13_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter14_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter15_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter16_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter17_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter18_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter19_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter20_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter21_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter22_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter23_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter24_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln50_reg_319_pp0_iter25_reg : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_275_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln61_reg_331 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_reg_337 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter13_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter14_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter15_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter16_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter17_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter18_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter19_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter20_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter21_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter22_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter23_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter24_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_337_pp0_iter25_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln61_fu_265_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln61_reg_342 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln61_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_76 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln59_fu_217_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_80 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln58_1_fu_197_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_fu_84 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal add_ln58_fu_165_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln59_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln58_1_fu_191_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_241_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln61_fu_249_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln61_fu_249_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln61_fu_249_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_241_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_275_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_275_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_241_ce : STD_LOGIC;
    signal grp_fu_275_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_275_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_275_p20 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln61_fu_249_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component downsample_urem_18ns_3ns_2_22_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component downsample_mul_18ns_20ns_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component downsample_mac_muladd_9ns_9ns_9ns_18_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component downsample_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_18ns_3ns_2_22_1_U1 : component downsample_urem_18ns_3ns_2_22_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p3,
        din1 => grp_fu_241_p1,
        ce => grp_fu_241_ce,
        dout => grp_fu_241_p2);

    mul_18ns_20ns_37_1_1_U2 : component downsample_mul_18ns_20ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        din0 => mul_ln61_fu_249_p0,
        din1 => mul_ln61_fu_249_p1,
        dout => mul_ln61_fu_249_p2);

    mac_muladd_9ns_9ns_9ns_18_4_1_U3 : component downsample_mac_muladd_9ns_9ns_9ns_18_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_275_p0,
        din1 => grp_fu_275_p1,
        din2 => grp_fu_275_p2,
        ce => grp_fu_275_ce,
        dout => grp_fu_275_p3);

    flow_control_loop_pipe_sequential_init_U : component downsample_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter25_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_80 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln58_fu_159_p2 = ap_const_lv1_0))) then 
                    i_fu_80 <= select_ln58_1_fu_197_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_84 <= ap_const_lv18_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln58_fu_159_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_84 <= add_ln58_fu_165_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_76 <= ap_const_lv9_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln58_fu_159_p2 = ap_const_lv1_0))) then 
                    j_fu_76 <= add_ln59_fu_217_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln61_reg_331 <= grp_fu_275_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                select_ln58_reg_309_pp0_iter2_reg <= select_ln58_reg_309;
                tmp_reg_337 <= mul_ln61_fu_249_p2(36 downto 20);
                tmp_reg_337_pp0_iter10_reg <= tmp_reg_337_pp0_iter9_reg;
                tmp_reg_337_pp0_iter11_reg <= tmp_reg_337_pp0_iter10_reg;
                tmp_reg_337_pp0_iter12_reg <= tmp_reg_337_pp0_iter11_reg;
                tmp_reg_337_pp0_iter13_reg <= tmp_reg_337_pp0_iter12_reg;
                tmp_reg_337_pp0_iter14_reg <= tmp_reg_337_pp0_iter13_reg;
                tmp_reg_337_pp0_iter15_reg <= tmp_reg_337_pp0_iter14_reg;
                tmp_reg_337_pp0_iter16_reg <= tmp_reg_337_pp0_iter15_reg;
                tmp_reg_337_pp0_iter17_reg <= tmp_reg_337_pp0_iter16_reg;
                tmp_reg_337_pp0_iter18_reg <= tmp_reg_337_pp0_iter17_reg;
                tmp_reg_337_pp0_iter19_reg <= tmp_reg_337_pp0_iter18_reg;
                tmp_reg_337_pp0_iter20_reg <= tmp_reg_337_pp0_iter19_reg;
                tmp_reg_337_pp0_iter21_reg <= tmp_reg_337_pp0_iter20_reg;
                tmp_reg_337_pp0_iter22_reg <= tmp_reg_337_pp0_iter21_reg;
                tmp_reg_337_pp0_iter23_reg <= tmp_reg_337_pp0_iter22_reg;
                tmp_reg_337_pp0_iter24_reg <= tmp_reg_337_pp0_iter23_reg;
                tmp_reg_337_pp0_iter25_reg <= tmp_reg_337_pp0_iter24_reg;
                tmp_reg_337_pp0_iter6_reg <= tmp_reg_337;
                tmp_reg_337_pp0_iter7_reg <= tmp_reg_337_pp0_iter6_reg;
                tmp_reg_337_pp0_iter8_reg <= tmp_reg_337_pp0_iter7_reg;
                tmp_reg_337_pp0_iter9_reg <= tmp_reg_337_pp0_iter8_reg;
                trunc_ln50_reg_319_pp0_iter10_reg <= trunc_ln50_reg_319_pp0_iter9_reg;
                trunc_ln50_reg_319_pp0_iter11_reg <= trunc_ln50_reg_319_pp0_iter10_reg;
                trunc_ln50_reg_319_pp0_iter12_reg <= trunc_ln50_reg_319_pp0_iter11_reg;
                trunc_ln50_reg_319_pp0_iter13_reg <= trunc_ln50_reg_319_pp0_iter12_reg;
                trunc_ln50_reg_319_pp0_iter14_reg <= trunc_ln50_reg_319_pp0_iter13_reg;
                trunc_ln50_reg_319_pp0_iter15_reg <= trunc_ln50_reg_319_pp0_iter14_reg;
                trunc_ln50_reg_319_pp0_iter16_reg <= trunc_ln50_reg_319_pp0_iter15_reg;
                trunc_ln50_reg_319_pp0_iter17_reg <= trunc_ln50_reg_319_pp0_iter16_reg;
                trunc_ln50_reg_319_pp0_iter18_reg <= trunc_ln50_reg_319_pp0_iter17_reg;
                trunc_ln50_reg_319_pp0_iter19_reg <= trunc_ln50_reg_319_pp0_iter18_reg;
                trunc_ln50_reg_319_pp0_iter20_reg <= trunc_ln50_reg_319_pp0_iter19_reg;
                trunc_ln50_reg_319_pp0_iter21_reg <= trunc_ln50_reg_319_pp0_iter20_reg;
                trunc_ln50_reg_319_pp0_iter22_reg <= trunc_ln50_reg_319_pp0_iter21_reg;
                trunc_ln50_reg_319_pp0_iter23_reg <= trunc_ln50_reg_319_pp0_iter22_reg;
                trunc_ln50_reg_319_pp0_iter24_reg <= trunc_ln50_reg_319_pp0_iter23_reg;
                trunc_ln50_reg_319_pp0_iter25_reg <= trunc_ln50_reg_319_pp0_iter24_reg;
                trunc_ln50_reg_319_pp0_iter2_reg <= trunc_ln50_reg_319;
                trunc_ln50_reg_319_pp0_iter3_reg <= trunc_ln50_reg_319_pp0_iter2_reg;
                trunc_ln50_reg_319_pp0_iter4_reg <= trunc_ln50_reg_319_pp0_iter3_reg;
                trunc_ln50_reg_319_pp0_iter5_reg <= trunc_ln50_reg_319_pp0_iter4_reg;
                trunc_ln50_reg_319_pp0_iter6_reg <= trunc_ln50_reg_319_pp0_iter5_reg;
                trunc_ln50_reg_319_pp0_iter7_reg <= trunc_ln50_reg_319_pp0_iter6_reg;
                trunc_ln50_reg_319_pp0_iter8_reg <= trunc_ln50_reg_319_pp0_iter7_reg;
                trunc_ln50_reg_319_pp0_iter9_reg <= trunc_ln50_reg_319_pp0_iter8_reg;
                trunc_ln61_reg_342 <= trunc_ln61_fu_265_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                select_ln58_reg_309 <= select_ln58_fu_183_p3;
                trunc_ln50_reg_319 <= trunc_ln50_fu_213_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln58_1_fu_191_p2 <= std_logic_vector(unsigned(i_fu_80) + unsigned(ap_const_lv9_1));
    add_ln58_fu_165_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_84) + unsigned(ap_const_lv18_1));
    add_ln59_fu_217_p2 <= std_logic_vector(unsigned(select_ln58_fu_183_p3) + unsigned(ap_const_lv9_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(stream_in_48_TVALID, icmp_ln58_fu_159_p2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln58_fu_159_p2 = ap_const_lv1_0) and (stream_in_48_TVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln58_fu_159_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln58_fu_159_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter25_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter25_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_241_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_241_ce <= ap_const_logic_1;
        else 
            grp_fu_241_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_241_p1 <= ap_const_lv18_3(3 - 1 downto 0);

    grp_fu_275_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_275_ce <= ap_const_logic_1;
        else 
            grp_fu_275_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_275_p0 <= grp_fu_275_p00(9 - 1 downto 0);
    grp_fu_275_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_1_fu_197_p3),18));
    grp_fu_275_p1 <= ap_const_lv18_1F4(9 - 1 downto 0);
    grp_fu_275_p2 <= grp_fu_275_p20(9 - 1 downto 0);
    grp_fu_275_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_reg_309_pp0_iter2_reg),18));
    icmp_ln58_fu_159_p2 <= "1" when (indvar_flatten_fu_84 = ap_const_lv18_3D090) else "0";
    icmp_ln59_fu_177_p2 <= "1" when (j_fu_76 = ap_const_lv9_1F4) else "0";
    image_block_1_address0 <= zext_ln61_fu_269_p1(17 - 1 downto 0);

    image_block_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_1_ce0 <= ap_const_logic_1;
        else 
            image_block_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    image_block_1_d0 <= trunc_ln50_reg_319_pp0_iter25_reg;

    image_block_1_we0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001, trunc_ln61_reg_342)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (trunc_ln61_reg_342 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_1_we0 <= ap_const_logic_1;
        else 
            image_block_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    image_block_2_address0 <= zext_ln61_fu_269_p1(17 - 1 downto 0);

    image_block_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_2_ce0 <= ap_const_logic_1;
        else 
            image_block_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    image_block_2_d0 <= trunc_ln50_reg_319_pp0_iter25_reg;

    image_block_2_we0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001, trunc_ln61_reg_342)
    begin
        if ((not((trunc_ln61_reg_342 = ap_const_lv2_0)) and not((trunc_ln61_reg_342 = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_2_we0 <= ap_const_logic_1;
        else 
            image_block_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    image_block_address0 <= zext_ln61_fu_269_p1(17 - 1 downto 0);

    image_block_ce0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_ce0 <= ap_const_logic_1;
        else 
            image_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    image_block_d0 <= trunc_ln50_reg_319_pp0_iter25_reg;

    image_block_we0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001, trunc_ln61_reg_342)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (trunc_ln61_reg_342 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_we0 <= ap_const_logic_1;
        else 
            image_block_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln61_fu_249_p0 <= mul_ln61_fu_249_p00(18 - 1 downto 0);
    mul_ln61_fu_249_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_reg_331),37));
    mul_ln61_fu_249_p1 <= ap_const_lv37_55556(20 - 1 downto 0);
    select_ln58_1_fu_197_p3 <= 
        add_ln58_1_fu_191_p2 when (icmp_ln59_fu_177_p2(0) = '1') else 
        i_fu_80;
    select_ln58_fu_183_p3 <= 
        ap_const_lv9_0 when (icmp_ln59_fu_177_p2(0) = '1') else 
        j_fu_76;

    stream_in_48_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, stream_in_48_TVALID, icmp_ln58_fu_159_p2, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln58_fu_159_p2 = ap_const_lv1_0))) then 
            stream_in_48_TDATA_blk_n <= stream_in_48_TVALID;
        else 
            stream_in_48_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_48_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln58_fu_159_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_fu_159_p2 = ap_const_lv1_0))) then 
            stream_in_48_TREADY <= ap_const_logic_1;
        else 
            stream_in_48_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln50_fu_213_p1 <= stream_in_48_TDATA(48 - 1 downto 0);
    trunc_ln61_fu_265_p1 <= grp_fu_241_p2(2 - 1 downto 0);
    zext_ln61_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_337_pp0_iter25_reg),64));
end behav;
