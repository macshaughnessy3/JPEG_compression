-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity downsample_downsample_Pipeline_write_image_VITIS_LOOP_74_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_out_48_TREADY : IN STD_LOGIC;
    downsample_block_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    downsample_block_ce0 : OUT STD_LOGIC;
    downsample_block_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    stream_out_48_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    stream_out_48_TVALID : OUT STD_LOGIC;
    stream_out_48_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_out_48_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    stream_out_48_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_48_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of downsample_downsample_Pipeline_write_image_VITIS_LOOP_74_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv16_F424 : STD_LOGIC_VECTOR (15 downto 0) := "1111010000100100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_FA : STD_LOGIC_VECTOR (7 downto 0) := "11111010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_F9 : STD_LOGIC_VECTOR (7 downto 0) := "11111001";
    constant ap_const_lv8_F7 : STD_LOGIC_VECTOR (7 downto 0) := "11110111";
    constant ap_const_lv16_FA : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln73_reg_284 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_284_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln73_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal stream_out_48_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal curr_pixel_out_last_1_reg_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_out_last_1_reg_122_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal curr_pixel_out_last_1_reg_122_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_out_last_1_reg_122_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_284_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_reg_284_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_176_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_reg_288 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln51_reg_288_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal curr_pixel_out_last_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_out_last_reg_298 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_curr_pixel_out_last_1_phi_fu_126_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal zext_ln75_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_74 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln74_fu_226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_78 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln73_fu_190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten13_fu_82 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln73_fu_158_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten13_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln74_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln73_1_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cmp174_fu_202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln77_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_254_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_254_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_254_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_254_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_254_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_condition_272 : BOOLEAN;
    signal ap_condition_276 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component downsample_mac_muladd_8ns_8ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component downsample_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_8ns_8ns_8ns_16_4_1_U35 : component downsample_mac_muladd_8ns_8ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_254_p0,
        din1 => grp_fu_254_p1,
        din2 => grp_fu_254_p2,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p3);

    flow_control_loop_pipe_sequential_init_U : component downsample_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    curr_pixel_out_last_1_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    curr_pixel_out_last_1_reg_122 <= ap_const_lv1_0;
                elsif ((ap_const_boolean_1 = ap_condition_276)) then 
                    curr_pixel_out_last_1_reg_122 <= curr_pixel_out_last_reg_298;
                end if;
            end if; 
        end if;
    end process;

    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln73_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_78 <= select_ln73_fu_190_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_78 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln73_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_82 <= add_ln73_fu_158_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_82 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln73_fu_152_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_74 <= add_ln74_fu_226_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_74 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                curr_pixel_out_last_1_reg_122_pp0_iter1_reg <= curr_pixel_out_last_1_reg_122;
                icmp_ln73_reg_284 <= icmp_ln73_fu_152_p2;
                icmp_ln73_reg_284_pp0_iter1_reg <= icmp_ln73_reg_284;
                select_ln51_reg_288 <= select_ln51_fu_176_p3;
                select_ln51_reg_288_pp0_iter1_reg <= select_ln51_reg_288;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                curr_pixel_out_last_1_reg_122_pp0_iter2_reg <= curr_pixel_out_last_1_reg_122_pp0_iter1_reg;
                curr_pixel_out_last_1_reg_122_pp0_iter3_reg <= curr_pixel_out_last_1_reg_122_pp0_iter2_reg;
                icmp_ln73_reg_284_pp0_iter2_reg <= icmp_ln73_reg_284_pp0_iter1_reg;
                icmp_ln73_reg_284_pp0_iter3_reg <= icmp_ln73_reg_284_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                curr_pixel_out_last_reg_298 <= curr_pixel_out_last_fu_220_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln73_1_fu_184_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv8_1));
    add_ln73_fu_158_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten13_load) + unsigned(ap_const_lv16_1));
    add_ln74_fu_226_p2 <= std_logic_vector(unsigned(select_ln51_fu_176_p3) + unsigned(ap_const_lv8_1));
    and_ln77_fu_214_p2 <= (icmp_ln77_fu_208_p2 and cmp174_fu_202_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state5_pp0_stage0_iter4, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state5_pp0_stage0_iter4, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state5_io) or (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)));
    end process;


    ap_block_state5_io_assign_proc : process(stream_out_48_TREADY, icmp_ln73_reg_284_pp0_iter3_reg)
    begin
                ap_block_state5_io <= ((icmp_ln73_reg_284_pp0_iter3_reg = ap_const_lv1_0) and (stream_out_48_TREADY = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(stream_out_48_TREADY, icmp_ln73_reg_284_pp0_iter3_reg)
    begin
                ap_block_state5_pp0_stage0_iter4 <= ((icmp_ln73_reg_284_pp0_iter3_reg = ap_const_lv1_0) and (stream_out_48_TREADY = ap_const_logic_0));
    end process;


    ap_condition_272_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln73_reg_284, ap_block_pp0_stage0)
    begin
                ap_condition_272 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln73_reg_284 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_276_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln73_reg_284, ap_block_pp0_stage0_11001)
    begin
                ap_condition_276 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln73_reg_284 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln73_fu_152_p2)
    begin
        if (((icmp_ln73_fu_152_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_curr_pixel_out_last_1_phi_fu_126_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, curr_pixel_out_last_reg_298, ap_loop_init, ap_condition_272)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_curr_pixel_out_last_1_phi_fu_126_p4 <= ap_const_lv1_0;
            elsif ((ap_const_boolean_1 = ap_condition_272)) then 
                ap_phi_mux_curr_pixel_out_last_1_phi_fu_126_p4 <= curr_pixel_out_last_reg_298;
            else 
                ap_phi_mux_curr_pixel_out_last_1_phi_fu_126_p4 <= ap_const_lv1_0;
            end if;
        else 
            ap_phi_mux_curr_pixel_out_last_1_phi_fu_126_p4 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_78)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_78;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten13_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten13_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten13_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten13_load <= indvar_flatten13_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_74)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_74;
        end if; 
    end process;

    cmp174_fu_202_p2 <= "1" when (select_ln73_fu_190_p3 = ap_const_lv8_F9) else "0";
    curr_pixel_out_last_fu_220_p2 <= (ap_phi_mux_curr_pixel_out_last_1_phi_fu_126_p4 or and_ln77_fu_214_p2);
    downsample_block_address0 <= zext_ln75_fu_250_p1(16 - 1 downto 0);

    downsample_block_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            downsample_block_ce0 <= ap_const_logic_1;
        else 
            downsample_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_254_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_254_ce <= ap_const_logic_1;
        else 
            grp_fu_254_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_254_p0 <= grp_fu_254_p00(8 - 1 downto 0);
    grp_fu_254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln73_fu_190_p3),16));
    grp_fu_254_p1 <= ap_const_lv16_FA(8 - 1 downto 0);
    grp_fu_254_p2 <= grp_fu_254_p20(8 - 1 downto 0);
    grp_fu_254_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_288_pp0_iter1_reg),16));
    icmp_ln73_fu_152_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten13_load = ap_const_lv16_F424) else "0";
    icmp_ln74_fu_170_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv8_FA) else "0";
    icmp_ln77_fu_208_p2 <= "1" when (unsigned(select_ln51_fu_176_p3) > unsigned(ap_const_lv8_F7)) else "0";
    select_ln51_fu_176_p3 <= 
        ap_const_lv8_0 when (icmp_ln74_fu_170_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln73_fu_190_p3 <= 
        add_ln73_1_fu_184_p2 when (icmp_ln74_fu_170_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    stream_out_48_TDATA <= downsample_block_q0;

    stream_out_48_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, stream_out_48_TREADY, icmp_ln73_reg_284_pp0_iter3_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln73_reg_284_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            stream_out_48_TDATA_blk_n <= stream_out_48_TREADY;
        else 
            stream_out_48_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_48_TKEEP <= ap_const_lv8_FF;
    stream_out_48_TLAST <= curr_pixel_out_last_1_reg_122_pp0_iter3_reg;
    stream_out_48_TSTRB <= "XXXXXXXX";
    stream_out_48_TUSER <= "X";

    stream_out_48_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, icmp_ln73_reg_284_pp0_iter3_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln73_reg_284_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            stream_out_48_TVALID <= ap_const_logic_1;
        else 
            stream_out_48_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln75_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_254_p3),64));
end behav;
