-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity downsample_downsample_Pipeline_downsample_VITIS_LOOP_66_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_block_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_ce0 : OUT STD_LOGIC;
    image_block_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    image_block_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_ce1 : OUT STD_LOGIC;
    image_block_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    image_block_1_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_1_ce0 : OUT STD_LOGIC;
    image_block_1_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    image_block_1_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_1_ce1 : OUT STD_LOGIC;
    image_block_1_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    image_block_2_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_2_ce0 : OUT STD_LOGIC;
    image_block_2_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    image_block_2_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
    image_block_2_ce1 : OUT STD_LOGIC;
    image_block_2_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    downsample_block_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    downsample_block_ce0 : OUT STD_LOGIC;
    downsample_block_we0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    downsample_block_d0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of downsample_downsample_Pipeline_downsample_VITIS_LOOP_66_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv16_F424 : STD_LOGIC_VECTOR (15 downto 0) := "1111010000100100";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv8_FA : STD_LOGIC_VECTOR (7 downto 0) := "11111010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv18_3E8 : STD_LOGIC_VECTOR (17 downto 0) := "000000001111101000";
    constant ap_const_lv18_3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000011";
    constant ap_const_lv37_55556 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001010101010101010110";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv18_1F4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000111110100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv16_FA : STD_LOGIC_VECTOR (15 downto 0) := "0000000011111010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln65_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln65_fu_285_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter22_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_reg_858_pp0_iter23_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_fu_299_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter16_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter17_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter18_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter19_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter20_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln65_1_reg_864_pp0_iter21_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_331_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter12_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter13_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter14_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter15_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter16_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter17_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter18_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter19_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_reg_870_pp0_iter20_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln_fu_337_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter11_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter12_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter13_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter14_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter15_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter16_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter17_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter18_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter19_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_reg_877_pp0_iter20_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_fu_344_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter3_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter4_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter5_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter6_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter7_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter8_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter9_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter10_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter11_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter12_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter13_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter14_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter15_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter16_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter17_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter18_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter19_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_reg_882_pp0_iter20_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_fu_348_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_reg_887 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_1_reg_893 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter6_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter7_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter8_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter9_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter10_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter11_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter12_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter13_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter14_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter15_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter16_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter17_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter18_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter19_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter20_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter21_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter22_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_1_reg_893_pp0_iter23_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_1_fu_392_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_1_reg_898 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_3_fu_398_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_3_reg_903 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_5_fu_403_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_5_reg_908 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_3_reg_918 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_reg_918_pp0_iter23_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_reg_923 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_reg_923_pp0_iter23_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_reg_928 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_reg_928_pp0_iter23_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln67_fu_468_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln67_reg_933 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln67_reg_933_pp0_iter24_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln67_2_fu_553_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln67_2_reg_1006 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln67_3_fu_578_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_3_reg_1011 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_4_fu_601_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_4_reg_1016 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_825_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln67_7_reg_1021 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln68_fu_633_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln68_reg_1026 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_8_reg_1031 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_1036 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_fu_687_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln69_reg_1041 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_13_reg_1046 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_1051 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln67_1_fu_475_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln67_3_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_6_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_9_fu_493_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln67_11_fu_734_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_96 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln66_fu_307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_100 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten6_fu_104 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal add_ln65_fu_267_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_indvar_flatten6_load : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln66_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln65_1_fu_293_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_331_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_331_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln67_fu_362_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln67_fu_362_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln67_fu_362_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal or_ln67_fu_383_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln67_2_fu_388_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal empty_21_fu_378_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln67_1_fu_414_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln67_1_fu_414_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln67_1_fu_414_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln67_2_fu_433_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln67_2_fu_433_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln67_2_fu_433_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln67_3_fu_452_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln67_3_fu_452_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln67_3_fu_452_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_499_p7 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_fu_499_p9 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_2_fu_522_p7 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_2_fu_522_p9 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln67_1_fu_518_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln67_2_fu_541_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln67_5_fu_549_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln67_4_fu_545_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_4_fu_559_p7 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_4_fu_559_p9 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_6_fu_582_p7 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_6_fu_582_p9 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_9_fu_605_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_615_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln68_1_fu_629_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln68_fu_625_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_11_fu_659_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_669_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln69_1_fu_683_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln69_fu_679_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln67_7_fu_713_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_8_fu_716_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_4_fu_719_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln67_10_fu_725_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln67_6_fu_728_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln68_2_fu_748_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln68_3_fu_751_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln68_1_fu_754_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln68_4_fu_760_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln68_2_fu_763_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln69_2_fu_779_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln69_3_fu_782_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln69_1_fu_785_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln69_4_fu_791_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln69_2_fu_794_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln4_fu_800_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln3_fu_769_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln2_fu_738_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_810_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_825_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_825_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_825_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal empty_fu_331_p00 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_825_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_825_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln67_1_fu_414_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln67_2_fu_433_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln67_3_fu_452_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln67_fu_362_p00 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_fu_499_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_499_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_499_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_522_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_522_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_522_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_559_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_559_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_559_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_582_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_582_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_6_fu_582_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component downsample_mul_8ns_11ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component downsample_urem_18ns_3ns_2_22_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component downsample_mul_18ns_20ns_37_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component downsample_sparsemux_7_2_48_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (1 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (1 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (1 downto 0);
        din2_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (47 downto 0);
        din2 : IN STD_LOGIC_VECTOR (47 downto 0);
        def : IN STD_LOGIC_VECTOR (47 downto 0);
        sel : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component downsample_mac_muladd_8ns_8ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component downsample_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_8ns_11ns_18_1_1_U15 : component downsample_mul_8ns_11ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 18)
    port map (
        din0 => empty_fu_331_p0,
        din1 => empty_fu_331_p1,
        dout => empty_fu_331_p2);

    urem_18ns_3ns_2_22_1_U16 : component downsample_urem_18ns_3ns_2_22_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 18,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_353_p0,
        din1 => grp_fu_353_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_353_p2);

    mul_18ns_20ns_37_1_1_U17 : component downsample_mul_18ns_20ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        din0 => mul_ln67_fu_362_p0,
        din1 => mul_ln67_fu_362_p1,
        dout => mul_ln67_fu_362_p2);

    mul_18ns_20ns_37_1_1_U18 : component downsample_mul_18ns_20ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        din0 => mul_ln67_1_fu_414_p0,
        din1 => mul_ln67_1_fu_414_p1,
        dout => mul_ln67_1_fu_414_p2);

    mul_18ns_20ns_37_1_1_U19 : component downsample_mul_18ns_20ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        din0 => mul_ln67_2_fu_433_p0,
        din1 => mul_ln67_2_fu_433_p1,
        dout => mul_ln67_2_fu_433_p2);

    mul_18ns_20ns_37_1_1_U20 : component downsample_mul_18ns_20ns_37_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 20,
        dout_WIDTH => 37)
    port map (
        din0 => mul_ln67_3_fu_452_p0,
        din1 => mul_ln67_3_fu_452_p1,
        dout => mul_ln67_3_fu_452_p2);

    sparsemux_7_2_48_1_1_U21 : component downsample_sparsemux_7_2_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 48,
        CASE1 => "01",
        din1_WIDTH => 48,
        CASE2 => "10",
        din2_WIDTH => 48,
        def_WIDTH => 48,
        sel_WIDTH => 2,
        dout_WIDTH => 48)
    port map (
        din0 => image_block_q1,
        din1 => image_block_1_q1,
        din2 => image_block_2_q1,
        def => tmp_fu_499_p7,
        sel => trunc_ln67_reg_933_pp0_iter24_reg,
        dout => tmp_fu_499_p9);

    sparsemux_7_2_48_1_1_U22 : component downsample_sparsemux_7_2_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "00",
        din0_WIDTH => 48,
        CASE1 => "01",
        din1_WIDTH => 48,
        CASE2 => "10",
        din2_WIDTH => 48,
        def_WIDTH => 48,
        sel_WIDTH => 2,
        dout_WIDTH => 48)
    port map (
        din0 => image_block_q0,
        din1 => image_block_1_q0,
        din2 => image_block_2_q0,
        def => tmp_2_fu_522_p7,
        sel => trunc_ln67_reg_933_pp0_iter24_reg,
        dout => tmp_2_fu_522_p9);

    sparsemux_7_2_48_1_1_U23 : component downsample_sparsemux_7_2_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "01",
        din0_WIDTH => 48,
        CASE1 => "10",
        din1_WIDTH => 48,
        CASE2 => "00",
        din2_WIDTH => 48,
        def_WIDTH => 48,
        sel_WIDTH => 2,
        dout_WIDTH => 48)
    port map (
        din0 => image_block_q0,
        din1 => image_block_1_q0,
        din2 => image_block_2_q0,
        def => tmp_4_fu_559_p7,
        sel => trunc_ln67_reg_933_pp0_iter24_reg,
        dout => tmp_4_fu_559_p9);

    sparsemux_7_2_48_1_1_U24 : component downsample_sparsemux_7_2_48_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "10",
        din0_WIDTH => 48,
        CASE1 => "00",
        din1_WIDTH => 48,
        CASE2 => "01",
        din2_WIDTH => 48,
        def_WIDTH => 48,
        sel_WIDTH => 2,
        dout_WIDTH => 48)
    port map (
        din0 => image_block_q0,
        din1 => image_block_1_q0,
        din2 => image_block_2_q0,
        def => tmp_6_fu_582_p7,
        sel => trunc_ln67_reg_933_pp0_iter24_reg,
        dout => tmp_6_fu_582_p9);

    mac_muladd_8ns_8ns_8ns_16_4_1_U25 : component downsample_mac_muladd_8ns_8ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_825_p0,
        din1 => grp_fu_825_p1,
        din2 => grp_fu_825_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_825_p3);

    flow_control_loop_pipe_sequential_init_U : component downsample_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter25_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln65_fu_261_p2 = ap_const_lv1_0))) then 
                    i_fu_100 <= select_ln65_1_fu_299_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_100 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln65_fu_261_p2 = ap_const_lv1_0))) then 
                    indvar_flatten6_fu_104 <= add_ln65_fu_267_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten6_fu_104 <= ap_const_lv16_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln65_fu_261_p2 = ap_const_lv1_0))) then 
                    j_fu_96 <= add_ln66_fu_307_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_96 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln67_1_reg_898 <= add_ln67_1_fu_392_p2;
                add_ln67_2_reg_1006 <= add_ln67_2_fu_553_p2;
                add_ln67_3_reg_903 <= add_ln67_3_fu_398_p2;
                add_ln67_5_reg_908 <= add_ln67_5_fu_403_p2;
                add_ln67_reg_887 <= add_ln67_fu_348_p2;
                add_ln68_reg_1026 <= add_ln68_fu_633_p2;
                add_ln69_reg_1041 <= add_ln69_fu_687_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_reg_870_pp0_iter10_reg <= empty_reg_870_pp0_iter9_reg;
                empty_reg_870_pp0_iter11_reg <= empty_reg_870_pp0_iter10_reg;
                empty_reg_870_pp0_iter12_reg <= empty_reg_870_pp0_iter11_reg;
                empty_reg_870_pp0_iter13_reg <= empty_reg_870_pp0_iter12_reg;
                empty_reg_870_pp0_iter14_reg <= empty_reg_870_pp0_iter13_reg;
                empty_reg_870_pp0_iter15_reg <= empty_reg_870_pp0_iter14_reg;
                empty_reg_870_pp0_iter16_reg <= empty_reg_870_pp0_iter15_reg;
                empty_reg_870_pp0_iter17_reg <= empty_reg_870_pp0_iter16_reg;
                empty_reg_870_pp0_iter18_reg <= empty_reg_870_pp0_iter17_reg;
                empty_reg_870_pp0_iter19_reg <= empty_reg_870_pp0_iter18_reg;
                empty_reg_870_pp0_iter20_reg <= empty_reg_870_pp0_iter19_reg;
                empty_reg_870_pp0_iter2_reg <= empty_reg_870;
                empty_reg_870_pp0_iter3_reg <= empty_reg_870_pp0_iter2_reg;
                empty_reg_870_pp0_iter4_reg <= empty_reg_870_pp0_iter3_reg;
                empty_reg_870_pp0_iter5_reg <= empty_reg_870_pp0_iter4_reg;
                empty_reg_870_pp0_iter6_reg <= empty_reg_870_pp0_iter5_reg;
                empty_reg_870_pp0_iter7_reg <= empty_reg_870_pp0_iter6_reg;
                empty_reg_870_pp0_iter8_reg <= empty_reg_870_pp0_iter7_reg;
                empty_reg_870_pp0_iter9_reg <= empty_reg_870_pp0_iter8_reg;
                select_ln65_1_reg_864_pp0_iter10_reg <= select_ln65_1_reg_864_pp0_iter9_reg;
                select_ln65_1_reg_864_pp0_iter11_reg <= select_ln65_1_reg_864_pp0_iter10_reg;
                select_ln65_1_reg_864_pp0_iter12_reg <= select_ln65_1_reg_864_pp0_iter11_reg;
                select_ln65_1_reg_864_pp0_iter13_reg <= select_ln65_1_reg_864_pp0_iter12_reg;
                select_ln65_1_reg_864_pp0_iter14_reg <= select_ln65_1_reg_864_pp0_iter13_reg;
                select_ln65_1_reg_864_pp0_iter15_reg <= select_ln65_1_reg_864_pp0_iter14_reg;
                select_ln65_1_reg_864_pp0_iter16_reg <= select_ln65_1_reg_864_pp0_iter15_reg;
                select_ln65_1_reg_864_pp0_iter17_reg <= select_ln65_1_reg_864_pp0_iter16_reg;
                select_ln65_1_reg_864_pp0_iter18_reg <= select_ln65_1_reg_864_pp0_iter17_reg;
                select_ln65_1_reg_864_pp0_iter19_reg <= select_ln65_1_reg_864_pp0_iter18_reg;
                select_ln65_1_reg_864_pp0_iter20_reg <= select_ln65_1_reg_864_pp0_iter19_reg;
                select_ln65_1_reg_864_pp0_iter21_reg <= select_ln65_1_reg_864_pp0_iter20_reg;
                select_ln65_1_reg_864_pp0_iter2_reg <= select_ln65_1_reg_864_pp0_iter1_reg;
                select_ln65_1_reg_864_pp0_iter3_reg <= select_ln65_1_reg_864_pp0_iter2_reg;
                select_ln65_1_reg_864_pp0_iter4_reg <= select_ln65_1_reg_864_pp0_iter3_reg;
                select_ln65_1_reg_864_pp0_iter5_reg <= select_ln65_1_reg_864_pp0_iter4_reg;
                select_ln65_1_reg_864_pp0_iter6_reg <= select_ln65_1_reg_864_pp0_iter5_reg;
                select_ln65_1_reg_864_pp0_iter7_reg <= select_ln65_1_reg_864_pp0_iter6_reg;
                select_ln65_1_reg_864_pp0_iter8_reg <= select_ln65_1_reg_864_pp0_iter7_reg;
                select_ln65_1_reg_864_pp0_iter9_reg <= select_ln65_1_reg_864_pp0_iter8_reg;
                select_ln65_reg_858_pp0_iter10_reg <= select_ln65_reg_858_pp0_iter9_reg;
                select_ln65_reg_858_pp0_iter11_reg <= select_ln65_reg_858_pp0_iter10_reg;
                select_ln65_reg_858_pp0_iter12_reg <= select_ln65_reg_858_pp0_iter11_reg;
                select_ln65_reg_858_pp0_iter13_reg <= select_ln65_reg_858_pp0_iter12_reg;
                select_ln65_reg_858_pp0_iter14_reg <= select_ln65_reg_858_pp0_iter13_reg;
                select_ln65_reg_858_pp0_iter15_reg <= select_ln65_reg_858_pp0_iter14_reg;
                select_ln65_reg_858_pp0_iter16_reg <= select_ln65_reg_858_pp0_iter15_reg;
                select_ln65_reg_858_pp0_iter17_reg <= select_ln65_reg_858_pp0_iter16_reg;
                select_ln65_reg_858_pp0_iter18_reg <= select_ln65_reg_858_pp0_iter17_reg;
                select_ln65_reg_858_pp0_iter19_reg <= select_ln65_reg_858_pp0_iter18_reg;
                select_ln65_reg_858_pp0_iter20_reg <= select_ln65_reg_858_pp0_iter19_reg;
                select_ln65_reg_858_pp0_iter21_reg <= select_ln65_reg_858_pp0_iter20_reg;
                select_ln65_reg_858_pp0_iter22_reg <= select_ln65_reg_858_pp0_iter21_reg;
                select_ln65_reg_858_pp0_iter23_reg <= select_ln65_reg_858_pp0_iter22_reg;
                select_ln65_reg_858_pp0_iter2_reg <= select_ln65_reg_858_pp0_iter1_reg;
                select_ln65_reg_858_pp0_iter3_reg <= select_ln65_reg_858_pp0_iter2_reg;
                select_ln65_reg_858_pp0_iter4_reg <= select_ln65_reg_858_pp0_iter3_reg;
                select_ln65_reg_858_pp0_iter5_reg <= select_ln65_reg_858_pp0_iter4_reg;
                select_ln65_reg_858_pp0_iter6_reg <= select_ln65_reg_858_pp0_iter5_reg;
                select_ln65_reg_858_pp0_iter7_reg <= select_ln65_reg_858_pp0_iter6_reg;
                select_ln65_reg_858_pp0_iter8_reg <= select_ln65_reg_858_pp0_iter7_reg;
                select_ln65_reg_858_pp0_iter9_reg <= select_ln65_reg_858_pp0_iter8_reg;
                    shl_ln_reg_877(8 downto 1) <= shl_ln_fu_337_p3(8 downto 1);
                    shl_ln_reg_877_pp0_iter10_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter9_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter11_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter10_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter12_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter11_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter13_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter12_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter14_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter13_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter15_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter14_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter16_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter15_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter17_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter16_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter18_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter17_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter19_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter18_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter20_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter19_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter3_reg(8 downto 1) <= shl_ln_reg_877(8 downto 1);
                    shl_ln_reg_877_pp0_iter4_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter3_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter5_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter4_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter6_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter5_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter7_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter6_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter8_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter7_reg(8 downto 1);
                    shl_ln_reg_877_pp0_iter9_reg(8 downto 1) <= shl_ln_reg_877_pp0_iter8_reg(8 downto 1);
                tmp_10_reg_1036 <= tmp_6_fu_582_p9(31 downto 16);
                tmp_13_reg_1046 <= tmp_4_fu_559_p9(47 downto 32);
                tmp_14_reg_1051 <= tmp_6_fu_582_p9(47 downto 32);
                tmp_1_reg_893 <= mul_ln67_fu_362_p2(36 downto 20);
                tmp_1_reg_893_pp0_iter10_reg <= tmp_1_reg_893_pp0_iter9_reg;
                tmp_1_reg_893_pp0_iter11_reg <= tmp_1_reg_893_pp0_iter10_reg;
                tmp_1_reg_893_pp0_iter12_reg <= tmp_1_reg_893_pp0_iter11_reg;
                tmp_1_reg_893_pp0_iter13_reg <= tmp_1_reg_893_pp0_iter12_reg;
                tmp_1_reg_893_pp0_iter14_reg <= tmp_1_reg_893_pp0_iter13_reg;
                tmp_1_reg_893_pp0_iter15_reg <= tmp_1_reg_893_pp0_iter14_reg;
                tmp_1_reg_893_pp0_iter16_reg <= tmp_1_reg_893_pp0_iter15_reg;
                tmp_1_reg_893_pp0_iter17_reg <= tmp_1_reg_893_pp0_iter16_reg;
                tmp_1_reg_893_pp0_iter18_reg <= tmp_1_reg_893_pp0_iter17_reg;
                tmp_1_reg_893_pp0_iter19_reg <= tmp_1_reg_893_pp0_iter18_reg;
                tmp_1_reg_893_pp0_iter20_reg <= tmp_1_reg_893_pp0_iter19_reg;
                tmp_1_reg_893_pp0_iter21_reg <= tmp_1_reg_893_pp0_iter20_reg;
                tmp_1_reg_893_pp0_iter22_reg <= tmp_1_reg_893_pp0_iter21_reg;
                tmp_1_reg_893_pp0_iter23_reg <= tmp_1_reg_893_pp0_iter22_reg;
                tmp_1_reg_893_pp0_iter4_reg <= tmp_1_reg_893;
                tmp_1_reg_893_pp0_iter5_reg <= tmp_1_reg_893_pp0_iter4_reg;
                tmp_1_reg_893_pp0_iter6_reg <= tmp_1_reg_893_pp0_iter5_reg;
                tmp_1_reg_893_pp0_iter7_reg <= tmp_1_reg_893_pp0_iter6_reg;
                tmp_1_reg_893_pp0_iter8_reg <= tmp_1_reg_893_pp0_iter7_reg;
                tmp_1_reg_893_pp0_iter9_reg <= tmp_1_reg_893_pp0_iter8_reg;
                tmp_3_reg_918 <= mul_ln67_1_fu_414_p2(36 downto 20);
                tmp_3_reg_918_pp0_iter23_reg <= tmp_3_reg_918;
                tmp_5_reg_923 <= mul_ln67_2_fu_433_p2(36 downto 20);
                tmp_5_reg_923_pp0_iter23_reg <= tmp_5_reg_923;
                tmp_7_reg_928 <= mul_ln67_3_fu_452_p2(36 downto 20);
                tmp_7_reg_928_pp0_iter23_reg <= tmp_7_reg_928;
                tmp_8_reg_1031 <= tmp_4_fu_559_p9(31 downto 16);
                trunc_ln67_3_reg_1011 <= trunc_ln67_3_fu_578_p1;
                trunc_ln67_4_reg_1016 <= trunc_ln67_4_fu_601_p1;
                trunc_ln67_reg_933 <= trunc_ln67_fu_468_p1;
                trunc_ln67_reg_933_pp0_iter24_reg <= trunc_ln67_reg_933;
                    zext_ln67_reg_882(8 downto 1) <= zext_ln67_fu_344_p1(8 downto 1);
                    zext_ln67_reg_882_pp0_iter10_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter9_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter11_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter10_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter12_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter11_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter13_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter12_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter14_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter13_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter15_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter14_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter16_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter15_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter17_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter16_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter18_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter17_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter19_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter18_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter20_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter19_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter3_reg(8 downto 1) <= zext_ln67_reg_882(8 downto 1);
                    zext_ln67_reg_882_pp0_iter4_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter3_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter5_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter4_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter6_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter5_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter7_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter6_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter8_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter7_reg(8 downto 1);
                    zext_ln67_reg_882_pp0_iter9_reg(8 downto 1) <= zext_ln67_reg_882_pp0_iter8_reg(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln67_7_reg_1021 <= grp_fu_825_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_870 <= empty_fu_331_p2;
                select_ln65_1_reg_864 <= select_ln65_1_fu_299_p3;
                select_ln65_1_reg_864_pp0_iter1_reg <= select_ln65_1_reg_864;
                select_ln65_reg_858 <= select_ln65_fu_285_p3;
                select_ln65_reg_858_pp0_iter1_reg <= select_ln65_reg_858;
            end if;
        end if;
    end process;
    shl_ln_reg_877(0) <= '0';
    shl_ln_reg_877_pp0_iter3_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter4_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter5_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter6_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter7_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter8_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter9_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter10_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter11_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter12_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter13_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter14_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter15_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter16_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter17_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter18_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter19_reg(0) <= '0';
    shl_ln_reg_877_pp0_iter20_reg(0) <= '0';
    zext_ln67_reg_882(0) <= '0';
    zext_ln67_reg_882(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter3_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter3_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter4_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter4_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter5_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter5_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter6_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter6_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter7_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter7_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter8_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter8_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter9_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter9_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter10_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter10_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter11_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter11_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter12_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter12_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter13_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter13_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter14_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter14_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter15_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter15_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter16_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter16_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter17_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter17_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter18_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter18_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter19_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter19_reg(17 downto 9) <= "000000000";
    zext_ln67_reg_882_pp0_iter20_reg(0) <= '0';
    zext_ln67_reg_882_pp0_iter20_reg(17 downto 9) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln65_1_fu_293_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv8_1));
    add_ln65_fu_267_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten6_load) + unsigned(ap_const_lv16_1));
    add_ln66_fu_307_p2 <= std_logic_vector(unsigned(select_ln65_fu_285_p3) + unsigned(ap_const_lv8_1));
    add_ln67_1_fu_392_p2 <= std_logic_vector(unsigned(zext_ln67_2_fu_388_p1) + unsigned(empty_21_fu_378_p2));
    add_ln67_2_fu_553_p2 <= std_logic_vector(unsigned(zext_ln67_5_fu_549_p1) + unsigned(zext_ln67_4_fu_545_p1));
    add_ln67_3_fu_398_p2 <= std_logic_vector(unsigned(zext_ln67_reg_882_pp0_iter20_reg) + unsigned(empty_21_fu_378_p2));
    add_ln67_4_fu_719_p2 <= std_logic_vector(unsigned(zext_ln67_7_fu_713_p1) + unsigned(zext_ln67_8_fu_716_p1));
    add_ln67_5_fu_403_p2 <= std_logic_vector(unsigned(zext_ln67_2_fu_388_p1) + unsigned(empty_reg_870_pp0_iter20_reg));
    add_ln67_6_fu_728_p2 <= std_logic_vector(unsigned(add_ln67_4_fu_719_p2) + unsigned(zext_ln67_10_fu_725_p1));
    add_ln67_fu_348_p2 <= std_logic_vector(unsigned(zext_ln67_fu_344_p1) + unsigned(empty_reg_870));
    add_ln68_1_fu_754_p2 <= std_logic_vector(unsigned(zext_ln68_2_fu_748_p1) + unsigned(zext_ln68_3_fu_751_p1));
    add_ln68_2_fu_763_p2 <= std_logic_vector(unsigned(add_ln68_1_fu_754_p2) + unsigned(zext_ln68_4_fu_760_p1));
    add_ln68_fu_633_p2 <= std_logic_vector(unsigned(zext_ln68_1_fu_629_p1) + unsigned(zext_ln68_fu_625_p1));
    add_ln69_1_fu_785_p2 <= std_logic_vector(unsigned(zext_ln69_2_fu_779_p1) + unsigned(zext_ln69_3_fu_782_p1));
    add_ln69_2_fu_794_p2 <= std_logic_vector(unsigned(add_ln69_1_fu_785_p2) + unsigned(zext_ln69_4_fu_791_p1));
    add_ln69_fu_687_p2 <= std_logic_vector(unsigned(zext_ln69_1_fu_683_p1) + unsigned(zext_ln69_fu_679_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln65_fu_261_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln65_fu_261_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter25_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter25_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_100)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten6_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten6_fu_104)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten6_load <= ap_const_lv16_0;
        else 
            ap_sig_allocacmp_indvar_flatten6_load <= indvar_flatten6_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_96, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_96;
        end if; 
    end process;

    downsample_block_address0 <= zext_ln67_11_fu_734_p1(16 - 1 downto 0);

    downsample_block_ce0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            downsample_block_ce0 <= ap_const_logic_1;
        else 
            downsample_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    downsample_block_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_810_p4),64));

    downsample_block_we0_assign_proc : process(ap_enable_reg_pp0_iter26, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            downsample_block_we0 <= ap_const_lv8_3F;
        else 
            downsample_block_we0 <= ap_const_lv8_0;
        end if; 
    end process;

    empty_21_fu_378_p2 <= std_logic_vector(unsigned(empty_reg_870_pp0_iter20_reg) + unsigned(ap_const_lv18_1F4));
    empty_fu_331_p0 <= empty_fu_331_p00(8 - 1 downto 0);
    empty_fu_331_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_1_reg_864),18));
    empty_fu_331_p1 <= ap_const_lv18_3E8(11 - 1 downto 0);
    grp_fu_353_p0 <= std_logic_vector(unsigned(zext_ln67_fu_344_p1) + unsigned(empty_reg_870));
    grp_fu_353_p1 <= ap_const_lv18_3(3 - 1 downto 0);
    grp_fu_825_p0 <= grp_fu_825_p00(8 - 1 downto 0);
    grp_fu_825_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_1_reg_864_pp0_iter21_reg),16));
    grp_fu_825_p1 <= ap_const_lv16_FA(8 - 1 downto 0);
    grp_fu_825_p2 <= grp_fu_825_p20(8 - 1 downto 0);
    grp_fu_825_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln65_reg_858_pp0_iter23_reg),16));
    icmp_ln65_fu_261_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten6_load = ap_const_lv16_F424) else "0";
    icmp_ln66_fu_279_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv8_FA) else "0";

    image_block_1_address0_assign_proc : process(ap_enable_reg_pp0_iter24, trunc_ln67_reg_933, ap_block_pp0_stage0, zext_ln67_3_fu_481_p1, zext_ln67_6_fu_487_p1, zext_ln67_9_fu_493_p1)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_933 = ap_const_lv2_0)) then 
                image_block_1_address0 <= zext_ln67_9_fu_493_p1(17 - 1 downto 0);
            elsif ((trunc_ln67_reg_933 = ap_const_lv2_2)) then 
                image_block_1_address0 <= zext_ln67_6_fu_487_p1(17 - 1 downto 0);
            elsif ((trunc_ln67_reg_933 = ap_const_lv2_1)) then 
                image_block_1_address0 <= zext_ln67_3_fu_481_p1(17 - 1 downto 0);
            else 
                image_block_1_address0 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            image_block_1_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_block_1_address1 <= zext_ln67_1_fu_475_p1(17 - 1 downto 0);

    image_block_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001, trunc_ln67_reg_933)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            image_block_1_ce0 <= ap_const_logic_1;
        else 
            image_block_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_block_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_1_ce1 <= ap_const_logic_1;
        else 
            image_block_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_block_2_address0_assign_proc : process(ap_enable_reg_pp0_iter24, trunc_ln67_reg_933, ap_block_pp0_stage0, zext_ln67_3_fu_481_p1, zext_ln67_6_fu_487_p1, zext_ln67_9_fu_493_p1)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_933 = ap_const_lv2_1)) then 
                image_block_2_address0 <= zext_ln67_9_fu_493_p1(17 - 1 downto 0);
            elsif ((trunc_ln67_reg_933 = ap_const_lv2_0)) then 
                image_block_2_address0 <= zext_ln67_6_fu_487_p1(17 - 1 downto 0);
            elsif ((trunc_ln67_reg_933 = ap_const_lv2_2)) then 
                image_block_2_address0 <= zext_ln67_3_fu_481_p1(17 - 1 downto 0);
            else 
                image_block_2_address0 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            image_block_2_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_block_2_address1 <= zext_ln67_1_fu_475_p1(17 - 1 downto 0);

    image_block_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001, trunc_ln67_reg_933)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            image_block_2_ce0 <= ap_const_logic_1;
        else 
            image_block_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_block_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_2_ce1 <= ap_const_logic_1;
        else 
            image_block_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    image_block_address0_assign_proc : process(ap_enable_reg_pp0_iter24, trunc_ln67_reg_933, ap_block_pp0_stage0, zext_ln67_3_fu_481_p1, zext_ln67_6_fu_487_p1, zext_ln67_9_fu_493_p1)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((trunc_ln67_reg_933 = ap_const_lv2_2)) then 
                image_block_address0 <= zext_ln67_9_fu_493_p1(17 - 1 downto 0);
            elsif ((trunc_ln67_reg_933 = ap_const_lv2_1)) then 
                image_block_address0 <= zext_ln67_6_fu_487_p1(17 - 1 downto 0);
            elsif ((trunc_ln67_reg_933 = ap_const_lv2_0)) then 
                image_block_address0 <= zext_ln67_3_fu_481_p1(17 - 1 downto 0);
            else 
                image_block_address0 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            image_block_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    image_block_address1 <= zext_ln67_1_fu_475_p1(17 - 1 downto 0);

    image_block_ce0_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001, trunc_ln67_reg_933)
    begin
        if ((((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (trunc_ln67_reg_933 = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            image_block_ce0 <= ap_const_logic_1;
        else 
            image_block_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_block_ce1_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            image_block_ce1 <= ap_const_logic_1;
        else 
            image_block_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln67_1_fu_414_p0 <= mul_ln67_1_fu_414_p00(18 - 1 downto 0);
    mul_ln67_1_fu_414_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_1_reg_898),37));
    mul_ln67_1_fu_414_p1 <= ap_const_lv37_55556(20 - 1 downto 0);
    mul_ln67_2_fu_433_p0 <= mul_ln67_2_fu_433_p00(18 - 1 downto 0);
    mul_ln67_2_fu_433_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_3_reg_903),37));
    mul_ln67_2_fu_433_p1 <= ap_const_lv37_55556(20 - 1 downto 0);
    mul_ln67_3_fu_452_p0 <= mul_ln67_3_fu_452_p00(18 - 1 downto 0);
    mul_ln67_3_fu_452_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_5_reg_908),37));
    mul_ln67_3_fu_452_p1 <= ap_const_lv37_55556(20 - 1 downto 0);
    mul_ln67_fu_362_p0 <= mul_ln67_fu_362_p00(18 - 1 downto 0);
    mul_ln67_fu_362_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_reg_887),37));
    mul_ln67_fu_362_p1 <= ap_const_lv37_55556(20 - 1 downto 0);
    or_ln67_fu_383_p2 <= (shl_ln_reg_877_pp0_iter20_reg or ap_const_lv9_1);
    select_ln65_1_fu_299_p3 <= 
        add_ln65_1_fu_293_p2 when (icmp_ln66_fu_279_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln65_fu_285_p3 <= 
        ap_const_lv8_0 when (icmp_ln66_fu_279_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    shl_ln_fu_337_p3 <= (select_ln65_reg_858_pp0_iter1_reg & ap_const_lv1_0);
    tmp_11_fu_659_p4 <= tmp_fu_499_p9(47 downto 32);
    tmp_12_fu_669_p4 <= tmp_2_fu_522_p9(47 downto 32);
    tmp_15_fu_810_p4 <= ((trunc_ln4_fu_800_p4 & trunc_ln3_fu_769_p4) & trunc_ln2_fu_738_p4);
    tmp_2_fu_522_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_4_fu_559_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_6_fu_582_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_9_fu_605_p4 <= tmp_fu_499_p9(31 downto 16);
    tmp_fu_499_p7 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_s_fu_615_p4 <= tmp_2_fu_522_p9(31 downto 16);
    trunc_ln2_fu_738_p4 <= add_ln67_6_fu_728_p2(17 downto 2);
    trunc_ln3_fu_769_p4 <= add_ln68_2_fu_763_p2(17 downto 2);
    trunc_ln4_fu_800_p4 <= add_ln69_2_fu_794_p2(17 downto 2);
    trunc_ln67_1_fu_518_p1 <= tmp_fu_499_p9(16 - 1 downto 0);
    trunc_ln67_2_fu_541_p1 <= tmp_2_fu_522_p9(16 - 1 downto 0);
    trunc_ln67_3_fu_578_p1 <= tmp_4_fu_559_p9(16 - 1 downto 0);
    trunc_ln67_4_fu_601_p1 <= tmp_6_fu_582_p9(16 - 1 downto 0);
    trunc_ln67_fu_468_p1 <= grp_fu_353_p2(2 - 1 downto 0);
    zext_ln67_10_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln67_4_reg_1016),18));
    zext_ln67_11_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_7_reg_1021),64));
    zext_ln67_1_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_893_pp0_iter23_reg),64));
    zext_ln67_2_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln67_fu_383_p2),18));
    zext_ln67_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_918_pp0_iter23_reg),64));
    zext_ln67_4_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln67_1_fu_518_p1),17));
    zext_ln67_5_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln67_2_fu_541_p1),17));
    zext_ln67_6_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_923_pp0_iter23_reg),64));
    zext_ln67_7_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln67_2_reg_1006),18));
    zext_ln67_8_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln67_3_reg_1011),18));
    zext_ln67_9_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_928_pp0_iter23_reg),64));
    zext_ln67_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_337_p3),18));
    zext_ln68_1_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_615_p4),17));
    zext_ln68_2_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_reg_1026),18));
    zext_ln68_3_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1031),18));
    zext_ln68_4_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_1036),18));
    zext_ln68_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_605_p4),17));
    zext_ln69_1_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_669_p4),17));
    zext_ln69_2_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_reg_1041),18));
    zext_ln69_3_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_1046),18));
    zext_ln69_4_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_1051),18));
    zext_ln69_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_659_p4),17));
end behav;
