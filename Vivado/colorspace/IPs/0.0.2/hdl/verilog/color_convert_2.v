// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert_2_color_convert_2,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.620000,HLS_SYN_LAT=7,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1202,HLS_SYN_LUT=1686,HLS_VERSION=2023_2}" *)

module color_convert_2 (
        ap_clk,
        ap_rst_n,
        stream_in_48_TDATA,
        stream_in_48_TVALID,
        stream_in_48_TREADY,
        stream_in_48_TKEEP,
        stream_in_48_TSTRB,
        stream_in_48_TUSER,
        stream_in_48_TLAST,
        stream_out_48_TDATA,
        stream_out_48_TVALID,
        stream_out_48_TREADY,
        stream_out_48_TKEEP,
        stream_out_48_TSTRB,
        stream_out_48_TUSER,
        stream_out_48_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [47:0] stream_in_48_TDATA;
input   stream_in_48_TVALID;
output   stream_in_48_TREADY;
input  [5:0] stream_in_48_TKEEP;
input  [5:0] stream_in_48_TSTRB;
input  [0:0] stream_in_48_TUSER;
input  [0:0] stream_in_48_TLAST;
output  [47:0] stream_out_48_TDATA;
output   stream_out_48_TVALID;
input   stream_out_48_TREADY;
output  [5:0] stream_out_48_TKEEP;
output  [5:0] stream_out_48_TSTRB;
output  [0:0] stream_out_48_TUSER;
output  [0:0] stream_out_48_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

 reg    ap_rst_n_inv;
wire   [9:0] c1_c1;
reg   [9:0] c1_c1_0_data_reg;
reg    c1_c1_0_vld_reg;
reg    c1_c1_0_ack_out;
wire   [9:0] c1_c2;
reg   [9:0] c1_c2_0_data_reg;
reg    c1_c2_0_vld_reg;
reg    c1_c2_0_ack_out;
wire   [9:0] c1_c3;
reg   [9:0] c1_c3_0_data_reg;
reg    c1_c3_0_vld_reg;
reg    c1_c3_0_ack_out;
wire   [9:0] c2_c1;
reg   [9:0] c2_c1_0_data_reg;
reg    c2_c1_0_vld_reg;
reg    c2_c1_0_ack_out;
wire   [9:0] c2_c2;
reg   [9:0] c2_c2_0_data_reg;
reg    c2_c2_0_vld_reg;
reg    c2_c2_0_ack_out;
wire   [9:0] c2_c3;
reg   [9:0] c2_c3_0_data_reg;
reg    c2_c3_0_vld_reg;
reg    c2_c3_0_ack_out;
wire   [9:0] c3_c1;
reg   [9:0] c3_c1_0_data_reg;
reg    c3_c1_0_vld_reg;
reg    c3_c1_0_ack_out;
wire   [9:0] c3_c2;
reg   [9:0] c3_c2_0_data_reg;
reg    c3_c2_0_vld_reg;
reg    c3_c2_0_ack_out;
wire   [9:0] c3_c3;
reg   [9:0] c3_c3_0_data_reg;
reg    c3_c3_0_vld_reg;
reg    c3_c3_0_ack_out;
wire   [9:0] bias_c1;
reg   [9:0] bias_c1_0_data_reg;
reg    bias_c1_0_vld_reg;
reg    bias_c1_0_ack_out;
wire   [9:0] bias_c2;
reg   [9:0] bias_c2_0_data_reg;
reg    bias_c2_0_vld_reg;
reg    bias_c2_0_ack_out;
wire   [9:0] bias_c3;
reg   [9:0] bias_c3_0_data_reg;
reg    bias_c3_0_vld_reg;
reg    bias_c3_0_ack_out;
reg    stream_in_48_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    stream_out_48_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [5:0] curr_pixel_keep_reg_1657;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state7_pp0_stage0_iter6;
wire    regslice_both_stream_out_48_V_data_V_U_apdone_blk;
reg    ap_block_state8_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [5:0] curr_pixel_keep_reg_1657_pp0_iter1_reg;
reg   [5:0] curr_pixel_keep_reg_1657_pp0_iter2_reg;
reg   [5:0] curr_pixel_keep_reg_1657_pp0_iter3_reg;
reg   [5:0] curr_pixel_keep_reg_1657_pp0_iter4_reg;
reg   [5:0] curr_pixel_keep_reg_1657_pp0_iter5_reg;
reg   [5:0] curr_pixel_strb_reg_1662;
reg   [5:0] curr_pixel_strb_reg_1662_pp0_iter1_reg;
reg   [5:0] curr_pixel_strb_reg_1662_pp0_iter2_reg;
reg   [5:0] curr_pixel_strb_reg_1662_pp0_iter3_reg;
reg   [5:0] curr_pixel_strb_reg_1662_pp0_iter4_reg;
reg   [5:0] curr_pixel_strb_reg_1662_pp0_iter5_reg;
reg   [0:0] curr_pixel_user_reg_1667;
reg   [0:0] curr_pixel_user_reg_1667_pp0_iter1_reg;
reg   [0:0] curr_pixel_user_reg_1667_pp0_iter2_reg;
reg   [0:0] curr_pixel_user_reg_1667_pp0_iter3_reg;
reg   [0:0] curr_pixel_user_reg_1667_pp0_iter4_reg;
reg   [0:0] curr_pixel_user_reg_1667_pp0_iter5_reg;
reg   [0:0] curr_pixel_last_reg_1672;
reg   [0:0] curr_pixel_last_reg_1672_pp0_iter1_reg;
reg   [0:0] curr_pixel_last_reg_1672_pp0_iter2_reg;
reg   [0:0] curr_pixel_last_reg_1672_pp0_iter3_reg;
reg   [0:0] curr_pixel_last_reg_1672_pp0_iter4_reg;
reg   [0:0] curr_pixel_last_reg_1672_pp0_iter5_reg;
wire   [7:0] v_p1_fu_287_p1;
reg   [7:0] v_p1_reg_1677;
reg   [7:0] v_p2_reg_1682;
reg   [7:0] v_p2_reg_1682_pp0_iter1_reg;
reg   [7:0] v_p2_reg_1682_pp0_iter2_reg;
reg   [7:0] v_p3_reg_1687;
reg   [7:0] v_p3_reg_1687_pp0_iter1_reg;
reg   [7:0] v_p4_reg_1692;
reg   [7:0] v_p5_reg_1697;
reg   [7:0] v_p5_reg_1697_pp0_iter1_reg;
reg   [7:0] v_p5_reg_1697_pp0_iter2_reg;
reg   [7:0] v_p6_reg_1702;
reg   [7:0] v_p6_reg_1702_pp0_iter1_reg;
wire   [17:0] zext_ln102_fu_341_p1;
wire  signed [17:0] sext_ln102_fu_344_p1;
reg   [9:0] c1_c2_read_reg_1720;
reg   [9:0] c1_c2_read_reg_1720_pp0_iter2_reg;
reg   [9:0] c1_c3_read_reg_1725;
reg   [9:0] bias_c1_read_reg_1730;
reg   [9:0] bias_c1_read_reg_1730_pp0_iter2_reg;
reg   [9:0] bias_c1_read_reg_1730_pp0_iter3_reg;
reg   [9:0] bias_c1_read_reg_1730_pp0_iter4_reg;
wire  signed [17:0] sext_ln103_fu_348_p1;
reg   [9:0] c2_c2_read_reg_1741;
reg   [9:0] c2_c2_read_reg_1741_pp0_iter2_reg;
reg   [9:0] c2_c3_read_reg_1746;
reg   [9:0] bias_c2_read_reg_1751;
reg   [9:0] bias_c2_read_reg_1751_pp0_iter2_reg;
reg   [9:0] bias_c2_read_reg_1751_pp0_iter3_reg;
reg   [9:0] bias_c2_read_reg_1751_pp0_iter4_reg;
wire  signed [17:0] sext_ln104_fu_352_p1;
reg   [9:0] c3_c2_read_reg_1762;
reg   [9:0] c3_c2_read_reg_1762_pp0_iter2_reg;
reg   [9:0] c3_c3_read_reg_1767;
reg   [9:0] bias_c3_read_reg_1772;
reg   [9:0] bias_c3_read_reg_1772_pp0_iter2_reg;
reg   [9:0] bias_c3_read_reg_1772_pp0_iter3_reg;
reg   [9:0] bias_c3_read_reg_1772_pp0_iter4_reg;
wire   [17:0] zext_ln105_fu_356_p1;
wire   [17:0] zext_ln102_2_fu_359_p1;
wire  signed [17:0] sext_ln102_4_fu_362_p1;
wire  signed [17:0] sext_ln103_4_fu_365_p1;
wire  signed [17:0] sext_ln104_4_fu_368_p1;
wire   [17:0] zext_ln105_2_fu_371_p1;
reg   [0:0] tmp_6_reg_1876;
reg   [7:0] trunc_ln_reg_1883;
reg   [0:0] tmp_7_reg_1888;
reg   [0:0] tmp_8_reg_1894;
wire   [0:0] icmp_ln102_fu_527_p2;
reg   [0:0] icmp_ln102_reg_1899;
wire   [0:0] icmp_ln102_1_fu_533_p2;
reg   [0:0] icmp_ln102_1_reg_1905;
reg   [0:0] tmp_10_reg_1911;
reg   [7:0] trunc_ln1_reg_1918;
reg   [0:0] tmp_11_reg_1923;
reg   [0:0] tmp_12_reg_1929;
wire   [0:0] icmp_ln103_fu_599_p2;
reg   [0:0] icmp_ln103_reg_1934;
wire   [0:0] icmp_ln103_1_fu_605_p2;
reg   [0:0] icmp_ln103_1_reg_1940;
reg   [0:0] tmp_14_reg_1946;
reg   [7:0] trunc_ln2_reg_1953;
reg   [0:0] tmp_15_reg_1958;
reg   [0:0] tmp_16_reg_1964;
wire   [0:0] icmp_ln104_fu_671_p2;
reg   [0:0] icmp_ln104_reg_1969;
wire   [0:0] icmp_ln104_1_fu_677_p2;
reg   [0:0] icmp_ln104_1_reg_1975;
reg   [0:0] tmp_18_reg_1981;
reg   [7:0] trunc_ln3_reg_1988;
reg   [0:0] tmp_19_reg_1993;
reg   [0:0] tmp_20_reg_1999;
wire   [0:0] icmp_ln105_fu_732_p2;
reg   [0:0] icmp_ln105_reg_2004;
wire   [0:0] icmp_ln105_1_fu_738_p2;
reg   [0:0] icmp_ln105_1_reg_2010;
reg   [0:0] tmp_22_reg_2016;
reg   [7:0] trunc_ln4_reg_2023;
reg   [0:0] tmp_23_reg_2028;
reg   [0:0] tmp_24_reg_2034;
wire   [0:0] icmp_ln106_fu_793_p2;
reg   [0:0] icmp_ln106_reg_2039;
wire   [0:0] icmp_ln106_1_fu_799_p2;
reg   [0:0] icmp_ln106_1_reg_2045;
reg   [0:0] tmp_26_reg_2051;
reg   [7:0] trunc_ln5_reg_2058;
reg   [0:0] tmp_27_reg_2063;
reg   [0:0] tmp_28_reg_2069;
wire   [0:0] icmp_ln107_fu_854_p2;
reg   [0:0] icmp_ln107_reg_2074;
wire   [0:0] icmp_ln107_1_fu_860_p2;
reg   [0:0] icmp_ln107_1_reg_2080;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_block_pp0_stage0_01001;
wire  signed [9:0] mul_ln102_1_fu_380_p0;
wire  signed [17:0] sext_ln102_1_fu_377_p1;
wire   [7:0] mul_ln102_1_fu_380_p1;
wire   [17:0] zext_ln102_1_fu_374_p1;
wire  signed [17:0] mul_ln102_1_fu_380_p2;
wire  signed [9:0] mul_ln103_1_fu_393_p0;
wire  signed [17:0] sext_ln103_1_fu_390_p1;
wire   [7:0] mul_ln103_1_fu_393_p1;
wire  signed [17:0] mul_ln103_1_fu_393_p2;
wire  signed [9:0] mul_ln104_1_fu_406_p0;
wire  signed [17:0] sext_ln104_1_fu_403_p1;
wire   [7:0] mul_ln104_1_fu_406_p1;
wire  signed [17:0] mul_ln104_1_fu_406_p2;
wire  signed [9:0] mul_ln105_1_fu_419_p0;
wire   [7:0] mul_ln105_1_fu_419_p1;
wire   [17:0] zext_ln105_1_fu_416_p1;
wire  signed [17:0] mul_ln105_1_fu_419_p2;
wire  signed [9:0] mul_ln106_1_fu_429_p0;
wire   [7:0] mul_ln106_1_fu_429_p1;
wire  signed [17:0] mul_ln106_1_fu_429_p2;
wire  signed [9:0] mul_ln107_1_fu_439_p0;
wire   [7:0] mul_ln107_1_fu_439_p1;
wire  signed [17:0] mul_ln107_1_fu_439_p2;
wire  signed [18:0] grp_fu_1549_p3;
wire  signed [18:0] grp_fu_1558_p3;
wire  signed [18:0] grp_fu_1567_p3;
wire  signed [18:0] grp_fu_1576_p3;
wire  signed [18:0] grp_fu_1585_p3;
wire  signed [18:0] grp_fu_1594_p3;
wire   [17:0] shl_ln_fu_467_p3;
wire  signed [19:0] sext_ln102_7_fu_474_p1;
wire  signed [19:0] grp_fu_1603_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln102_2_fu_478_p2;
wire   [3:0] tmp_fu_517_p4;
wire   [17:0] shl_ln1_fu_539_p3;
wire  signed [19:0] sext_ln103_7_fu_546_p1;
wire  signed [19:0] grp_fu_1612_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln103_2_fu_550_p2;
wire   [3:0] tmp_1_fu_589_p4;
wire   [17:0] shl_ln2_fu_611_p3;
wire  signed [19:0] sext_ln104_7_fu_618_p1;
wire  signed [19:0] grp_fu_1621_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln104_2_fu_622_p2;
wire   [3:0] tmp_2_fu_661_p4;
wire  signed [19:0] grp_fu_1630_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln105_2_fu_683_p2;
wire   [3:0] tmp_3_fu_722_p4;
wire  signed [19:0] grp_fu_1639_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln106_2_fu_744_p2;
wire   [3:0] tmp_4_fu_783_p4;
wire  signed [19:0] grp_fu_1648_p3;
(* use_dsp48 = "no" *) wire   [19:0] add_ln107_2_fu_805_p2;
wire   [3:0] tmp_5_fu_844_p4;
wire   [7:0] zext_ln102_3_fu_866_p1;
wire   [7:0] add_ln102_3_fu_869_p2;
wire   [0:0] tmp_9_fu_878_p3;
wire   [0:0] select_ln102_fu_892_p3;
wire   [0:0] select_ln102_3_fu_898_p3;
wire   [0:0] or_ln102_fu_904_p2;
wire   [0:0] xor_ln102_2_fu_886_p2;
wire   [0:0] and_ln102_fu_915_p2;
wire   [0:0] and_ln102_1_fu_920_p2;
wire   [6:0] trunc_ln102_fu_874_p1;
wire   [6:0] select_ln102_1_fu_931_p3;
wire   [0:0] xor_ln102_1_fu_925_p2;
wire   [0:0] and_ln102_2_fu_943_p2;
wire   [0:0] xor_ln102_fu_909_p2;
wire   [7:0] zext_ln102_4_fu_939_p1;
wire   [7:0] select_ln102_4_fu_954_p3;
wire   [0:0] or_ln102_1_fu_948_p2;
wire   [7:0] select_ln102_2_fu_961_p3;
wire   [7:0] zext_ln103_fu_977_p1;
wire   [7:0] add_ln103_3_fu_980_p2;
wire   [0:0] tmp_13_fu_989_p3;
wire   [0:0] select_ln103_fu_1003_p3;
wire   [0:0] select_ln103_3_fu_1009_p3;
wire   [0:0] or_ln103_fu_1015_p2;
wire   [0:0] xor_ln103_2_fu_997_p2;
wire   [0:0] and_ln103_fu_1026_p2;
wire   [0:0] and_ln103_1_fu_1031_p2;
wire   [6:0] trunc_ln103_fu_985_p1;
wire   [6:0] select_ln103_1_fu_1042_p3;
wire   [0:0] xor_ln103_1_fu_1036_p2;
wire   [0:0] and_ln103_2_fu_1054_p2;
wire   [0:0] xor_ln103_fu_1020_p2;
wire   [7:0] zext_ln103_1_fu_1050_p1;
wire   [7:0] select_ln103_4_fu_1065_p3;
wire   [0:0] or_ln103_1_fu_1059_p2;
wire   [7:0] select_ln103_2_fu_1072_p3;
wire   [7:0] zext_ln104_fu_1088_p1;
wire   [7:0] add_ln104_3_fu_1091_p2;
wire   [0:0] tmp_17_fu_1100_p3;
wire   [0:0] select_ln104_fu_1114_p3;
wire   [0:0] select_ln104_3_fu_1120_p3;
wire   [0:0] or_ln104_fu_1126_p2;
wire   [0:0] xor_ln104_2_fu_1108_p2;
wire   [0:0] and_ln104_fu_1137_p2;
wire   [0:0] and_ln104_1_fu_1142_p2;
wire   [6:0] trunc_ln104_fu_1096_p1;
wire   [6:0] select_ln104_1_fu_1153_p3;
wire   [0:0] xor_ln104_1_fu_1147_p2;
wire   [0:0] and_ln104_2_fu_1165_p2;
wire   [0:0] xor_ln104_fu_1131_p2;
wire   [7:0] zext_ln104_1_fu_1161_p1;
wire   [7:0] select_ln104_4_fu_1176_p3;
wire   [0:0] or_ln104_1_fu_1170_p2;
wire   [7:0] select_ln104_2_fu_1183_p3;
wire   [7:0] zext_ln105_3_fu_1199_p1;
wire   [7:0] add_ln105_3_fu_1202_p2;
wire   [0:0] tmp_21_fu_1211_p3;
wire   [0:0] select_ln105_fu_1225_p3;
wire   [0:0] select_ln105_3_fu_1231_p3;
wire   [0:0] or_ln105_fu_1237_p2;
wire   [0:0] xor_ln105_2_fu_1219_p2;
wire   [0:0] and_ln105_fu_1248_p2;
wire   [0:0] and_ln105_1_fu_1253_p2;
wire   [6:0] trunc_ln105_fu_1207_p1;
wire   [6:0] select_ln105_1_fu_1264_p3;
wire   [0:0] xor_ln105_1_fu_1258_p2;
wire   [0:0] and_ln105_2_fu_1276_p2;
wire   [0:0] xor_ln105_fu_1242_p2;
wire   [7:0] zext_ln105_4_fu_1272_p1;
wire   [7:0] select_ln105_4_fu_1287_p3;
wire   [0:0] or_ln105_1_fu_1281_p2;
wire   [7:0] select_ln105_2_fu_1294_p3;
wire   [7:0] zext_ln106_fu_1310_p1;
wire   [7:0] add_ln106_3_fu_1313_p2;
wire   [0:0] tmp_25_fu_1322_p3;
wire   [0:0] select_ln106_fu_1336_p3;
wire   [0:0] select_ln106_3_fu_1342_p3;
wire   [0:0] or_ln106_fu_1348_p2;
wire   [0:0] xor_ln106_2_fu_1330_p2;
wire   [0:0] and_ln106_fu_1359_p2;
wire   [0:0] and_ln106_1_fu_1364_p2;
wire   [6:0] trunc_ln106_fu_1318_p1;
wire   [6:0] select_ln106_1_fu_1375_p3;
wire   [0:0] xor_ln106_1_fu_1369_p2;
wire   [0:0] and_ln106_2_fu_1387_p2;
wire   [0:0] xor_ln106_fu_1353_p2;
wire   [7:0] zext_ln106_1_fu_1383_p1;
wire   [7:0] select_ln106_4_fu_1398_p3;
wire   [0:0] or_ln106_1_fu_1392_p2;
wire   [7:0] select_ln106_2_fu_1405_p3;
wire   [7:0] zext_ln107_fu_1421_p1;
wire   [7:0] add_ln107_3_fu_1424_p2;
wire   [0:0] tmp_29_fu_1433_p3;
wire   [0:0] select_ln107_fu_1447_p3;
wire   [0:0] select_ln107_3_fu_1453_p3;
wire   [0:0] or_ln107_fu_1459_p2;
wire   [0:0] xor_ln107_2_fu_1441_p2;
wire   [0:0] and_ln107_fu_1470_p2;
wire   [0:0] and_ln107_1_fu_1475_p2;
wire   [6:0] trunc_ln107_fu_1429_p1;
wire   [6:0] select_ln107_1_fu_1486_p3;
wire   [0:0] xor_ln107_1_fu_1480_p2;
wire   [0:0] and_ln107_2_fu_1498_p2;
wire   [0:0] xor_ln107_fu_1464_p2;
wire   [7:0] zext_ln107_1_fu_1494_p1;
wire   [7:0] select_ln107_4_fu_1509_p3;
wire   [0:0] or_ln107_1_fu_1503_p2;
wire   [7:0] select_ln107_2_fu_1516_p3;
wire   [7:0] out6_fu_1524_p3;
wire   [7:0] out5_fu_1413_p3;
wire   [7:0] out4_fu_1302_p3;
wire   [7:0] out3_fu_1191_p3;
wire   [7:0] out2_fu_1080_p3;
wire   [7:0] out1_fu_969_p3;
wire  signed [9:0] grp_fu_1549_p0;
wire   [7:0] grp_fu_1549_p1;
wire  signed [9:0] grp_fu_1558_p0;
wire   [7:0] grp_fu_1558_p1;
wire  signed [9:0] grp_fu_1567_p0;
wire   [7:0] grp_fu_1567_p1;
wire  signed [9:0] grp_fu_1576_p0;
wire   [7:0] grp_fu_1576_p1;
wire  signed [9:0] grp_fu_1585_p0;
wire   [7:0] grp_fu_1585_p1;
wire  signed [9:0] grp_fu_1594_p0;
wire   [7:0] grp_fu_1594_p1;
wire  signed [9:0] grp_fu_1603_p0;
wire   [7:0] grp_fu_1603_p1;
wire  signed [9:0] grp_fu_1612_p0;
wire   [7:0] grp_fu_1612_p1;
wire  signed [9:0] grp_fu_1621_p0;
wire   [7:0] grp_fu_1621_p1;
wire  signed [9:0] grp_fu_1630_p0;
wire   [7:0] grp_fu_1630_p1;
wire  signed [9:0] grp_fu_1639_p0;
wire   [7:0] grp_fu_1639_p1;
wire  signed [9:0] grp_fu_1648_p0;
wire   [7:0] grp_fu_1648_p1;
reg    grp_fu_1549_ce;
reg    grp_fu_1558_ce;
reg    grp_fu_1567_ce;
reg    grp_fu_1576_ce;
reg    grp_fu_1585_ce;
reg    grp_fu_1594_ce;
reg    grp_fu_1603_ce;
reg    grp_fu_1612_ce;
reg    grp_fu_1621_ce;
reg    grp_fu_1630_ce;
reg    grp_fu_1639_ce;
reg    grp_fu_1648_ce;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_stream_in_48_V_data_V_U_apdone_blk;
wire   [47:0] stream_in_48_TDATA_int_regslice;
wire    stream_in_48_TVALID_int_regslice;
reg    stream_in_48_TREADY_int_regslice;
wire    regslice_both_stream_in_48_V_data_V_U_ack_in;
wire    regslice_both_stream_in_48_V_keep_V_U_apdone_blk;
wire   [5:0] stream_in_48_TKEEP_int_regslice;
wire    regslice_both_stream_in_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_in_48_V_keep_V_U_ack_in;
wire    regslice_both_stream_in_48_V_strb_V_U_apdone_blk;
wire   [5:0] stream_in_48_TSTRB_int_regslice;
wire    regslice_both_stream_in_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_in_48_V_strb_V_U_ack_in;
wire    regslice_both_stream_in_48_V_user_V_U_apdone_blk;
wire   [0:0] stream_in_48_TUSER_int_regslice;
wire    regslice_both_stream_in_48_V_user_V_U_vld_out;
wire    regslice_both_stream_in_48_V_user_V_U_ack_in;
wire    regslice_both_stream_in_48_V_last_V_U_apdone_blk;
wire   [0:0] stream_in_48_TLAST_int_regslice;
wire    regslice_both_stream_in_48_V_last_V_U_vld_out;
wire    regslice_both_stream_in_48_V_last_V_U_ack_in;
wire   [47:0] stream_out_48_TDATA_int_regslice;
reg    stream_out_48_TVALID_int_regslice;
wire    stream_out_48_TREADY_int_regslice;
wire    regslice_both_stream_out_48_V_data_V_U_vld_out;
wire    regslice_both_stream_out_48_V_keep_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_out_48_V_strb_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_out_48_V_user_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_user_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_user_V_U_vld_out;
wire    regslice_both_stream_out_48_V_last_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_last_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 c1_c1_0_data_reg = 10'd0;
#0 c1_c1_0_vld_reg = 1'b0;
#0 c1_c2_0_data_reg = 10'd0;
#0 c1_c2_0_vld_reg = 1'b0;
#0 c1_c3_0_data_reg = 10'd0;
#0 c1_c3_0_vld_reg = 1'b0;
#0 c2_c1_0_data_reg = 10'd0;
#0 c2_c1_0_vld_reg = 1'b0;
#0 c2_c2_0_data_reg = 10'd0;
#0 c2_c2_0_vld_reg = 1'b0;
#0 c2_c3_0_data_reg = 10'd0;
#0 c2_c3_0_vld_reg = 1'b0;
#0 c3_c1_0_data_reg = 10'd0;
#0 c3_c1_0_vld_reg = 1'b0;
#0 c3_c2_0_data_reg = 10'd0;
#0 c3_c2_0_vld_reg = 1'b0;
#0 c3_c3_0_data_reg = 10'd0;
#0 c3_c3_0_vld_reg = 1'b0;
#0 bias_c1_0_data_reg = 10'd0;
#0 bias_c1_0_vld_reg = 1'b0;
#0 bias_c2_0_data_reg = 10'd0;
#0 bias_c2_0_vld_reg = 1'b0;
#0 bias_c3_0_data_reg = 10'd0;
#0 bias_c3_0_vld_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

color_convert_2_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .c1_c1(c1_c1),
    .c1_c2(c1_c2),
    .c1_c3(c1_c3),
    .c2_c1(c2_c1),
    .c2_c2(c2_c2),
    .c2_c3(c2_c3),
    .c3_c1(c3_c1),
    .c3_c2(c3_c2),
    .c3_c3(c3_c3),
    .bias_c1(bias_c1),
    .bias_c2(bias_c2),
    .bias_c3(bias_c3)
);

color_convert_2_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U1(
    .din0(mul_ln102_1_fu_380_p0),
    .din1(mul_ln102_1_fu_380_p1),
    .dout(mul_ln102_1_fu_380_p2)
);

color_convert_2_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U2(
    .din0(mul_ln103_1_fu_393_p0),
    .din1(mul_ln103_1_fu_393_p1),
    .dout(mul_ln103_1_fu_393_p2)
);

color_convert_2_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U3(
    .din0(mul_ln104_1_fu_406_p0),
    .din1(mul_ln104_1_fu_406_p1),
    .dout(mul_ln104_1_fu_406_p2)
);

color_convert_2_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U4(
    .din0(mul_ln105_1_fu_419_p0),
    .din1(mul_ln105_1_fu_419_p1),
    .dout(mul_ln105_1_fu_419_p2)
);

color_convert_2_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U5(
    .din0(mul_ln106_1_fu_429_p0),
    .din1(mul_ln106_1_fu_429_p1),
    .dout(mul_ln106_1_fu_429_p2)
);

color_convert_2_mul_10s_8ns_18_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 18 ))
mul_10s_8ns_18_1_1_U6(
    .din0(mul_ln107_1_fu_439_p0),
    .din1(mul_ln107_1_fu_439_p1),
    .dout(mul_ln107_1_fu_439_p2)
);

color_convert_2_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1549_p0),
    .din1(grp_fu_1549_p1),
    .din2(mul_ln102_1_fu_380_p2),
    .ce(grp_fu_1549_ce),
    .dout(grp_fu_1549_p3)
);

color_convert_2_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1558_p0),
    .din1(grp_fu_1558_p1),
    .din2(mul_ln103_1_fu_393_p2),
    .ce(grp_fu_1558_ce),
    .dout(grp_fu_1558_p3)
);

color_convert_2_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1567_p0),
    .din1(grp_fu_1567_p1),
    .din2(mul_ln104_1_fu_406_p2),
    .ce(grp_fu_1567_ce),
    .dout(grp_fu_1567_p3)
);

color_convert_2_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1576_p0),
    .din1(grp_fu_1576_p1),
    .din2(mul_ln105_1_fu_419_p2),
    .ce(grp_fu_1576_ce),
    .dout(grp_fu_1576_p3)
);

color_convert_2_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1585_p0),
    .din1(grp_fu_1585_p1),
    .din2(mul_ln106_1_fu_429_p2),
    .ce(grp_fu_1585_ce),
    .dout(grp_fu_1585_p3)
);

color_convert_2_mac_muladd_10s_8ns_18s_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 19 ))
mac_muladd_10s_8ns_18s_19_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1594_p0),
    .din1(grp_fu_1594_p1),
    .din2(mul_ln107_1_fu_439_p2),
    .ce(grp_fu_1594_ce),
    .dout(grp_fu_1594_p3)
);

color_convert_2_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1603_p0),
    .din1(grp_fu_1603_p1),
    .din2(grp_fu_1549_p3),
    .ce(grp_fu_1603_ce),
    .dout(grp_fu_1603_p3)
);

color_convert_2_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1612_p0),
    .din1(grp_fu_1612_p1),
    .din2(grp_fu_1558_p3),
    .ce(grp_fu_1612_ce),
    .dout(grp_fu_1612_p3)
);

color_convert_2_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1621_p0),
    .din1(grp_fu_1621_p1),
    .din2(grp_fu_1567_p3),
    .ce(grp_fu_1621_ce),
    .dout(grp_fu_1621_p3)
);

color_convert_2_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1630_p0),
    .din1(grp_fu_1630_p1),
    .din2(grp_fu_1576_p3),
    .ce(grp_fu_1630_ce),
    .dout(grp_fu_1630_p3)
);

color_convert_2_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1639_p0),
    .din1(grp_fu_1639_p1),
    .din2(grp_fu_1585_p3),
    .ce(grp_fu_1639_ce),
    .dout(grp_fu_1639_p3)
);

color_convert_2_mac_muladd_10s_8ns_19s_20_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 20 ))
mac_muladd_10s_8ns_19s_20_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_1648_p0),
    .din1(grp_fu_1648_p1),
    .din2(grp_fu_1594_p3),
    .ce(grp_fu_1648_ce),
    .dout(grp_fu_1648_p3)
);

color_convert_2_regslice_both #(
    .DataWidth( 48 ))
regslice_both_stream_in_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TDATA),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_data_V_U_ack_in),
    .data_out(stream_in_48_TDATA_int_regslice),
    .vld_out(stream_in_48_TVALID_int_regslice),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_data_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 6 ))
regslice_both_stream_in_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TKEEP),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_keep_V_U_ack_in),
    .data_out(stream_in_48_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_keep_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_keep_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 6 ))
regslice_both_stream_in_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TSTRB),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_strb_V_U_ack_in),
    .data_out(stream_in_48_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_strb_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_strb_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TUSER),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_user_V_U_ack_in),
    .data_out(stream_in_48_TUSER_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_user_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_user_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TLAST),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_last_V_U_ack_in),
    .data_out(stream_in_48_TLAST_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_last_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_last_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 48 ))
regslice_both_stream_out_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_out_48_TDATA_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(stream_out_48_TREADY_int_regslice),
    .data_out(stream_out_48_TDATA),
    .vld_out(regslice_both_stream_out_48_V_data_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_data_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 6 ))
regslice_both_stream_out_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_keep_reg_1657_pp0_iter5_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy),
    .data_out(stream_out_48_TKEEP),
    .vld_out(regslice_both_stream_out_48_V_keep_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_keep_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 6 ))
regslice_both_stream_out_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_strb_reg_1662_pp0_iter5_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy),
    .data_out(stream_out_48_TSTRB),
    .vld_out(regslice_both_stream_out_48_V_strb_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_strb_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_user_reg_1667_pp0_iter5_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_user_V_U_ack_in_dummy),
    .data_out(stream_out_48_TUSER),
    .vld_out(regslice_both_stream_out_48_V_user_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_user_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_last_reg_1672_pp0_iter5_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_last_V_U_ack_in_dummy),
    .data_out(stream_out_48_TLAST),
    .vld_out(regslice_both_stream_out_48_V_last_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c1_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (bias_c1_0_vld_reg == 1'b0)))) begin
        bias_c1_0_data_reg <= bias_c1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_c1_read_reg_1730 <= bias_c1_0_data_reg;
        bias_c2_read_reg_1751 <= bias_c2_0_data_reg;
        bias_c3_read_reg_1772 <= bias_c3_0_data_reg;
        c1_c2_read_reg_1720 <= c1_c2_0_data_reg;
        c1_c3_read_reg_1725 <= c1_c3_0_data_reg;
        c2_c2_read_reg_1741 <= c2_c2_0_data_reg;
        c2_c3_read_reg_1746 <= c2_c3_0_data_reg;
        c3_c2_read_reg_1762 <= c3_c2_0_data_reg;
        c3_c3_read_reg_1767 <= c3_c3_0_data_reg;
        curr_pixel_keep_reg_1657 <= stream_in_48_TKEEP_int_regslice;
        curr_pixel_keep_reg_1657_pp0_iter1_reg <= curr_pixel_keep_reg_1657;
        curr_pixel_last_reg_1672 <= stream_in_48_TLAST_int_regslice;
        curr_pixel_last_reg_1672_pp0_iter1_reg <= curr_pixel_last_reg_1672;
        curr_pixel_strb_reg_1662 <= stream_in_48_TSTRB_int_regslice;
        curr_pixel_strb_reg_1662_pp0_iter1_reg <= curr_pixel_strb_reg_1662;
        curr_pixel_user_reg_1667 <= stream_in_48_TUSER_int_regslice;
        curr_pixel_user_reg_1667_pp0_iter1_reg <= curr_pixel_user_reg_1667;
        v_p1_reg_1677 <= v_p1_fu_287_p1;
        v_p2_reg_1682 <= {{stream_in_48_TDATA_int_regslice[15:8]}};
        v_p2_reg_1682_pp0_iter1_reg <= v_p2_reg_1682;
        v_p3_reg_1687 <= {{stream_in_48_TDATA_int_regslice[23:16]}};
        v_p3_reg_1687_pp0_iter1_reg <= v_p3_reg_1687;
        v_p4_reg_1692 <= {{stream_in_48_TDATA_int_regslice[31:24]}};
        v_p5_reg_1697 <= {{stream_in_48_TDATA_int_regslice[39:32]}};
        v_p5_reg_1697_pp0_iter1_reg <= v_p5_reg_1697;
        v_p6_reg_1702 <= {{stream_in_48_TDATA_int_regslice[47:40]}};
        v_p6_reg_1702_pp0_iter1_reg <= v_p6_reg_1702;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bias_c1_read_reg_1730_pp0_iter2_reg <= bias_c1_read_reg_1730;
        bias_c1_read_reg_1730_pp0_iter3_reg <= bias_c1_read_reg_1730_pp0_iter2_reg;
        bias_c1_read_reg_1730_pp0_iter4_reg <= bias_c1_read_reg_1730_pp0_iter3_reg;
        bias_c2_read_reg_1751_pp0_iter2_reg <= bias_c2_read_reg_1751;
        bias_c2_read_reg_1751_pp0_iter3_reg <= bias_c2_read_reg_1751_pp0_iter2_reg;
        bias_c2_read_reg_1751_pp0_iter4_reg <= bias_c2_read_reg_1751_pp0_iter3_reg;
        bias_c3_read_reg_1772_pp0_iter2_reg <= bias_c3_read_reg_1772;
        bias_c3_read_reg_1772_pp0_iter3_reg <= bias_c3_read_reg_1772_pp0_iter2_reg;
        bias_c3_read_reg_1772_pp0_iter4_reg <= bias_c3_read_reg_1772_pp0_iter3_reg;
        c1_c2_read_reg_1720_pp0_iter2_reg <= c1_c2_read_reg_1720;
        c2_c2_read_reg_1741_pp0_iter2_reg <= c2_c2_read_reg_1741;
        c3_c2_read_reg_1762_pp0_iter2_reg <= c3_c2_read_reg_1762;
        curr_pixel_keep_reg_1657_pp0_iter2_reg <= curr_pixel_keep_reg_1657_pp0_iter1_reg;
        curr_pixel_keep_reg_1657_pp0_iter3_reg <= curr_pixel_keep_reg_1657_pp0_iter2_reg;
        curr_pixel_keep_reg_1657_pp0_iter4_reg <= curr_pixel_keep_reg_1657_pp0_iter3_reg;
        curr_pixel_keep_reg_1657_pp0_iter5_reg <= curr_pixel_keep_reg_1657_pp0_iter4_reg;
        curr_pixel_last_reg_1672_pp0_iter2_reg <= curr_pixel_last_reg_1672_pp0_iter1_reg;
        curr_pixel_last_reg_1672_pp0_iter3_reg <= curr_pixel_last_reg_1672_pp0_iter2_reg;
        curr_pixel_last_reg_1672_pp0_iter4_reg <= curr_pixel_last_reg_1672_pp0_iter3_reg;
        curr_pixel_last_reg_1672_pp0_iter5_reg <= curr_pixel_last_reg_1672_pp0_iter4_reg;
        curr_pixel_strb_reg_1662_pp0_iter2_reg <= curr_pixel_strb_reg_1662_pp0_iter1_reg;
        curr_pixel_strb_reg_1662_pp0_iter3_reg <= curr_pixel_strb_reg_1662_pp0_iter2_reg;
        curr_pixel_strb_reg_1662_pp0_iter4_reg <= curr_pixel_strb_reg_1662_pp0_iter3_reg;
        curr_pixel_strb_reg_1662_pp0_iter5_reg <= curr_pixel_strb_reg_1662_pp0_iter4_reg;
        curr_pixel_user_reg_1667_pp0_iter2_reg <= curr_pixel_user_reg_1667_pp0_iter1_reg;
        curr_pixel_user_reg_1667_pp0_iter3_reg <= curr_pixel_user_reg_1667_pp0_iter2_reg;
        curr_pixel_user_reg_1667_pp0_iter4_reg <= curr_pixel_user_reg_1667_pp0_iter3_reg;
        curr_pixel_user_reg_1667_pp0_iter5_reg <= curr_pixel_user_reg_1667_pp0_iter4_reg;
        icmp_ln102_1_reg_1905 <= icmp_ln102_1_fu_533_p2;
        icmp_ln102_reg_1899 <= icmp_ln102_fu_527_p2;
        icmp_ln103_1_reg_1940 <= icmp_ln103_1_fu_605_p2;
        icmp_ln103_reg_1934 <= icmp_ln103_fu_599_p2;
        icmp_ln104_1_reg_1975 <= icmp_ln104_1_fu_677_p2;
        icmp_ln104_reg_1969 <= icmp_ln104_fu_671_p2;
        icmp_ln105_1_reg_2010 <= icmp_ln105_1_fu_738_p2;
        icmp_ln105_reg_2004 <= icmp_ln105_fu_732_p2;
        icmp_ln106_1_reg_2045 <= icmp_ln106_1_fu_799_p2;
        icmp_ln106_reg_2039 <= icmp_ln106_fu_793_p2;
        icmp_ln107_1_reg_2080 <= icmp_ln107_1_fu_860_p2;
        icmp_ln107_reg_2074 <= icmp_ln107_fu_854_p2;
        tmp_10_reg_1911 <= add_ln103_2_fu_550_p2[32'd19];
        tmp_11_reg_1923 <= add_ln103_2_fu_550_p2[32'd15];
        tmp_12_reg_1929 <= add_ln103_2_fu_550_p2[32'd7];
        tmp_14_reg_1946 <= add_ln104_2_fu_622_p2[32'd19];
        tmp_15_reg_1958 <= add_ln104_2_fu_622_p2[32'd15];
        tmp_16_reg_1964 <= add_ln104_2_fu_622_p2[32'd7];
        tmp_18_reg_1981 <= add_ln105_2_fu_683_p2[32'd19];
        tmp_19_reg_1993 <= add_ln105_2_fu_683_p2[32'd15];
        tmp_20_reg_1999 <= add_ln105_2_fu_683_p2[32'd7];
        tmp_22_reg_2016 <= add_ln106_2_fu_744_p2[32'd19];
        tmp_23_reg_2028 <= add_ln106_2_fu_744_p2[32'd15];
        tmp_24_reg_2034 <= add_ln106_2_fu_744_p2[32'd7];
        tmp_26_reg_2051 <= add_ln107_2_fu_805_p2[32'd19];
        tmp_27_reg_2063 <= add_ln107_2_fu_805_p2[32'd15];
        tmp_28_reg_2069 <= add_ln107_2_fu_805_p2[32'd7];
        tmp_6_reg_1876 <= add_ln102_2_fu_478_p2[32'd19];
        tmp_7_reg_1888 <= add_ln102_2_fu_478_p2[32'd15];
        tmp_8_reg_1894 <= add_ln102_2_fu_478_p2[32'd7];
        trunc_ln1_reg_1918 <= {{add_ln103_2_fu_550_p2[15:8]}};
        trunc_ln2_reg_1953 <= {{add_ln104_2_fu_622_p2[15:8]}};
        trunc_ln3_reg_1988 <= {{add_ln105_2_fu_683_p2[15:8]}};
        trunc_ln4_reg_2023 <= {{add_ln106_2_fu_744_p2[15:8]}};
        trunc_ln5_reg_2058 <= {{add_ln107_2_fu_805_p2[15:8]}};
        trunc_ln_reg_1883 <= {{add_ln102_2_fu_478_p2[15:8]}};
        v_p2_reg_1682_pp0_iter2_reg <= v_p2_reg_1682_pp0_iter1_reg;
        v_p5_reg_1697_pp0_iter2_reg <= v_p5_reg_1697_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c2_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c2_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (bias_c2_0_vld_reg == 1'b0)))) begin
        bias_c2_0_data_reg <= bias_c2;
    end
end

always @ (posedge ap_clk) begin
    if ((((bias_c3_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (bias_c3_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (bias_c3_0_vld_reg == 1'b0)))) begin
        bias_c3_0_data_reg <= bias_c3;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c1_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (c1_c1_0_vld_reg == 1'b0)))) begin
        c1_c1_0_data_reg <= c1_c1;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c2_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c2_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (c1_c2_0_vld_reg == 1'b0)))) begin
        c1_c2_0_data_reg <= c1_c2;
    end
end

always @ (posedge ap_clk) begin
    if ((((c1_c3_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c1_c3_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (c1_c3_0_vld_reg == 1'b0)))) begin
        c1_c3_0_data_reg <= c1_c3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == 1'b1) & (c2_c1_0_vld_reg == 1'b0)) | ((1'b1 == 1'b1) & (c2_c1_0_vld_reg == 1'b1) & (c2_c1_0_ack_out == 1'b1)))) begin
        c2_c1_0_data_reg <= c2_c1;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c2_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c2_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (c2_c2_0_vld_reg == 1'b0)))) begin
        c2_c2_0_data_reg <= c2_c2;
    end
end

always @ (posedge ap_clk) begin
    if ((((c2_c3_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c2_c3_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (c2_c3_0_vld_reg == 1'b0)))) begin
        c2_c3_0_data_reg <= c2_c3;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c1_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c1_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (c3_c1_0_vld_reg == 1'b0)))) begin
        c3_c1_0_data_reg <= c3_c1;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c2_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c2_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (c3_c2_0_vld_reg == 1'b0)))) begin
        c3_c2_0_data_reg <= c3_c2;
    end
end

always @ (posedge ap_clk) begin
    if ((((c3_c3_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c3_c3_0_vld_reg == 1'b1)) | ((1'b1 == 1'b1) & (c3_c3_0_vld_reg == 1'b0)))) begin
        c3_c3_0_data_reg <= c3_c3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bias_c1_0_ack_out = 1'b1;
    end else begin
        bias_c1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bias_c2_0_ack_out = 1'b1;
    end else begin
        bias_c2_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        bias_c3_0_ack_out = 1'b1;
    end else begin
        bias_c3_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c1_c1_0_ack_out = 1'b1;
    end else begin
        c1_c1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c1_c2_0_ack_out = 1'b1;
    end else begin
        c1_c2_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c1_c3_0_ack_out = 1'b1;
    end else begin
        c1_c3_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c2_c1_0_ack_out = 1'b1;
    end else begin
        c2_c1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c2_c2_0_ack_out = 1'b1;
    end else begin
        c2_c2_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c2_c3_0_ack_out = 1'b1;
    end else begin
        c2_c3_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c3_c1_0_ack_out = 1'b1;
    end else begin
        c3_c1_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c3_c2_0_ack_out = 1'b1;
    end else begin
        c3_c2_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        c3_c3_0_ack_out = 1'b1;
    end else begin
        c3_c3_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1549_ce = 1'b1;
    end else begin
        grp_fu_1549_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1558_ce = 1'b1;
    end else begin
        grp_fu_1558_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1567_ce = 1'b1;
    end else begin
        grp_fu_1567_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1576_ce = 1'b1;
    end else begin
        grp_fu_1576_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1585_ce = 1'b1;
    end else begin
        grp_fu_1585_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1594_ce = 1'b1;
    end else begin
        grp_fu_1594_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1603_ce = 1'b1;
    end else begin
        grp_fu_1603_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1612_ce = 1'b1;
    end else begin
        grp_fu_1612_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1621_ce = 1'b1;
    end else begin
        grp_fu_1621_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1630_ce = 1'b1;
    end else begin
        grp_fu_1630_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1639_ce = 1'b1;
    end else begin
        grp_fu_1639_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_1648_ce = 1'b1;
    end else begin
        grp_fu_1648_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_48_TDATA_blk_n = stream_in_48_TVALID_int_regslice;
    end else begin
        stream_in_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_48_TREADY_int_regslice = 1'b1;
    end else begin
        stream_in_48_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        stream_out_48_TDATA_blk_n = stream_out_48_TREADY_int_regslice;
    end else begin
        stream_out_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_out_48_TVALID_int_regslice = 1'b1;
    end else begin
        stream_out_48_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_2_fu_478_p2 = ($signed(sext_ln102_7_fu_474_p1) + $signed(grp_fu_1603_p3));

assign add_ln102_3_fu_869_p2 = (zext_ln102_3_fu_866_p1 + trunc_ln_reg_1883);

assign add_ln103_2_fu_550_p2 = ($signed(sext_ln103_7_fu_546_p1) + $signed(grp_fu_1612_p3));

assign add_ln103_3_fu_980_p2 = (zext_ln103_fu_977_p1 + trunc_ln1_reg_1918);

assign add_ln104_2_fu_622_p2 = ($signed(sext_ln104_7_fu_618_p1) + $signed(grp_fu_1621_p3));

assign add_ln104_3_fu_1091_p2 = (zext_ln104_fu_1088_p1 + trunc_ln2_reg_1953);

assign add_ln105_2_fu_683_p2 = ($signed(sext_ln102_7_fu_474_p1) + $signed(grp_fu_1630_p3));

assign add_ln105_3_fu_1202_p2 = (zext_ln105_3_fu_1199_p1 + trunc_ln3_reg_1988);

assign add_ln106_2_fu_744_p2 = ($signed(sext_ln103_7_fu_546_p1) + $signed(grp_fu_1639_p3));

assign add_ln106_3_fu_1313_p2 = (zext_ln106_fu_1310_p1 + trunc_ln4_reg_2023);

assign add_ln107_2_fu_805_p2 = ($signed(sext_ln104_7_fu_618_p1) + $signed(grp_fu_1648_p3));

assign add_ln107_3_fu_1424_p2 = (zext_ln107_fu_1421_p1 + trunc_ln5_reg_2058);

assign and_ln102_1_fu_920_p2 = (tmp_7_reg_1888 & and_ln102_fu_915_p2);

assign and_ln102_2_fu_943_p2 = (xor_ln102_1_fu_925_p2 & tmp_6_reg_1876);

assign and_ln102_fu_915_p2 = (xor_ln102_2_fu_886_p2 & icmp_ln102_reg_1899);

assign and_ln103_1_fu_1031_p2 = (tmp_11_reg_1923 & and_ln103_fu_1026_p2);

assign and_ln103_2_fu_1054_p2 = (xor_ln103_1_fu_1036_p2 & tmp_10_reg_1911);

assign and_ln103_fu_1026_p2 = (xor_ln103_2_fu_997_p2 & icmp_ln103_reg_1934);

assign and_ln104_1_fu_1142_p2 = (tmp_15_reg_1958 & and_ln104_fu_1137_p2);

assign and_ln104_2_fu_1165_p2 = (xor_ln104_1_fu_1147_p2 & tmp_14_reg_1946);

assign and_ln104_fu_1137_p2 = (xor_ln104_2_fu_1108_p2 & icmp_ln104_reg_1969);

assign and_ln105_1_fu_1253_p2 = (tmp_19_reg_1993 & and_ln105_fu_1248_p2);

assign and_ln105_2_fu_1276_p2 = (xor_ln105_1_fu_1258_p2 & tmp_18_reg_1981);

assign and_ln105_fu_1248_p2 = (xor_ln105_2_fu_1219_p2 & icmp_ln105_reg_2004);

assign and_ln106_1_fu_1364_p2 = (tmp_23_reg_2028 & and_ln106_fu_1359_p2);

assign and_ln106_2_fu_1387_p2 = (xor_ln106_1_fu_1369_p2 & tmp_22_reg_2016);

assign and_ln106_fu_1359_p2 = (xor_ln106_2_fu_1330_p2 & icmp_ln106_reg_2039);

assign and_ln107_1_fu_1475_p2 = (tmp_27_reg_2063 & and_ln107_fu_1470_p2);

assign and_ln107_2_fu_1498_p2 = (xor_ln107_1_fu_1480_p2 & tmp_26_reg_2051);

assign and_ln107_fu_1470_p2 = (xor_ln107_2_fu_1441_p2 & icmp_ln107_reg_2074);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((1'b1 == ap_block_state8_pp0_stage0_iter7) & (ap_enable_reg_pp0_iter7 == 1'b1)) | ((1'b1 == ap_block_state7_pp0_stage0_iter6) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & ((1'b1 == ap_block_state8_pp0_stage0_iter7) | (stream_out_48_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((1'b1 == ap_block_state7_pp0_stage0_iter6) | (stream_out_48_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter7 == 1'b1) & ((1'b1 == ap_block_state8_pp0_stage0_iter7) | (stream_out_48_TREADY_int_regslice == 1'b0))) | ((ap_enable_reg_pp0_iter6 == 1'b1) & ((1'b1 == ap_block_state7_pp0_stage0_iter6) | (stream_out_48_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (stream_in_48_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter6 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state8_pp0_stage0_iter7 = ((regslice_both_stream_out_48_V_data_V_U_apdone_blk == 1'b1) | (stream_out_48_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_1549_p0 = sext_ln102_fu_344_p1;

assign grp_fu_1549_p1 = zext_ln102_fu_341_p1;

assign grp_fu_1558_p0 = sext_ln103_fu_348_p1;

assign grp_fu_1558_p1 = zext_ln102_fu_341_p1;

assign grp_fu_1567_p0 = sext_ln104_fu_352_p1;

assign grp_fu_1567_p1 = zext_ln102_fu_341_p1;

assign grp_fu_1576_p0 = sext_ln102_fu_344_p1;

assign grp_fu_1576_p1 = zext_ln105_fu_356_p1;

assign grp_fu_1585_p0 = sext_ln103_fu_348_p1;

assign grp_fu_1585_p1 = zext_ln105_fu_356_p1;

assign grp_fu_1594_p0 = sext_ln104_fu_352_p1;

assign grp_fu_1594_p1 = zext_ln105_fu_356_p1;

assign grp_fu_1603_p0 = sext_ln102_4_fu_362_p1;

assign grp_fu_1603_p1 = zext_ln102_2_fu_359_p1;

assign grp_fu_1612_p0 = sext_ln103_4_fu_365_p1;

assign grp_fu_1612_p1 = zext_ln102_2_fu_359_p1;

assign grp_fu_1621_p0 = sext_ln104_4_fu_368_p1;

assign grp_fu_1621_p1 = zext_ln102_2_fu_359_p1;

assign grp_fu_1630_p0 = sext_ln102_4_fu_362_p1;

assign grp_fu_1630_p1 = zext_ln105_2_fu_371_p1;

assign grp_fu_1639_p0 = sext_ln103_4_fu_365_p1;

assign grp_fu_1639_p1 = zext_ln105_2_fu_371_p1;

assign grp_fu_1648_p0 = sext_ln104_4_fu_368_p1;

assign grp_fu_1648_p1 = zext_ln105_2_fu_371_p1;

assign icmp_ln102_1_fu_533_p2 = ((tmp_fu_517_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln102_fu_527_p2 = ((tmp_fu_517_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln103_1_fu_605_p2 = ((tmp_1_fu_589_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln103_fu_599_p2 = ((tmp_1_fu_589_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln104_1_fu_677_p2 = ((tmp_2_fu_661_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_671_p2 = ((tmp_2_fu_661_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln105_1_fu_738_p2 = ((tmp_3_fu_722_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln105_fu_732_p2 = ((tmp_3_fu_722_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln106_1_fu_799_p2 = ((tmp_4_fu_783_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln106_fu_793_p2 = ((tmp_4_fu_783_p4 == 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln107_1_fu_860_p2 = ((tmp_5_fu_844_p4 == 4'd0) ? 1'b1 : 1'b0);

assign icmp_ln107_fu_854_p2 = ((tmp_5_fu_844_p4 == 4'd15) ? 1'b1 : 1'b0);

assign mul_ln102_1_fu_380_p0 = sext_ln102_1_fu_377_p1;

assign mul_ln102_1_fu_380_p1 = zext_ln102_1_fu_374_p1;

assign mul_ln103_1_fu_393_p0 = sext_ln103_1_fu_390_p1;

assign mul_ln103_1_fu_393_p1 = zext_ln102_1_fu_374_p1;

assign mul_ln104_1_fu_406_p0 = sext_ln104_1_fu_403_p1;

assign mul_ln104_1_fu_406_p1 = zext_ln102_1_fu_374_p1;

assign mul_ln105_1_fu_419_p0 = sext_ln102_1_fu_377_p1;

assign mul_ln105_1_fu_419_p1 = zext_ln105_1_fu_416_p1;

assign mul_ln106_1_fu_429_p0 = sext_ln103_1_fu_390_p1;

assign mul_ln106_1_fu_429_p1 = zext_ln105_1_fu_416_p1;

assign mul_ln107_1_fu_439_p0 = sext_ln104_1_fu_403_p1;

assign mul_ln107_1_fu_439_p1 = zext_ln105_1_fu_416_p1;

assign or_ln102_1_fu_948_p2 = (xor_ln102_fu_909_p2 | and_ln102_2_fu_943_p2);

assign or_ln102_fu_904_p2 = (tmp_6_reg_1876 | select_ln102_3_fu_898_p3);

assign or_ln103_1_fu_1059_p2 = (xor_ln103_fu_1020_p2 | and_ln103_2_fu_1054_p2);

assign or_ln103_fu_1015_p2 = (tmp_10_reg_1911 | select_ln103_3_fu_1009_p3);

assign or_ln104_1_fu_1170_p2 = (xor_ln104_fu_1131_p2 | and_ln104_2_fu_1165_p2);

assign or_ln104_fu_1126_p2 = (tmp_14_reg_1946 | select_ln104_3_fu_1120_p3);

assign or_ln105_1_fu_1281_p2 = (xor_ln105_fu_1242_p2 | and_ln105_2_fu_1276_p2);

assign or_ln105_fu_1237_p2 = (tmp_18_reg_1981 | select_ln105_3_fu_1231_p3);

assign or_ln106_1_fu_1392_p2 = (xor_ln106_fu_1353_p2 | and_ln106_2_fu_1387_p2);

assign or_ln106_fu_1348_p2 = (tmp_22_reg_2016 | select_ln106_3_fu_1342_p3);

assign or_ln107_1_fu_1503_p2 = (xor_ln107_fu_1464_p2 | and_ln107_2_fu_1498_p2);

assign or_ln107_fu_1459_p2 = (tmp_26_reg_2051 | select_ln107_3_fu_1453_p3);

assign out1_fu_969_p3 = ((or_ln102_1_fu_948_p2[0:0] == 1'b1) ? select_ln102_2_fu_961_p3 : add_ln102_3_fu_869_p2);

assign out2_fu_1080_p3 = ((or_ln103_1_fu_1059_p2[0:0] == 1'b1) ? select_ln103_2_fu_1072_p3 : add_ln103_3_fu_980_p2);

assign out3_fu_1191_p3 = ((or_ln104_1_fu_1170_p2[0:0] == 1'b1) ? select_ln104_2_fu_1183_p3 : add_ln104_3_fu_1091_p2);

assign out4_fu_1302_p3 = ((or_ln105_1_fu_1281_p2[0:0] == 1'b1) ? select_ln105_2_fu_1294_p3 : add_ln105_3_fu_1202_p2);

assign out5_fu_1413_p3 = ((or_ln106_1_fu_1392_p2[0:0] == 1'b1) ? select_ln106_2_fu_1405_p3 : add_ln106_3_fu_1313_p2);

assign out6_fu_1524_p3 = ((or_ln107_1_fu_1503_p2[0:0] == 1'b1) ? select_ln107_2_fu_1516_p3 : add_ln107_3_fu_1424_p2);

assign select_ln102_1_fu_931_p3 = ((and_ln102_1_fu_920_p2[0:0] == 1'b1) ? trunc_ln102_fu_874_p1 : 7'd0);

assign select_ln102_2_fu_961_p3 = ((or_ln102_fu_904_p2[0:0] == 1'b1) ? select_ln102_4_fu_954_p3 : 8'd255);

assign select_ln102_3_fu_898_p3 = ((tmp_7_reg_1888[0:0] == 1'b1) ? select_ln102_fu_892_p3 : icmp_ln102_1_reg_1905);

assign select_ln102_4_fu_954_p3 = ((tmp_6_reg_1876[0:0] == 1'b1) ? zext_ln102_4_fu_939_p1 : add_ln102_3_fu_869_p2);

assign select_ln102_fu_892_p3 = ((tmp_9_fu_878_p3[0:0] == 1'b1) ? icmp_ln102_1_reg_1905 : icmp_ln102_reg_1899);

assign select_ln103_1_fu_1042_p3 = ((and_ln103_1_fu_1031_p2[0:0] == 1'b1) ? trunc_ln103_fu_985_p1 : 7'd0);

assign select_ln103_2_fu_1072_p3 = ((or_ln103_fu_1015_p2[0:0] == 1'b1) ? select_ln103_4_fu_1065_p3 : 8'd255);

assign select_ln103_3_fu_1009_p3 = ((tmp_11_reg_1923[0:0] == 1'b1) ? select_ln103_fu_1003_p3 : icmp_ln103_1_reg_1940);

assign select_ln103_4_fu_1065_p3 = ((tmp_10_reg_1911[0:0] == 1'b1) ? zext_ln103_1_fu_1050_p1 : add_ln103_3_fu_980_p2);

assign select_ln103_fu_1003_p3 = ((tmp_13_fu_989_p3[0:0] == 1'b1) ? icmp_ln103_1_reg_1940 : icmp_ln103_reg_1934);

assign select_ln104_1_fu_1153_p3 = ((and_ln104_1_fu_1142_p2[0:0] == 1'b1) ? trunc_ln104_fu_1096_p1 : 7'd0);

assign select_ln104_2_fu_1183_p3 = ((or_ln104_fu_1126_p2[0:0] == 1'b1) ? select_ln104_4_fu_1176_p3 : 8'd255);

assign select_ln104_3_fu_1120_p3 = ((tmp_15_reg_1958[0:0] == 1'b1) ? select_ln104_fu_1114_p3 : icmp_ln104_1_reg_1975);

assign select_ln104_4_fu_1176_p3 = ((tmp_14_reg_1946[0:0] == 1'b1) ? zext_ln104_1_fu_1161_p1 : add_ln104_3_fu_1091_p2);

assign select_ln104_fu_1114_p3 = ((tmp_17_fu_1100_p3[0:0] == 1'b1) ? icmp_ln104_1_reg_1975 : icmp_ln104_reg_1969);

assign select_ln105_1_fu_1264_p3 = ((and_ln105_1_fu_1253_p2[0:0] == 1'b1) ? trunc_ln105_fu_1207_p1 : 7'd0);

assign select_ln105_2_fu_1294_p3 = ((or_ln105_fu_1237_p2[0:0] == 1'b1) ? select_ln105_4_fu_1287_p3 : 8'd255);

assign select_ln105_3_fu_1231_p3 = ((tmp_19_reg_1993[0:0] == 1'b1) ? select_ln105_fu_1225_p3 : icmp_ln105_1_reg_2010);

assign select_ln105_4_fu_1287_p3 = ((tmp_18_reg_1981[0:0] == 1'b1) ? zext_ln105_4_fu_1272_p1 : add_ln105_3_fu_1202_p2);

assign select_ln105_fu_1225_p3 = ((tmp_21_fu_1211_p3[0:0] == 1'b1) ? icmp_ln105_1_reg_2010 : icmp_ln105_reg_2004);

assign select_ln106_1_fu_1375_p3 = ((and_ln106_1_fu_1364_p2[0:0] == 1'b1) ? trunc_ln106_fu_1318_p1 : 7'd0);

assign select_ln106_2_fu_1405_p3 = ((or_ln106_fu_1348_p2[0:0] == 1'b1) ? select_ln106_4_fu_1398_p3 : 8'd255);

assign select_ln106_3_fu_1342_p3 = ((tmp_23_reg_2028[0:0] == 1'b1) ? select_ln106_fu_1336_p3 : icmp_ln106_1_reg_2045);

assign select_ln106_4_fu_1398_p3 = ((tmp_22_reg_2016[0:0] == 1'b1) ? zext_ln106_1_fu_1383_p1 : add_ln106_3_fu_1313_p2);

assign select_ln106_fu_1336_p3 = ((tmp_25_fu_1322_p3[0:0] == 1'b1) ? icmp_ln106_1_reg_2045 : icmp_ln106_reg_2039);

assign select_ln107_1_fu_1486_p3 = ((and_ln107_1_fu_1475_p2[0:0] == 1'b1) ? trunc_ln107_fu_1429_p1 : 7'd0);

assign select_ln107_2_fu_1516_p3 = ((or_ln107_fu_1459_p2[0:0] == 1'b1) ? select_ln107_4_fu_1509_p3 : 8'd255);

assign select_ln107_3_fu_1453_p3 = ((tmp_27_reg_2063[0:0] == 1'b1) ? select_ln107_fu_1447_p3 : icmp_ln107_1_reg_2080);

assign select_ln107_4_fu_1509_p3 = ((tmp_26_reg_2051[0:0] == 1'b1) ? zext_ln107_1_fu_1494_p1 : add_ln107_3_fu_1424_p2);

assign select_ln107_fu_1447_p3 = ((tmp_29_fu_1433_p3[0:0] == 1'b1) ? icmp_ln107_1_reg_2080 : icmp_ln107_reg_2074);

assign sext_ln102_1_fu_377_p1 = $signed(c1_c2_read_reg_1720_pp0_iter2_reg);

assign sext_ln102_4_fu_362_p1 = $signed(c1_c3_read_reg_1725);

assign sext_ln102_7_fu_474_p1 = $signed(shl_ln_fu_467_p3);

assign sext_ln102_fu_344_p1 = $signed(c1_c1_0_data_reg);

assign sext_ln103_1_fu_390_p1 = $signed(c2_c2_read_reg_1741_pp0_iter2_reg);

assign sext_ln103_4_fu_365_p1 = $signed(c2_c3_read_reg_1746);

assign sext_ln103_7_fu_546_p1 = $signed(shl_ln1_fu_539_p3);

assign sext_ln103_fu_348_p1 = $signed(c2_c1_0_data_reg);

assign sext_ln104_1_fu_403_p1 = $signed(c3_c2_read_reg_1762_pp0_iter2_reg);

assign sext_ln104_4_fu_368_p1 = $signed(c3_c3_read_reg_1767);

assign sext_ln104_7_fu_618_p1 = $signed(shl_ln2_fu_611_p3);

assign sext_ln104_fu_352_p1 = $signed(c3_c1_0_data_reg);

assign shl_ln1_fu_539_p3 = {{bias_c2_read_reg_1751_pp0_iter4_reg}, {8'd0}};

assign shl_ln2_fu_611_p3 = {{bias_c3_read_reg_1772_pp0_iter4_reg}, {8'd0}};

assign shl_ln_fu_467_p3 = {{bias_c1_read_reg_1730_pp0_iter4_reg}, {8'd0}};

assign stream_in_48_TREADY = regslice_both_stream_in_48_V_data_V_U_ack_in;

assign stream_out_48_TDATA_int_regslice = {{{{{{out6_fu_1524_p3}, {out5_fu_1413_p3}}, {out4_fu_1302_p3}}, {out3_fu_1191_p3}}, {out2_fu_1080_p3}}, {out1_fu_969_p3}};

assign stream_out_48_TVALID = regslice_both_stream_out_48_V_data_V_U_vld_out;

assign tmp_13_fu_989_p3 = add_ln103_3_fu_980_p2[32'd7];

assign tmp_17_fu_1100_p3 = add_ln104_3_fu_1091_p2[32'd7];

assign tmp_1_fu_589_p4 = {{add_ln103_2_fu_550_p2[19:16]}};

assign tmp_21_fu_1211_p3 = add_ln105_3_fu_1202_p2[32'd7];

assign tmp_25_fu_1322_p3 = add_ln106_3_fu_1313_p2[32'd7];

assign tmp_29_fu_1433_p3 = add_ln107_3_fu_1424_p2[32'd7];

assign tmp_2_fu_661_p4 = {{add_ln104_2_fu_622_p2[19:16]}};

assign tmp_3_fu_722_p4 = {{add_ln105_2_fu_683_p2[19:16]}};

assign tmp_4_fu_783_p4 = {{add_ln106_2_fu_744_p2[19:16]}};

assign tmp_5_fu_844_p4 = {{add_ln107_2_fu_805_p2[19:16]}};

assign tmp_9_fu_878_p3 = add_ln102_3_fu_869_p2[32'd7];

assign tmp_fu_517_p4 = {{add_ln102_2_fu_478_p2[19:16]}};

assign trunc_ln102_fu_874_p1 = add_ln102_3_fu_869_p2[6:0];

assign trunc_ln103_fu_985_p1 = add_ln103_3_fu_980_p2[6:0];

assign trunc_ln104_fu_1096_p1 = add_ln104_3_fu_1091_p2[6:0];

assign trunc_ln105_fu_1207_p1 = add_ln105_3_fu_1202_p2[6:0];

assign trunc_ln106_fu_1318_p1 = add_ln106_3_fu_1313_p2[6:0];

assign trunc_ln107_fu_1429_p1 = add_ln107_3_fu_1424_p2[6:0];

assign v_p1_fu_287_p1 = stream_in_48_TDATA_int_regslice[7:0];

assign xor_ln102_1_fu_925_p2 = (1'd1 ^ and_ln102_1_fu_920_p2);

assign xor_ln102_2_fu_886_p2 = (tmp_9_fu_878_p3 ^ 1'd1);

assign xor_ln102_fu_909_p2 = (or_ln102_fu_904_p2 ^ 1'd1);

assign xor_ln103_1_fu_1036_p2 = (1'd1 ^ and_ln103_1_fu_1031_p2);

assign xor_ln103_2_fu_997_p2 = (tmp_13_fu_989_p3 ^ 1'd1);

assign xor_ln103_fu_1020_p2 = (or_ln103_fu_1015_p2 ^ 1'd1);

assign xor_ln104_1_fu_1147_p2 = (1'd1 ^ and_ln104_1_fu_1142_p2);

assign xor_ln104_2_fu_1108_p2 = (tmp_17_fu_1100_p3 ^ 1'd1);

assign xor_ln104_fu_1131_p2 = (or_ln104_fu_1126_p2 ^ 1'd1);

assign xor_ln105_1_fu_1258_p2 = (1'd1 ^ and_ln105_1_fu_1253_p2);

assign xor_ln105_2_fu_1219_p2 = (tmp_21_fu_1211_p3 ^ 1'd1);

assign xor_ln105_fu_1242_p2 = (or_ln105_fu_1237_p2 ^ 1'd1);

assign xor_ln106_1_fu_1369_p2 = (1'd1 ^ and_ln106_1_fu_1364_p2);

assign xor_ln106_2_fu_1330_p2 = (tmp_25_fu_1322_p3 ^ 1'd1);

assign xor_ln106_fu_1353_p2 = (or_ln106_fu_1348_p2 ^ 1'd1);

assign xor_ln107_1_fu_1480_p2 = (1'd1 ^ and_ln107_1_fu_1475_p2);

assign xor_ln107_2_fu_1441_p2 = (tmp_29_fu_1433_p3 ^ 1'd1);

assign xor_ln107_fu_1464_p2 = (or_ln107_fu_1459_p2 ^ 1'd1);

assign zext_ln102_1_fu_374_p1 = v_p2_reg_1682_pp0_iter2_reg;

assign zext_ln102_2_fu_359_p1 = v_p3_reg_1687_pp0_iter1_reg;

assign zext_ln102_3_fu_866_p1 = tmp_8_reg_1894;

assign zext_ln102_4_fu_939_p1 = select_ln102_1_fu_931_p3;

assign zext_ln102_fu_341_p1 = v_p1_reg_1677;

assign zext_ln103_1_fu_1050_p1 = select_ln103_1_fu_1042_p3;

assign zext_ln103_fu_977_p1 = tmp_12_reg_1929;

assign zext_ln104_1_fu_1161_p1 = select_ln104_1_fu_1153_p3;

assign zext_ln104_fu_1088_p1 = tmp_16_reg_1964;

assign zext_ln105_1_fu_416_p1 = v_p5_reg_1697_pp0_iter2_reg;

assign zext_ln105_2_fu_371_p1 = v_p6_reg_1702_pp0_iter1_reg;

assign zext_ln105_3_fu_1199_p1 = tmp_20_reg_1999;

assign zext_ln105_4_fu_1272_p1 = select_ln105_1_fu_1264_p3;

assign zext_ln105_fu_356_p1 = v_p4_reg_1692;

assign zext_ln106_1_fu_1383_p1 = select_ln106_1_fu_1375_p3;

assign zext_ln106_fu_1310_p1 = tmp_24_reg_2034;

assign zext_ln107_1_fu_1494_p1 = select_ln107_1_fu_1486_p3;

assign zext_ln107_fu_1421_p1 = tmp_28_reg_2069;


reg find_kernel_block = 0;
// synthesis translate_off
`include "color_convert_2_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //color_convert_2

