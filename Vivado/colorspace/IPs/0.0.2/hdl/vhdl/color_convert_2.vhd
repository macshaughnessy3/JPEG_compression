-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity color_convert_2 is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    stream_in_48_TDATA : IN STD_LOGIC_VECTOR (47 downto 0);
    stream_in_48_TVALID : IN STD_LOGIC;
    stream_in_48_TREADY : OUT STD_LOGIC;
    stream_in_48_TKEEP : IN STD_LOGIC_VECTOR (5 downto 0);
    stream_in_48_TSTRB : IN STD_LOGIC_VECTOR (5 downto 0);
    stream_in_48_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_in_48_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    stream_out_48_TDATA : OUT STD_LOGIC_VECTOR (47 downto 0);
    stream_out_48_TVALID : OUT STD_LOGIC;
    stream_out_48_TREADY : IN STD_LOGIC;
    stream_out_48_TKEEP : OUT STD_LOGIC_VECTOR (5 downto 0);
    stream_out_48_TSTRB : OUT STD_LOGIC_VECTOR (5 downto 0);
    stream_out_48_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    stream_out_48_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of color_convert_2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "color_convert_2_color_convert_2,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.620000,HLS_SYN_LAT=7,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1202,HLS_SYN_LUT=1686,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal c1_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c1_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c1_0_vld_reg : STD_LOGIC := '0';
    signal c1_c1_0_ack_out : STD_LOGIC;
    signal c1_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c2_0_vld_reg : STD_LOGIC := '0';
    signal c1_c2_0_ack_out : STD_LOGIC;
    signal c1_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c1_c3_0_vld_reg : STD_LOGIC := '0';
    signal c1_c3_0_ack_out : STD_LOGIC;
    signal c2_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c1_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c1_0_vld_reg : STD_LOGIC := '0';
    signal c2_c1_0_ack_out : STD_LOGIC;
    signal c2_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c2_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c2_0_vld_reg : STD_LOGIC := '0';
    signal c2_c2_0_ack_out : STD_LOGIC;
    signal c2_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c2_c3_0_vld_reg : STD_LOGIC := '0';
    signal c2_c3_0_ack_out : STD_LOGIC;
    signal c3_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c1_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c1_0_vld_reg : STD_LOGIC := '0';
    signal c3_c1_0_ack_out : STD_LOGIC;
    signal c3_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c2_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c2_0_vld_reg : STD_LOGIC := '0';
    signal c3_c2_0_ack_out : STD_LOGIC;
    signal c3_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal c3_c3_0_vld_reg : STD_LOGIC := '0';
    signal c3_c3_0_ack_out : STD_LOGIC;
    signal bias_c1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c1_0_vld_reg : STD_LOGIC := '0';
    signal bias_c1_0_ack_out : STD_LOGIC;
    signal bias_c2 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c2_0_vld_reg : STD_LOGIC := '0';
    signal bias_c2_0_ack_out : STD_LOGIC;
    signal bias_c3 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_0_data_reg : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal bias_c3_0_vld_reg : STD_LOGIC := '0';
    signal bias_c3_0_ack_out : STD_LOGIC;
    signal stream_in_48_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_out_48_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal curr_pixel_keep_reg_1657 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal regslice_both_stream_out_48_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal curr_pixel_keep_reg_1657_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_keep_reg_1657_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_keep_reg_1657_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_keep_reg_1657_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_keep_reg_1657_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_strb_reg_1662 : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_strb_reg_1662_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_strb_reg_1662_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_strb_reg_1662_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_strb_reg_1662_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_strb_reg_1662_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal curr_pixel_user_reg_1667 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1667_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1667_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1667_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1667_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_user_reg_1667_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1672 : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1672_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1672_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1672_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1672_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal curr_pixel_last_reg_1672_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal v_p1_fu_287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p1_reg_1677 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p2_reg_1682 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p2_reg_1682_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p2_reg_1682_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p3_reg_1687 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p3_reg_1687_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p4_reg_1692 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p5_reg_1697 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p5_reg_1697_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p5_reg_1697_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p6_reg_1702 : STD_LOGIC_VECTOR (7 downto 0);
    signal v_p6_reg_1702_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln102_fu_341_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln102_fu_344_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal c1_c2_read_reg_1720 : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c2_read_reg_1720_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c1_c3_read_reg_1725 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_read_reg_1730 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_read_reg_1730_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_read_reg_1730_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c1_read_reg_1730_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln103_fu_348_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal c2_c2_read_reg_1741 : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c2_read_reg_1741_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c2_c3_read_reg_1746 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_read_reg_1751 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_read_reg_1751_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_read_reg_1751_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c2_read_reg_1751_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln104_fu_352_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal c3_c2_read_reg_1762 : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c2_read_reg_1762_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c3_c3_read_reg_1767 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_read_reg_1772 : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_read_reg_1772_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_read_reg_1772_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal bias_c3_read_reg_1772_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln105_fu_356_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln102_2_fu_359_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln102_4_fu_362_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln103_4_fu_365_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln104_4_fu_368_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln105_2_fu_371_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_6_reg_1876 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_1883 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_1888 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_1894 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_reg_1899 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_1_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln102_1_reg_1905 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_1911 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1_reg_1918 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_1923 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_1929 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_fu_599_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_1934 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_1_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_1_reg_1940 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_1946 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_reg_1953 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_1958 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_1964 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_reg_1969 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_1_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln104_1_reg_1975 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1981 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_reg_1988 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_1993 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_1999 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_reg_2004 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln105_1_reg_2010 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_2016 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln4_reg_2023 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_reg_2028 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_2034 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_reg_2039 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_1_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln106_1_reg_2045 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_2051 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln5_reg_2058 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_reg_2063 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_2069 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_reg_2074 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_fu_860_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln107_1_reg_2080 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln102_1_fu_380_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln102_1_fu_377_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln102_1_fu_380_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln102_1_fu_374_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln102_1_fu_380_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln103_1_fu_393_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln103_1_fu_390_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln103_1_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln103_1_fu_393_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln104_1_fu_406_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln104_1_fu_403_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln104_1_fu_406_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln104_1_fu_406_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln105_1_fu_419_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln105_1_fu_419_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_1_fu_416_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln105_1_fu_419_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln106_1_fu_429_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln106_1_fu_429_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln106_1_fu_429_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln107_1_fu_439_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln107_1_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln107_1_fu_439_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_1549_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1558_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1567_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1576_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1585_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1594_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln_fu_467_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln102_7_fu_474_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1603_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln102_2_fu_478_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln102_2_fu_478_p2 : signal is "no";
    signal tmp_fu_517_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_539_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln103_7_fu_546_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1612_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln103_2_fu_550_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of add_ln103_2_fu_550_p2 : signal is "no";
    signal tmp_1_fu_589_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2_fu_611_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln104_7_fu_618_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1621_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln104_2_fu_622_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of add_ln104_2_fu_622_p2 : signal is "no";
    signal tmp_2_fu_661_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1630_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln105_2_fu_683_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of add_ln105_2_fu_683_p2 : signal is "no";
    signal tmp_3_fu_722_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1639_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln106_2_fu_744_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of add_ln106_2_fu_744_p2 : signal is "no";
    signal tmp_4_fu_783_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1648_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln107_2_fu_805_p2 : STD_LOGIC_VECTOR (19 downto 0);
    attribute use_dsp48 of add_ln107_2_fu_805_p2 : signal is "no";
    signal tmp_5_fu_844_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln102_3_fu_866_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln102_3_fu_869_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_878_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_fu_892_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_3_fu_898_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln102_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln102_2_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_1_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln102_fu_874_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln102_1_fu_931_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln102_1_fu_925_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln102_2_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln102_fu_909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln102_4_fu_939_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln102_4_fu_954_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln102_1_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln102_2_fu_961_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln103_fu_977_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln103_3_fu_980_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_989_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln103_fu_1003_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln103_3_fu_1009_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln103_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln103_2_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln103_fu_1026_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln103_1_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln103_fu_985_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln103_1_fu_1042_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln103_1_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln103_2_fu_1054_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln103_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln103_1_fu_1050_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln103_4_fu_1065_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln103_1_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln103_2_fu_1072_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln104_fu_1088_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln104_3_fu_1091_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_1100_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_fu_1114_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_3_fu_1120_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln104_fu_1126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_2_fu_1108_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_fu_1137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_1_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln104_fu_1096_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln104_1_fu_1153_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln104_1_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln104_2_fu_1165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln104_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln104_1_fu_1161_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln104_4_fu_1176_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln104_1_fu_1170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln104_2_fu_1183_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_3_fu_1199_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_3_fu_1202_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_fu_1211_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln105_fu_1225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln105_3_fu_1231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln105_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_2_fu_1219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_fu_1248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_1_fu_1253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln105_fu_1207_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln105_1_fu_1264_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln105_1_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln105_2_fu_1276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln105_4_fu_1272_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln105_4_fu_1287_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln105_1_fu_1281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln105_2_fu_1294_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln106_fu_1310_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_3_fu_1313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_1322_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln106_fu_1336_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln106_3_fu_1342_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln106_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln106_2_fu_1330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln106_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln106_1_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln106_fu_1318_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln106_1_fu_1375_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln106_1_fu_1369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln106_2_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln106_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln106_1_fu_1383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln106_4_fu_1398_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln106_1_fu_1392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln106_2_fu_1405_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln107_fu_1421_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln107_3_fu_1424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_1433_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln107_fu_1447_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln107_3_fu_1453_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln107_fu_1459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_2_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_fu_1470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_1_fu_1475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln107_fu_1429_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln107_1_fu_1486_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal xor_ln107_1_fu_1480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln107_2_fu_1498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln107_fu_1464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln107_1_fu_1494_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln107_4_fu_1509_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln107_1_fu_1503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln107_2_fu_1516_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out6_fu_1524_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out5_fu_1413_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out4_fu_1302_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out3_fu_1191_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out2_fu_1080_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal out1_fu_969_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1549_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1549_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1558_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1558_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1567_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1567_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1576_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1576_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1585_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1585_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1594_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1594_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1603_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1612_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1612_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1621_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1621_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1630_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1630_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1639_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1639_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1648_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1648_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1549_ce : STD_LOGIC;
    signal grp_fu_1558_ce : STD_LOGIC;
    signal grp_fu_1567_ce : STD_LOGIC;
    signal grp_fu_1576_ce : STD_LOGIC;
    signal grp_fu_1585_ce : STD_LOGIC;
    signal grp_fu_1594_ce : STD_LOGIC;
    signal grp_fu_1603_ce : STD_LOGIC;
    signal grp_fu_1612_ce : STD_LOGIC;
    signal grp_fu_1621_ce : STD_LOGIC;
    signal grp_fu_1630_ce : STD_LOGIC;
    signal grp_fu_1639_ce : STD_LOGIC;
    signal grp_fu_1648_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_stream_in_48_V_data_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_48_TDATA_int_regslice : STD_LOGIC_VECTOR (47 downto 0);
    signal stream_in_48_TVALID_int_regslice : STD_LOGIC;
    signal stream_in_48_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_in_48_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_48_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_48_TKEEP_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_stream_in_48_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_48_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_48_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_48_TSTRB_int_regslice : STD_LOGIC_VECTOR (5 downto 0);
    signal regslice_both_stream_in_48_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_48_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_48_V_user_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_48_TUSER_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_48_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_48_V_user_V_U_ack_in : STD_LOGIC;
    signal regslice_both_stream_in_48_V_last_V_U_apdone_blk : STD_LOGIC;
    signal stream_in_48_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_stream_in_48_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_in_48_V_last_V_U_ack_in : STD_LOGIC;
    signal stream_out_48_TDATA_int_regslice : STD_LOGIC_VECTOR (47 downto 0);
    signal stream_out_48_TVALID_int_regslice : STD_LOGIC;
    signal stream_out_48_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_stream_out_48_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_48_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_48_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_48_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_48_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_48_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_48_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_48_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_stream_out_48_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_stream_out_48_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_stream_out_48_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component color_convert_2_mul_10s_8ns_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component color_convert_2_mac_muladd_10s_8ns_18s_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component color_convert_2_mac_muladd_10s_8ns_19s_20_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component color_convert_2_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        c1_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c1_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c2_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        c3_c3 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c2 : OUT STD_LOGIC_VECTOR (9 downto 0);
        bias_c3 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component color_convert_2_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component color_convert_2_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        c1_c1 => c1_c1,
        c1_c2 => c1_c2,
        c1_c3 => c1_c3,
        c2_c1 => c2_c1,
        c2_c2 => c2_c2,
        c2_c3 => c2_c3,
        c3_c1 => c3_c1,
        c3_c2 => c3_c2,
        c3_c3 => c3_c3,
        bias_c1 => bias_c1,
        bias_c2 => bias_c2,
        bias_c3 => bias_c3);

    mul_10s_8ns_18_1_1_U1 : component color_convert_2_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln102_1_fu_380_p0,
        din1 => mul_ln102_1_fu_380_p1,
        dout => mul_ln102_1_fu_380_p2);

    mul_10s_8ns_18_1_1_U2 : component color_convert_2_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln103_1_fu_393_p0,
        din1 => mul_ln103_1_fu_393_p1,
        dout => mul_ln103_1_fu_393_p2);

    mul_10s_8ns_18_1_1_U3 : component color_convert_2_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln104_1_fu_406_p0,
        din1 => mul_ln104_1_fu_406_p1,
        dout => mul_ln104_1_fu_406_p2);

    mul_10s_8ns_18_1_1_U4 : component color_convert_2_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln105_1_fu_419_p0,
        din1 => mul_ln105_1_fu_419_p1,
        dout => mul_ln105_1_fu_419_p2);

    mul_10s_8ns_18_1_1_U5 : component color_convert_2_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln106_1_fu_429_p0,
        din1 => mul_ln106_1_fu_429_p1,
        dout => mul_ln106_1_fu_429_p2);

    mul_10s_8ns_18_1_1_U6 : component color_convert_2_mul_10s_8ns_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        dout_WIDTH => 18)
    port map (
        din0 => mul_ln107_1_fu_439_p0,
        din1 => mul_ln107_1_fu_439_p1,
        dout => mul_ln107_1_fu_439_p2);

    mac_muladd_10s_8ns_18s_19_4_1_U7 : component color_convert_2_mac_muladd_10s_8ns_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1549_p0,
        din1 => grp_fu_1549_p1,
        din2 => mul_ln102_1_fu_380_p2,
        ce => grp_fu_1549_ce,
        dout => grp_fu_1549_p3);

    mac_muladd_10s_8ns_18s_19_4_1_U8 : component color_convert_2_mac_muladd_10s_8ns_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1558_p0,
        din1 => grp_fu_1558_p1,
        din2 => mul_ln103_1_fu_393_p2,
        ce => grp_fu_1558_ce,
        dout => grp_fu_1558_p3);

    mac_muladd_10s_8ns_18s_19_4_1_U9 : component color_convert_2_mac_muladd_10s_8ns_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1567_p0,
        din1 => grp_fu_1567_p1,
        din2 => mul_ln104_1_fu_406_p2,
        ce => grp_fu_1567_ce,
        dout => grp_fu_1567_p3);

    mac_muladd_10s_8ns_18s_19_4_1_U10 : component color_convert_2_mac_muladd_10s_8ns_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1576_p0,
        din1 => grp_fu_1576_p1,
        din2 => mul_ln105_1_fu_419_p2,
        ce => grp_fu_1576_ce,
        dout => grp_fu_1576_p3);

    mac_muladd_10s_8ns_18s_19_4_1_U11 : component color_convert_2_mac_muladd_10s_8ns_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1585_p0,
        din1 => grp_fu_1585_p1,
        din2 => mul_ln106_1_fu_429_p2,
        ce => grp_fu_1585_ce,
        dout => grp_fu_1585_p3);

    mac_muladd_10s_8ns_18s_19_4_1_U12 : component color_convert_2_mac_muladd_10s_8ns_18s_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 18,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1594_p0,
        din1 => grp_fu_1594_p1,
        din2 => mul_ln107_1_fu_439_p2,
        ce => grp_fu_1594_ce,
        dout => grp_fu_1594_p3);

    mac_muladd_10s_8ns_19s_20_4_1_U13 : component color_convert_2_mac_muladd_10s_8ns_19s_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1603_p0,
        din1 => grp_fu_1603_p1,
        din2 => grp_fu_1549_p3,
        ce => grp_fu_1603_ce,
        dout => grp_fu_1603_p3);

    mac_muladd_10s_8ns_19s_20_4_1_U14 : component color_convert_2_mac_muladd_10s_8ns_19s_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1612_p0,
        din1 => grp_fu_1612_p1,
        din2 => grp_fu_1558_p3,
        ce => grp_fu_1612_ce,
        dout => grp_fu_1612_p3);

    mac_muladd_10s_8ns_19s_20_4_1_U15 : component color_convert_2_mac_muladd_10s_8ns_19s_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1621_p0,
        din1 => grp_fu_1621_p1,
        din2 => grp_fu_1567_p3,
        ce => grp_fu_1621_ce,
        dout => grp_fu_1621_p3);

    mac_muladd_10s_8ns_19s_20_4_1_U16 : component color_convert_2_mac_muladd_10s_8ns_19s_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1630_p0,
        din1 => grp_fu_1630_p1,
        din2 => grp_fu_1576_p3,
        ce => grp_fu_1630_ce,
        dout => grp_fu_1630_p3);

    mac_muladd_10s_8ns_19s_20_4_1_U17 : component color_convert_2_mac_muladd_10s_8ns_19s_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1639_p0,
        din1 => grp_fu_1639_p1,
        din2 => grp_fu_1585_p3,
        ce => grp_fu_1639_ce,
        dout => grp_fu_1639_p3);

    mac_muladd_10s_8ns_19s_20_4_1_U18 : component color_convert_2_mac_muladd_10s_8ns_19s_20_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 19,
        dout_WIDTH => 20)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1648_p0,
        din1 => grp_fu_1648_p1,
        din2 => grp_fu_1594_p3,
        ce => grp_fu_1648_ce,
        dout => grp_fu_1648_p3);

    regslice_both_stream_in_48_V_data_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 48)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_48_TDATA,
        vld_in => stream_in_48_TVALID,
        ack_in => regslice_both_stream_in_48_V_data_V_U_ack_in,
        data_out => stream_in_48_TDATA_int_regslice,
        vld_out => stream_in_48_TVALID_int_regslice,
        ack_out => stream_in_48_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_48_V_data_V_U_apdone_blk);

    regslice_both_stream_in_48_V_keep_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_48_TKEEP,
        vld_in => stream_in_48_TVALID,
        ack_in => regslice_both_stream_in_48_V_keep_V_U_ack_in,
        data_out => stream_in_48_TKEEP_int_regslice,
        vld_out => regslice_both_stream_in_48_V_keep_V_U_vld_out,
        ack_out => stream_in_48_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_48_V_keep_V_U_apdone_blk);

    regslice_both_stream_in_48_V_strb_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_48_TSTRB,
        vld_in => stream_in_48_TVALID,
        ack_in => regslice_both_stream_in_48_V_strb_V_U_ack_in,
        data_out => stream_in_48_TSTRB_int_regslice,
        vld_out => regslice_both_stream_in_48_V_strb_V_U_vld_out,
        ack_out => stream_in_48_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_48_V_strb_V_U_apdone_blk);

    regslice_both_stream_in_48_V_user_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_48_TUSER,
        vld_in => stream_in_48_TVALID,
        ack_in => regslice_both_stream_in_48_V_user_V_U_ack_in,
        data_out => stream_in_48_TUSER_int_regslice,
        vld_out => regslice_both_stream_in_48_V_user_V_U_vld_out,
        ack_out => stream_in_48_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_48_V_user_V_U_apdone_blk);

    regslice_both_stream_in_48_V_last_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_in_48_TLAST,
        vld_in => stream_in_48_TVALID,
        ack_in => regslice_both_stream_in_48_V_last_V_U_ack_in,
        data_out => stream_in_48_TLAST_int_regslice,
        vld_out => regslice_both_stream_in_48_V_last_V_U_vld_out,
        ack_out => stream_in_48_TREADY_int_regslice,
        apdone_blk => regslice_both_stream_in_48_V_last_V_U_apdone_blk);

    regslice_both_stream_out_48_V_data_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 48)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => stream_out_48_TDATA_int_regslice,
        vld_in => stream_out_48_TVALID_int_regslice,
        ack_in => stream_out_48_TREADY_int_regslice,
        data_out => stream_out_48_TDATA,
        vld_out => regslice_both_stream_out_48_V_data_V_U_vld_out,
        ack_out => stream_out_48_TREADY,
        apdone_blk => regslice_both_stream_out_48_V_data_V_U_apdone_blk);

    regslice_both_stream_out_48_V_keep_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => curr_pixel_keep_reg_1657_pp0_iter5_reg,
        vld_in => stream_out_48_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy,
        data_out => stream_out_48_TKEEP,
        vld_out => regslice_both_stream_out_48_V_keep_V_U_vld_out,
        ack_out => stream_out_48_TREADY,
        apdone_blk => regslice_both_stream_out_48_V_keep_V_U_apdone_blk);

    regslice_both_stream_out_48_V_strb_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 6)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => curr_pixel_strb_reg_1662_pp0_iter5_reg,
        vld_in => stream_out_48_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy,
        data_out => stream_out_48_TSTRB,
        vld_out => regslice_both_stream_out_48_V_strb_V_U_vld_out,
        ack_out => stream_out_48_TREADY,
        apdone_blk => regslice_both_stream_out_48_V_strb_V_U_apdone_blk);

    regslice_both_stream_out_48_V_user_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => curr_pixel_user_reg_1667_pp0_iter5_reg,
        vld_in => stream_out_48_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_48_V_user_V_U_ack_in_dummy,
        data_out => stream_out_48_TUSER,
        vld_out => regslice_both_stream_out_48_V_user_V_U_vld_out,
        ack_out => stream_out_48_TREADY,
        apdone_blk => regslice_both_stream_out_48_V_user_V_U_apdone_blk);

    regslice_both_stream_out_48_V_last_V_U : component color_convert_2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => curr_pixel_last_reg_1672_pp0_iter5_reg,
        vld_in => stream_out_48_TVALID_int_regslice,
        ack_in => regslice_both_stream_out_48_V_last_V_U_ack_in_dummy,
        data_out => stream_out_48_TLAST,
        vld_out => regslice_both_stream_out_48_V_last_V_U_vld_out,
        ack_out => stream_out_48_TREADY,
        apdone_blk => regslice_both_stream_out_48_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    bias_c1_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    bias_c2_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    bias_c3_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c1_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c2_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c1_c3_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c1_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c2_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c2_c3_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c1_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c2_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c3_c3_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c1_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c1_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (bias_c1_0_vld_reg = ap_const_logic_0)))) then
                bias_c1_0_data_reg <= bias_c1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bias_c1_read_reg_1730 <= bias_c1_0_data_reg;
                bias_c2_read_reg_1751 <= bias_c2_0_data_reg;
                bias_c3_read_reg_1772 <= bias_c3_0_data_reg;
                c1_c2_read_reg_1720 <= c1_c2_0_data_reg;
                c1_c3_read_reg_1725 <= c1_c3_0_data_reg;
                c2_c2_read_reg_1741 <= c2_c2_0_data_reg;
                c2_c3_read_reg_1746 <= c2_c3_0_data_reg;
                c3_c2_read_reg_1762 <= c3_c2_0_data_reg;
                c3_c3_read_reg_1767 <= c3_c3_0_data_reg;
                curr_pixel_keep_reg_1657 <= stream_in_48_TKEEP_int_regslice;
                curr_pixel_keep_reg_1657_pp0_iter1_reg <= curr_pixel_keep_reg_1657;
                curr_pixel_last_reg_1672 <= stream_in_48_TLAST_int_regslice;
                curr_pixel_last_reg_1672_pp0_iter1_reg <= curr_pixel_last_reg_1672;
                curr_pixel_strb_reg_1662 <= stream_in_48_TSTRB_int_regslice;
                curr_pixel_strb_reg_1662_pp0_iter1_reg <= curr_pixel_strb_reg_1662;
                curr_pixel_user_reg_1667 <= stream_in_48_TUSER_int_regslice;
                curr_pixel_user_reg_1667_pp0_iter1_reg <= curr_pixel_user_reg_1667;
                v_p1_reg_1677 <= v_p1_fu_287_p1;
                v_p2_reg_1682 <= stream_in_48_TDATA_int_regslice(15 downto 8);
                v_p2_reg_1682_pp0_iter1_reg <= v_p2_reg_1682;
                v_p3_reg_1687 <= stream_in_48_TDATA_int_regslice(23 downto 16);
                v_p3_reg_1687_pp0_iter1_reg <= v_p3_reg_1687;
                v_p4_reg_1692 <= stream_in_48_TDATA_int_regslice(31 downto 24);
                v_p5_reg_1697 <= stream_in_48_TDATA_int_regslice(39 downto 32);
                v_p5_reg_1697_pp0_iter1_reg <= v_p5_reg_1697;
                v_p6_reg_1702 <= stream_in_48_TDATA_int_regslice(47 downto 40);
                v_p6_reg_1702_pp0_iter1_reg <= v_p6_reg_1702;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bias_c1_read_reg_1730_pp0_iter2_reg <= bias_c1_read_reg_1730;
                bias_c1_read_reg_1730_pp0_iter3_reg <= bias_c1_read_reg_1730_pp0_iter2_reg;
                bias_c1_read_reg_1730_pp0_iter4_reg <= bias_c1_read_reg_1730_pp0_iter3_reg;
                bias_c2_read_reg_1751_pp0_iter2_reg <= bias_c2_read_reg_1751;
                bias_c2_read_reg_1751_pp0_iter3_reg <= bias_c2_read_reg_1751_pp0_iter2_reg;
                bias_c2_read_reg_1751_pp0_iter4_reg <= bias_c2_read_reg_1751_pp0_iter3_reg;
                bias_c3_read_reg_1772_pp0_iter2_reg <= bias_c3_read_reg_1772;
                bias_c3_read_reg_1772_pp0_iter3_reg <= bias_c3_read_reg_1772_pp0_iter2_reg;
                bias_c3_read_reg_1772_pp0_iter4_reg <= bias_c3_read_reg_1772_pp0_iter3_reg;
                c1_c2_read_reg_1720_pp0_iter2_reg <= c1_c2_read_reg_1720;
                c2_c2_read_reg_1741_pp0_iter2_reg <= c2_c2_read_reg_1741;
                c3_c2_read_reg_1762_pp0_iter2_reg <= c3_c2_read_reg_1762;
                curr_pixel_keep_reg_1657_pp0_iter2_reg <= curr_pixel_keep_reg_1657_pp0_iter1_reg;
                curr_pixel_keep_reg_1657_pp0_iter3_reg <= curr_pixel_keep_reg_1657_pp0_iter2_reg;
                curr_pixel_keep_reg_1657_pp0_iter4_reg <= curr_pixel_keep_reg_1657_pp0_iter3_reg;
                curr_pixel_keep_reg_1657_pp0_iter5_reg <= curr_pixel_keep_reg_1657_pp0_iter4_reg;
                curr_pixel_last_reg_1672_pp0_iter2_reg <= curr_pixel_last_reg_1672_pp0_iter1_reg;
                curr_pixel_last_reg_1672_pp0_iter3_reg <= curr_pixel_last_reg_1672_pp0_iter2_reg;
                curr_pixel_last_reg_1672_pp0_iter4_reg <= curr_pixel_last_reg_1672_pp0_iter3_reg;
                curr_pixel_last_reg_1672_pp0_iter5_reg <= curr_pixel_last_reg_1672_pp0_iter4_reg;
                curr_pixel_strb_reg_1662_pp0_iter2_reg <= curr_pixel_strb_reg_1662_pp0_iter1_reg;
                curr_pixel_strb_reg_1662_pp0_iter3_reg <= curr_pixel_strb_reg_1662_pp0_iter2_reg;
                curr_pixel_strb_reg_1662_pp0_iter4_reg <= curr_pixel_strb_reg_1662_pp0_iter3_reg;
                curr_pixel_strb_reg_1662_pp0_iter5_reg <= curr_pixel_strb_reg_1662_pp0_iter4_reg;
                curr_pixel_user_reg_1667_pp0_iter2_reg <= curr_pixel_user_reg_1667_pp0_iter1_reg;
                curr_pixel_user_reg_1667_pp0_iter3_reg <= curr_pixel_user_reg_1667_pp0_iter2_reg;
                curr_pixel_user_reg_1667_pp0_iter4_reg <= curr_pixel_user_reg_1667_pp0_iter3_reg;
                curr_pixel_user_reg_1667_pp0_iter5_reg <= curr_pixel_user_reg_1667_pp0_iter4_reg;
                icmp_ln102_1_reg_1905 <= icmp_ln102_1_fu_533_p2;
                icmp_ln102_reg_1899 <= icmp_ln102_fu_527_p2;
                icmp_ln103_1_reg_1940 <= icmp_ln103_1_fu_605_p2;
                icmp_ln103_reg_1934 <= icmp_ln103_fu_599_p2;
                icmp_ln104_1_reg_1975 <= icmp_ln104_1_fu_677_p2;
                icmp_ln104_reg_1969 <= icmp_ln104_fu_671_p2;
                icmp_ln105_1_reg_2010 <= icmp_ln105_1_fu_738_p2;
                icmp_ln105_reg_2004 <= icmp_ln105_fu_732_p2;
                icmp_ln106_1_reg_2045 <= icmp_ln106_1_fu_799_p2;
                icmp_ln106_reg_2039 <= icmp_ln106_fu_793_p2;
                icmp_ln107_1_reg_2080 <= icmp_ln107_1_fu_860_p2;
                icmp_ln107_reg_2074 <= icmp_ln107_fu_854_p2;
                tmp_10_reg_1911 <= add_ln103_2_fu_550_p2(19 downto 19);
                tmp_11_reg_1923 <= add_ln103_2_fu_550_p2(15 downto 15);
                tmp_12_reg_1929 <= add_ln103_2_fu_550_p2(7 downto 7);
                tmp_14_reg_1946 <= add_ln104_2_fu_622_p2(19 downto 19);
                tmp_15_reg_1958 <= add_ln104_2_fu_622_p2(15 downto 15);
                tmp_16_reg_1964 <= add_ln104_2_fu_622_p2(7 downto 7);
                tmp_18_reg_1981 <= add_ln105_2_fu_683_p2(19 downto 19);
                tmp_19_reg_1993 <= add_ln105_2_fu_683_p2(15 downto 15);
                tmp_20_reg_1999 <= add_ln105_2_fu_683_p2(7 downto 7);
                tmp_22_reg_2016 <= add_ln106_2_fu_744_p2(19 downto 19);
                tmp_23_reg_2028 <= add_ln106_2_fu_744_p2(15 downto 15);
                tmp_24_reg_2034 <= add_ln106_2_fu_744_p2(7 downto 7);
                tmp_26_reg_2051 <= add_ln107_2_fu_805_p2(19 downto 19);
                tmp_27_reg_2063 <= add_ln107_2_fu_805_p2(15 downto 15);
                tmp_28_reg_2069 <= add_ln107_2_fu_805_p2(7 downto 7);
                tmp_6_reg_1876 <= add_ln102_2_fu_478_p2(19 downto 19);
                tmp_7_reg_1888 <= add_ln102_2_fu_478_p2(15 downto 15);
                tmp_8_reg_1894 <= add_ln102_2_fu_478_p2(7 downto 7);
                trunc_ln1_reg_1918 <= add_ln103_2_fu_550_p2(15 downto 8);
                trunc_ln2_reg_1953 <= add_ln104_2_fu_622_p2(15 downto 8);
                trunc_ln3_reg_1988 <= add_ln105_2_fu_683_p2(15 downto 8);
                trunc_ln4_reg_2023 <= add_ln106_2_fu_744_p2(15 downto 8);
                trunc_ln5_reg_2058 <= add_ln107_2_fu_805_p2(15 downto 8);
                trunc_ln_reg_1883 <= add_ln102_2_fu_478_p2(15 downto 8);
                v_p2_reg_1682_pp0_iter2_reg <= v_p2_reg_1682_pp0_iter1_reg;
                v_p5_reg_1697_pp0_iter2_reg <= v_p5_reg_1697_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c2_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c2_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (bias_c2_0_vld_reg = ap_const_logic_0)))) then
                bias_c2_0_data_reg <= bias_c2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((bias_c3_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (bias_c3_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (bias_c3_0_vld_reg = ap_const_logic_0)))) then
                bias_c3_0_data_reg <= bias_c3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c1_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c1_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (c1_c1_0_vld_reg = ap_const_logic_0)))) then
                c1_c1_0_data_reg <= c1_c1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c2_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c2_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (c1_c2_0_vld_reg = ap_const_logic_0)))) then
                c1_c2_0_data_reg <= c1_c2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c1_c3_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c1_c3_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (c1_c3_0_vld_reg = ap_const_logic_0)))) then
                c1_c3_0_data_reg <= c1_c3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_const_logic_1) and (c2_c1_0_vld_reg = ap_const_logic_0)) or ((ap_const_logic_1 = ap_const_logic_1) and (c2_c1_0_vld_reg = ap_const_logic_1) and (c2_c1_0_ack_out = ap_const_logic_1)))) then
                c2_c1_0_data_reg <= c2_c1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c2_c2_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c2_c2_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (c2_c2_0_vld_reg = ap_const_logic_0)))) then
                c2_c2_0_data_reg <= c2_c2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c2_c3_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c2_c3_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (c2_c3_0_vld_reg = ap_const_logic_0)))) then
                c2_c3_0_data_reg <= c2_c3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c1_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c1_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (c3_c1_0_vld_reg = ap_const_logic_0)))) then
                c3_c1_0_data_reg <= c3_c1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c2_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c2_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (c3_c2_0_vld_reg = ap_const_logic_0)))) then
                c3_c2_0_data_reg <= c3_c2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((c3_c3_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c3_c3_0_vld_reg = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and (c3_c3_0_vld_reg = ap_const_logic_0)))) then
                c3_c3_0_data_reg <= c3_c3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln102_2_fu_478_p2 <= std_logic_vector(signed(sext_ln102_7_fu_474_p1) + signed(grp_fu_1603_p3));
    add_ln102_3_fu_869_p2 <= std_logic_vector(unsigned(zext_ln102_3_fu_866_p1) + unsigned(trunc_ln_reg_1883));
    add_ln103_2_fu_550_p2 <= std_logic_vector(signed(sext_ln103_7_fu_546_p1) + signed(grp_fu_1612_p3));
    add_ln103_3_fu_980_p2 <= std_logic_vector(unsigned(zext_ln103_fu_977_p1) + unsigned(trunc_ln1_reg_1918));
    add_ln104_2_fu_622_p2 <= std_logic_vector(signed(sext_ln104_7_fu_618_p1) + signed(grp_fu_1621_p3));
    add_ln104_3_fu_1091_p2 <= std_logic_vector(unsigned(zext_ln104_fu_1088_p1) + unsigned(trunc_ln2_reg_1953));
    add_ln105_2_fu_683_p2 <= std_logic_vector(signed(sext_ln102_7_fu_474_p1) + signed(grp_fu_1630_p3));
    add_ln105_3_fu_1202_p2 <= std_logic_vector(unsigned(zext_ln105_3_fu_1199_p1) + unsigned(trunc_ln3_reg_1988));
    add_ln106_2_fu_744_p2 <= std_logic_vector(signed(sext_ln103_7_fu_546_p1) + signed(grp_fu_1639_p3));
    add_ln106_3_fu_1313_p2 <= std_logic_vector(unsigned(zext_ln106_fu_1310_p1) + unsigned(trunc_ln4_reg_2023));
    add_ln107_2_fu_805_p2 <= std_logic_vector(signed(sext_ln104_7_fu_618_p1) + signed(grp_fu_1648_p3));
    add_ln107_3_fu_1424_p2 <= std_logic_vector(unsigned(zext_ln107_fu_1421_p1) + unsigned(trunc_ln5_reg_2058));
    and_ln102_1_fu_920_p2 <= (tmp_7_reg_1888 and and_ln102_fu_915_p2);
    and_ln102_2_fu_943_p2 <= (xor_ln102_1_fu_925_p2 and tmp_6_reg_1876);
    and_ln102_fu_915_p2 <= (xor_ln102_2_fu_886_p2 and icmp_ln102_reg_1899);
    and_ln103_1_fu_1031_p2 <= (tmp_11_reg_1923 and and_ln103_fu_1026_p2);
    and_ln103_2_fu_1054_p2 <= (xor_ln103_1_fu_1036_p2 and tmp_10_reg_1911);
    and_ln103_fu_1026_p2 <= (xor_ln103_2_fu_997_p2 and icmp_ln103_reg_1934);
    and_ln104_1_fu_1142_p2 <= (tmp_15_reg_1958 and and_ln104_fu_1137_p2);
    and_ln104_2_fu_1165_p2 <= (xor_ln104_1_fu_1147_p2 and tmp_14_reg_1946);
    and_ln104_fu_1137_p2 <= (xor_ln104_2_fu_1108_p2 and icmp_ln104_reg_1969);
    and_ln105_1_fu_1253_p2 <= (tmp_19_reg_1993 and and_ln105_fu_1248_p2);
    and_ln105_2_fu_1276_p2 <= (xor_ln105_1_fu_1258_p2 and tmp_18_reg_1981);
    and_ln105_fu_1248_p2 <= (xor_ln105_2_fu_1219_p2 and icmp_ln105_reg_2004);
    and_ln106_1_fu_1364_p2 <= (tmp_23_reg_2028 and and_ln106_fu_1359_p2);
    and_ln106_2_fu_1387_p2 <= (xor_ln106_1_fu_1369_p2 and tmp_22_reg_2016);
    and_ln106_fu_1359_p2 <= (xor_ln106_2_fu_1330_p2 and icmp_ln106_reg_2039);
    and_ln107_1_fu_1475_p2 <= (tmp_27_reg_2063 and and_ln107_fu_1470_p2);
    and_ln107_2_fu_1498_p2 <= (xor_ln107_1_fu_1480_p2 and tmp_26_reg_2051);
    and_ln107_fu_1470_p2 <= (xor_ln107_2_fu_1441_p2 and icmp_ln107_reg_2074);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_block_state1_pp0_stage0_iter0, ap_block_state7_pp0_stage0_iter6, ap_block_state8_pp0_stage0_iter7)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_const_boolean_1 = ap_block_state8_pp0_stage0_iter7) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state7_pp0_stage0_iter6) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_block_state1_pp0_stage0_iter0, ap_block_state7_pp0_stage0_iter6, ap_block_state8_pp0_stage0_iter7, stream_out_48_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_pp0_stage0_iter7) or (stream_out_48_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_pp0_stage0_iter6) or (stream_out_48_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_block_state1_pp0_stage0_iter0, ap_block_state7_pp0_stage0_iter6, ap_block_state8_pp0_stage0_iter7, stream_out_48_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state8_pp0_stage0_iter7) or (stream_out_48_TREADY_int_regslice = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_pp0_stage0_iter6) or (stream_out_48_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(stream_in_48_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (stream_in_48_TVALID_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state7_pp0_stage0_iter6_assign_proc : process(stream_out_48_TREADY_int_regslice)
    begin
                ap_block_state7_pp0_stage0_iter6 <= (stream_out_48_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state8_pp0_stage0_iter7_assign_proc : process(regslice_both_stream_out_48_V_data_V_U_apdone_blk, stream_out_48_TREADY_int_regslice)
    begin
                ap_block_state8_pp0_stage0_iter7 <= ((regslice_both_stream_out_48_V_data_V_U_apdone_blk = ap_const_logic_1) or (stream_out_48_TREADY_int_regslice = ap_const_logic_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    bias_c1_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_c1_0_ack_out <= ap_const_logic_1;
        else 
            bias_c1_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    bias_c2_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_c2_0_ack_out <= ap_const_logic_1;
        else 
            bias_c2_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    bias_c3_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            bias_c3_0_ack_out <= ap_const_logic_1;
        else 
            bias_c3_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c1_c1_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c1_c1_0_ack_out <= ap_const_logic_1;
        else 
            c1_c1_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c1_c2_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c1_c2_0_ack_out <= ap_const_logic_1;
        else 
            c1_c2_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c1_c3_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c1_c3_0_ack_out <= ap_const_logic_1;
        else 
            c1_c3_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c1_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c2_c1_0_ack_out <= ap_const_logic_1;
        else 
            c2_c1_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c2_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c2_c2_0_ack_out <= ap_const_logic_1;
        else 
            c2_c2_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c2_c3_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c2_c3_0_ack_out <= ap_const_logic_1;
        else 
            c2_c3_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c1_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c3_c1_0_ack_out <= ap_const_logic_1;
        else 
            c3_c1_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c2_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c3_c2_0_ack_out <= ap_const_logic_1;
        else 
            c3_c2_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c3_c3_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            c3_c3_0_ack_out <= ap_const_logic_1;
        else 
            c3_c3_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1549_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1549_ce <= ap_const_logic_1;
        else 
            grp_fu_1549_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1549_p0 <= sext_ln102_fu_344_p1(10 - 1 downto 0);
    grp_fu_1549_p1 <= zext_ln102_fu_341_p1(8 - 1 downto 0);

    grp_fu_1558_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1558_ce <= ap_const_logic_1;
        else 
            grp_fu_1558_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1558_p0 <= sext_ln103_fu_348_p1(10 - 1 downto 0);
    grp_fu_1558_p1 <= zext_ln102_fu_341_p1(8 - 1 downto 0);

    grp_fu_1567_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1567_ce <= ap_const_logic_1;
        else 
            grp_fu_1567_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1567_p0 <= sext_ln104_fu_352_p1(10 - 1 downto 0);
    grp_fu_1567_p1 <= zext_ln102_fu_341_p1(8 - 1 downto 0);

    grp_fu_1576_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1576_ce <= ap_const_logic_1;
        else 
            grp_fu_1576_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1576_p0 <= sext_ln102_fu_344_p1(10 - 1 downto 0);
    grp_fu_1576_p1 <= zext_ln105_fu_356_p1(8 - 1 downto 0);

    grp_fu_1585_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1585_ce <= ap_const_logic_1;
        else 
            grp_fu_1585_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1585_p0 <= sext_ln103_fu_348_p1(10 - 1 downto 0);
    grp_fu_1585_p1 <= zext_ln105_fu_356_p1(8 - 1 downto 0);

    grp_fu_1594_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1594_ce <= ap_const_logic_1;
        else 
            grp_fu_1594_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1594_p0 <= sext_ln104_fu_352_p1(10 - 1 downto 0);
    grp_fu_1594_p1 <= zext_ln105_fu_356_p1(8 - 1 downto 0);

    grp_fu_1603_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1603_ce <= ap_const_logic_1;
        else 
            grp_fu_1603_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1603_p0 <= sext_ln102_4_fu_362_p1(10 - 1 downto 0);
    grp_fu_1603_p1 <= zext_ln102_2_fu_359_p1(8 - 1 downto 0);

    grp_fu_1612_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1612_ce <= ap_const_logic_1;
        else 
            grp_fu_1612_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1612_p0 <= sext_ln103_4_fu_365_p1(10 - 1 downto 0);
    grp_fu_1612_p1 <= zext_ln102_2_fu_359_p1(8 - 1 downto 0);

    grp_fu_1621_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1621_ce <= ap_const_logic_1;
        else 
            grp_fu_1621_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1621_p0 <= sext_ln104_4_fu_368_p1(10 - 1 downto 0);
    grp_fu_1621_p1 <= zext_ln102_2_fu_359_p1(8 - 1 downto 0);

    grp_fu_1630_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1630_ce <= ap_const_logic_1;
        else 
            grp_fu_1630_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1630_p0 <= sext_ln102_4_fu_362_p1(10 - 1 downto 0);
    grp_fu_1630_p1 <= zext_ln105_2_fu_371_p1(8 - 1 downto 0);

    grp_fu_1639_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1639_ce <= ap_const_logic_1;
        else 
            grp_fu_1639_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1639_p0 <= sext_ln103_4_fu_365_p1(10 - 1 downto 0);
    grp_fu_1639_p1 <= zext_ln105_2_fu_371_p1(8 - 1 downto 0);

    grp_fu_1648_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1648_ce <= ap_const_logic_1;
        else 
            grp_fu_1648_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1648_p0 <= sext_ln104_4_fu_368_p1(10 - 1 downto 0);
    grp_fu_1648_p1 <= zext_ln105_2_fu_371_p1(8 - 1 downto 0);
    icmp_ln102_1_fu_533_p2 <= "1" when (tmp_fu_517_p4 = ap_const_lv4_0) else "0";
    icmp_ln102_fu_527_p2 <= "1" when (tmp_fu_517_p4 = ap_const_lv4_F) else "0";
    icmp_ln103_1_fu_605_p2 <= "1" when (tmp_1_fu_589_p4 = ap_const_lv4_0) else "0";
    icmp_ln103_fu_599_p2 <= "1" when (tmp_1_fu_589_p4 = ap_const_lv4_F) else "0";
    icmp_ln104_1_fu_677_p2 <= "1" when (tmp_2_fu_661_p4 = ap_const_lv4_0) else "0";
    icmp_ln104_fu_671_p2 <= "1" when (tmp_2_fu_661_p4 = ap_const_lv4_F) else "0";
    icmp_ln105_1_fu_738_p2 <= "1" when (tmp_3_fu_722_p4 = ap_const_lv4_0) else "0";
    icmp_ln105_fu_732_p2 <= "1" when (tmp_3_fu_722_p4 = ap_const_lv4_F) else "0";
    icmp_ln106_1_fu_799_p2 <= "1" when (tmp_4_fu_783_p4 = ap_const_lv4_0) else "0";
    icmp_ln106_fu_793_p2 <= "1" when (tmp_4_fu_783_p4 = ap_const_lv4_F) else "0";
    icmp_ln107_1_fu_860_p2 <= "1" when (tmp_5_fu_844_p4 = ap_const_lv4_0) else "0";
    icmp_ln107_fu_854_p2 <= "1" when (tmp_5_fu_844_p4 = ap_const_lv4_F) else "0";
    mul_ln102_1_fu_380_p0 <= sext_ln102_1_fu_377_p1(10 - 1 downto 0);
    mul_ln102_1_fu_380_p1 <= zext_ln102_1_fu_374_p1(8 - 1 downto 0);
    mul_ln103_1_fu_393_p0 <= sext_ln103_1_fu_390_p1(10 - 1 downto 0);
    mul_ln103_1_fu_393_p1 <= zext_ln102_1_fu_374_p1(8 - 1 downto 0);
    mul_ln104_1_fu_406_p0 <= sext_ln104_1_fu_403_p1(10 - 1 downto 0);
    mul_ln104_1_fu_406_p1 <= zext_ln102_1_fu_374_p1(8 - 1 downto 0);
    mul_ln105_1_fu_419_p0 <= sext_ln102_1_fu_377_p1(10 - 1 downto 0);
    mul_ln105_1_fu_419_p1 <= zext_ln105_1_fu_416_p1(8 - 1 downto 0);
    mul_ln106_1_fu_429_p0 <= sext_ln103_1_fu_390_p1(10 - 1 downto 0);
    mul_ln106_1_fu_429_p1 <= zext_ln105_1_fu_416_p1(8 - 1 downto 0);
    mul_ln107_1_fu_439_p0 <= sext_ln104_1_fu_403_p1(10 - 1 downto 0);
    mul_ln107_1_fu_439_p1 <= zext_ln105_1_fu_416_p1(8 - 1 downto 0);
    or_ln102_1_fu_948_p2 <= (xor_ln102_fu_909_p2 or and_ln102_2_fu_943_p2);
    or_ln102_fu_904_p2 <= (tmp_6_reg_1876 or select_ln102_3_fu_898_p3);
    or_ln103_1_fu_1059_p2 <= (xor_ln103_fu_1020_p2 or and_ln103_2_fu_1054_p2);
    or_ln103_fu_1015_p2 <= (tmp_10_reg_1911 or select_ln103_3_fu_1009_p3);
    or_ln104_1_fu_1170_p2 <= (xor_ln104_fu_1131_p2 or and_ln104_2_fu_1165_p2);
    or_ln104_fu_1126_p2 <= (tmp_14_reg_1946 or select_ln104_3_fu_1120_p3);
    or_ln105_1_fu_1281_p2 <= (xor_ln105_fu_1242_p2 or and_ln105_2_fu_1276_p2);
    or_ln105_fu_1237_p2 <= (tmp_18_reg_1981 or select_ln105_3_fu_1231_p3);
    or_ln106_1_fu_1392_p2 <= (xor_ln106_fu_1353_p2 or and_ln106_2_fu_1387_p2);
    or_ln106_fu_1348_p2 <= (tmp_22_reg_2016 or select_ln106_3_fu_1342_p3);
    or_ln107_1_fu_1503_p2 <= (xor_ln107_fu_1464_p2 or and_ln107_2_fu_1498_p2);
    or_ln107_fu_1459_p2 <= (tmp_26_reg_2051 or select_ln107_3_fu_1453_p3);
    out1_fu_969_p3 <= 
        select_ln102_2_fu_961_p3 when (or_ln102_1_fu_948_p2(0) = '1') else 
        add_ln102_3_fu_869_p2;
    out2_fu_1080_p3 <= 
        select_ln103_2_fu_1072_p3 when (or_ln103_1_fu_1059_p2(0) = '1') else 
        add_ln103_3_fu_980_p2;
    out3_fu_1191_p3 <= 
        select_ln104_2_fu_1183_p3 when (or_ln104_1_fu_1170_p2(0) = '1') else 
        add_ln104_3_fu_1091_p2;
    out4_fu_1302_p3 <= 
        select_ln105_2_fu_1294_p3 when (or_ln105_1_fu_1281_p2(0) = '1') else 
        add_ln105_3_fu_1202_p2;
    out5_fu_1413_p3 <= 
        select_ln106_2_fu_1405_p3 when (or_ln106_1_fu_1392_p2(0) = '1') else 
        add_ln106_3_fu_1313_p2;
    out6_fu_1524_p3 <= 
        select_ln107_2_fu_1516_p3 when (or_ln107_1_fu_1503_p2(0) = '1') else 
        add_ln107_3_fu_1424_p2;
    select_ln102_1_fu_931_p3 <= 
        trunc_ln102_fu_874_p1 when (and_ln102_1_fu_920_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln102_2_fu_961_p3 <= 
        select_ln102_4_fu_954_p3 when (or_ln102_fu_904_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln102_3_fu_898_p3 <= 
        select_ln102_fu_892_p3 when (tmp_7_reg_1888(0) = '1') else 
        icmp_ln102_1_reg_1905;
    select_ln102_4_fu_954_p3 <= 
        zext_ln102_4_fu_939_p1 when (tmp_6_reg_1876(0) = '1') else 
        add_ln102_3_fu_869_p2;
    select_ln102_fu_892_p3 <= 
        icmp_ln102_1_reg_1905 when (tmp_9_fu_878_p3(0) = '1') else 
        icmp_ln102_reg_1899;
    select_ln103_1_fu_1042_p3 <= 
        trunc_ln103_fu_985_p1 when (and_ln103_1_fu_1031_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln103_2_fu_1072_p3 <= 
        select_ln103_4_fu_1065_p3 when (or_ln103_fu_1015_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln103_3_fu_1009_p3 <= 
        select_ln103_fu_1003_p3 when (tmp_11_reg_1923(0) = '1') else 
        icmp_ln103_1_reg_1940;
    select_ln103_4_fu_1065_p3 <= 
        zext_ln103_1_fu_1050_p1 when (tmp_10_reg_1911(0) = '1') else 
        add_ln103_3_fu_980_p2;
    select_ln103_fu_1003_p3 <= 
        icmp_ln103_1_reg_1940 when (tmp_13_fu_989_p3(0) = '1') else 
        icmp_ln103_reg_1934;
    select_ln104_1_fu_1153_p3 <= 
        trunc_ln104_fu_1096_p1 when (and_ln104_1_fu_1142_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln104_2_fu_1183_p3 <= 
        select_ln104_4_fu_1176_p3 when (or_ln104_fu_1126_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln104_3_fu_1120_p3 <= 
        select_ln104_fu_1114_p3 when (tmp_15_reg_1958(0) = '1') else 
        icmp_ln104_1_reg_1975;
    select_ln104_4_fu_1176_p3 <= 
        zext_ln104_1_fu_1161_p1 when (tmp_14_reg_1946(0) = '1') else 
        add_ln104_3_fu_1091_p2;
    select_ln104_fu_1114_p3 <= 
        icmp_ln104_1_reg_1975 when (tmp_17_fu_1100_p3(0) = '1') else 
        icmp_ln104_reg_1969;
    select_ln105_1_fu_1264_p3 <= 
        trunc_ln105_fu_1207_p1 when (and_ln105_1_fu_1253_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln105_2_fu_1294_p3 <= 
        select_ln105_4_fu_1287_p3 when (or_ln105_fu_1237_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln105_3_fu_1231_p3 <= 
        select_ln105_fu_1225_p3 when (tmp_19_reg_1993(0) = '1') else 
        icmp_ln105_1_reg_2010;
    select_ln105_4_fu_1287_p3 <= 
        zext_ln105_4_fu_1272_p1 when (tmp_18_reg_1981(0) = '1') else 
        add_ln105_3_fu_1202_p2;
    select_ln105_fu_1225_p3 <= 
        icmp_ln105_1_reg_2010 when (tmp_21_fu_1211_p3(0) = '1') else 
        icmp_ln105_reg_2004;
    select_ln106_1_fu_1375_p3 <= 
        trunc_ln106_fu_1318_p1 when (and_ln106_1_fu_1364_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln106_2_fu_1405_p3 <= 
        select_ln106_4_fu_1398_p3 when (or_ln106_fu_1348_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln106_3_fu_1342_p3 <= 
        select_ln106_fu_1336_p3 when (tmp_23_reg_2028(0) = '1') else 
        icmp_ln106_1_reg_2045;
    select_ln106_4_fu_1398_p3 <= 
        zext_ln106_1_fu_1383_p1 when (tmp_22_reg_2016(0) = '1') else 
        add_ln106_3_fu_1313_p2;
    select_ln106_fu_1336_p3 <= 
        icmp_ln106_1_reg_2045 when (tmp_25_fu_1322_p3(0) = '1') else 
        icmp_ln106_reg_2039;
    select_ln107_1_fu_1486_p3 <= 
        trunc_ln107_fu_1429_p1 when (and_ln107_1_fu_1475_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln107_2_fu_1516_p3 <= 
        select_ln107_4_fu_1509_p3 when (or_ln107_fu_1459_p2(0) = '1') else 
        ap_const_lv8_FF;
    select_ln107_3_fu_1453_p3 <= 
        select_ln107_fu_1447_p3 when (tmp_27_reg_2063(0) = '1') else 
        icmp_ln107_1_reg_2080;
    select_ln107_4_fu_1509_p3 <= 
        zext_ln107_1_fu_1494_p1 when (tmp_26_reg_2051(0) = '1') else 
        add_ln107_3_fu_1424_p2;
    select_ln107_fu_1447_p3 <= 
        icmp_ln107_1_reg_2080 when (tmp_29_fu_1433_p3(0) = '1') else 
        icmp_ln107_reg_2074;
        sext_ln102_1_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c1_c2_read_reg_1720_pp0_iter2_reg),18));

        sext_ln102_4_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c1_c3_read_reg_1725),18));

        sext_ln102_7_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_467_p3),20));

        sext_ln102_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c1_c1_0_data_reg),18));

        sext_ln103_1_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c2_c2_read_reg_1741_pp0_iter2_reg),18));

        sext_ln103_4_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c2_c3_read_reg_1746),18));

        sext_ln103_7_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_539_p3),20));

        sext_ln103_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c2_c1_0_data_reg),18));

        sext_ln104_1_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c3_c2_read_reg_1762_pp0_iter2_reg),18));

        sext_ln104_4_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c3_c3_read_reg_1767),18));

        sext_ln104_7_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_611_p3),20));

        sext_ln104_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(c3_c1_0_data_reg),18));

    shl_ln1_fu_539_p3 <= (bias_c2_read_reg_1751_pp0_iter4_reg & ap_const_lv8_0);
    shl_ln2_fu_611_p3 <= (bias_c3_read_reg_1772_pp0_iter4_reg & ap_const_lv8_0);
    shl_ln_fu_467_p3 <= (bias_c1_read_reg_1730_pp0_iter4_reg & ap_const_lv8_0);

    stream_in_48_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, stream_in_48_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_48_TDATA_blk_n <= stream_in_48_TVALID_int_regslice;
        else 
            stream_in_48_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_in_48_TREADY <= regslice_both_stream_in_48_V_data_V_U_ack_in;

    stream_in_48_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_48_TREADY_int_regslice <= ap_const_logic_1;
        else 
            stream_in_48_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    stream_out_48_TDATA_blk_n_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, stream_out_48_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            stream_out_48_TDATA_blk_n <= stream_out_48_TREADY_int_regslice;
        else 
            stream_out_48_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_out_48_TDATA_int_regslice <= (((((out6_fu_1524_p3 & out5_fu_1413_p3) & out4_fu_1302_p3) & out3_fu_1191_p3) & out2_fu_1080_p3) & out1_fu_969_p3);
    stream_out_48_TVALID <= regslice_both_stream_out_48_V_data_V_U_vld_out;

    stream_out_48_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stream_out_48_TVALID_int_regslice <= ap_const_logic_1;
        else 
            stream_out_48_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    tmp_13_fu_989_p3 <= add_ln103_3_fu_980_p2(7 downto 7);
    tmp_17_fu_1100_p3 <= add_ln104_3_fu_1091_p2(7 downto 7);
    tmp_1_fu_589_p4 <= add_ln103_2_fu_550_p2(19 downto 16);
    tmp_21_fu_1211_p3 <= add_ln105_3_fu_1202_p2(7 downto 7);
    tmp_25_fu_1322_p3 <= add_ln106_3_fu_1313_p2(7 downto 7);
    tmp_29_fu_1433_p3 <= add_ln107_3_fu_1424_p2(7 downto 7);
    tmp_2_fu_661_p4 <= add_ln104_2_fu_622_p2(19 downto 16);
    tmp_3_fu_722_p4 <= add_ln105_2_fu_683_p2(19 downto 16);
    tmp_4_fu_783_p4 <= add_ln106_2_fu_744_p2(19 downto 16);
    tmp_5_fu_844_p4 <= add_ln107_2_fu_805_p2(19 downto 16);
    tmp_9_fu_878_p3 <= add_ln102_3_fu_869_p2(7 downto 7);
    tmp_fu_517_p4 <= add_ln102_2_fu_478_p2(19 downto 16);
    trunc_ln102_fu_874_p1 <= add_ln102_3_fu_869_p2(7 - 1 downto 0);
    trunc_ln103_fu_985_p1 <= add_ln103_3_fu_980_p2(7 - 1 downto 0);
    trunc_ln104_fu_1096_p1 <= add_ln104_3_fu_1091_p2(7 - 1 downto 0);
    trunc_ln105_fu_1207_p1 <= add_ln105_3_fu_1202_p2(7 - 1 downto 0);
    trunc_ln106_fu_1318_p1 <= add_ln106_3_fu_1313_p2(7 - 1 downto 0);
    trunc_ln107_fu_1429_p1 <= add_ln107_3_fu_1424_p2(7 - 1 downto 0);
    v_p1_fu_287_p1 <= stream_in_48_TDATA_int_regslice(8 - 1 downto 0);
    xor_ln102_1_fu_925_p2 <= (ap_const_lv1_1 xor and_ln102_1_fu_920_p2);
    xor_ln102_2_fu_886_p2 <= (tmp_9_fu_878_p3 xor ap_const_lv1_1);
    xor_ln102_fu_909_p2 <= (or_ln102_fu_904_p2 xor ap_const_lv1_1);
    xor_ln103_1_fu_1036_p2 <= (ap_const_lv1_1 xor and_ln103_1_fu_1031_p2);
    xor_ln103_2_fu_997_p2 <= (tmp_13_fu_989_p3 xor ap_const_lv1_1);
    xor_ln103_fu_1020_p2 <= (or_ln103_fu_1015_p2 xor ap_const_lv1_1);
    xor_ln104_1_fu_1147_p2 <= (ap_const_lv1_1 xor and_ln104_1_fu_1142_p2);
    xor_ln104_2_fu_1108_p2 <= (tmp_17_fu_1100_p3 xor ap_const_lv1_1);
    xor_ln104_fu_1131_p2 <= (or_ln104_fu_1126_p2 xor ap_const_lv1_1);
    xor_ln105_1_fu_1258_p2 <= (ap_const_lv1_1 xor and_ln105_1_fu_1253_p2);
    xor_ln105_2_fu_1219_p2 <= (tmp_21_fu_1211_p3 xor ap_const_lv1_1);
    xor_ln105_fu_1242_p2 <= (or_ln105_fu_1237_p2 xor ap_const_lv1_1);
    xor_ln106_1_fu_1369_p2 <= (ap_const_lv1_1 xor and_ln106_1_fu_1364_p2);
    xor_ln106_2_fu_1330_p2 <= (tmp_25_fu_1322_p3 xor ap_const_lv1_1);
    xor_ln106_fu_1353_p2 <= (or_ln106_fu_1348_p2 xor ap_const_lv1_1);
    xor_ln107_1_fu_1480_p2 <= (ap_const_lv1_1 xor and_ln107_1_fu_1475_p2);
    xor_ln107_2_fu_1441_p2 <= (tmp_29_fu_1433_p3 xor ap_const_lv1_1);
    xor_ln107_fu_1464_p2 <= (or_ln107_fu_1459_p2 xor ap_const_lv1_1);
    zext_ln102_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p2_reg_1682_pp0_iter2_reg),18));
    zext_ln102_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p3_reg_1687_pp0_iter1_reg),18));
    zext_ln102_3_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_1894),8));
    zext_ln102_4_fu_939_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln102_1_fu_931_p3),8));
    zext_ln102_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p1_reg_1677),18));
    zext_ln103_1_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln103_1_fu_1042_p3),8));
    zext_ln103_fu_977_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_1929),8));
    zext_ln104_1_fu_1161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln104_1_fu_1153_p3),8));
    zext_ln104_fu_1088_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_reg_1964),8));
    zext_ln105_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p5_reg_1697_pp0_iter2_reg),18));
    zext_ln105_2_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p6_reg_1702_pp0_iter1_reg),18));
    zext_ln105_3_fu_1199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_reg_1999),8));
    zext_ln105_4_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln105_1_fu_1264_p3),8));
    zext_ln105_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(v_p4_reg_1692),18));
    zext_ln106_1_fu_1383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln106_1_fu_1375_p3),8));
    zext_ln106_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_reg_2034),8));
    zext_ln107_1_fu_1494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln107_1_fu_1486_p3),8));
    zext_ln107_fu_1421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_reg_2069),8));
end behav;
