// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert_2_color_convert_2,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.833500,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=601,HLS_SYN_LUT=570,HLS_VERSION=2023_2}" *)

module color_convert_2 (
        ap_clk,
        ap_rst_n,
        stream_in_48_TDATA,
        stream_in_48_TVALID,
        stream_in_48_TREADY,
        stream_in_48_TKEEP,
        stream_in_48_TSTRB,
        stream_in_48_TUSER,
        stream_in_48_TLAST,
        stream_out_48_TDATA,
        stream_out_48_TVALID,
        stream_out_48_TREADY,
        stream_out_48_TKEEP,
        stream_out_48_TSTRB,
        stream_out_48_TUSER,
        stream_out_48_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [63:0] stream_in_48_TDATA;
input   stream_in_48_TVALID;
output   stream_in_48_TREADY;
input  [7:0] stream_in_48_TKEEP;
input  [7:0] stream_in_48_TSTRB;
input  [0:0] stream_in_48_TUSER;
input  [0:0] stream_in_48_TLAST;
output  [63:0] stream_out_48_TDATA;
output   stream_out_48_TVALID;
input   stream_out_48_TREADY;
output  [7:0] stream_out_48_TKEEP;
output  [7:0] stream_out_48_TSTRB;
output  [0:0] stream_out_48_TUSER;
output  [0:0] stream_out_48_TLAST;

 reg    ap_rst_n_inv;
reg    stream_in_48_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    stream_out_48_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [63:0] curr_pixel_data_reg_659;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter2;
wire    regslice_both_stream_out_48_V_data_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] curr_pixel_data_reg_659_pp0_iter1_reg;
reg   [7:0] curr_pixel_keep_reg_664;
reg   [7:0] curr_pixel_keep_reg_664_pp0_iter1_reg;
reg   [7:0] curr_pixel_strb_reg_669;
reg   [7:0] curr_pixel_strb_reg_669_pp0_iter1_reg;
reg   [0:0] curr_pixel_user_reg_674;
reg   [0:0] curr_pixel_user_reg_674_pp0_iter1_reg;
reg   [0:0] curr_pixel_last_reg_679;
reg   [0:0] curr_pixel_last_reg_679_pp0_iter1_reg;
wire   [7:0] tmp_s_fu_191_p4;
reg   [7:0] tmp_s_reg_684;
reg   [15:0] b_reg_690;
reg   [15:0] b_reg_690_pp0_iter1_reg;
wire   [14:0] add_ln102_fu_239_p2;
reg   [14:0] add_ln102_reg_695;
reg   [11:0] tmp_5_reg_700;
reg   [12:0] tmp_6_reg_705;
reg   [12:0] tmp_6_reg_705_pp0_iter1_reg;
wire   [14:0] sub_ln103_fu_309_p2;
reg   [14:0] sub_ln103_reg_710;
wire   [14:0] add_ln103_3_fu_361_p2;
reg   [14:0] add_ln103_3_reg_715;
reg   [8:0] tmp_1_reg_720;
wire   [16:0] sub_ln104_2_fu_443_p2;
reg   [16:0] sub_ln104_2_reg_725;
reg   [14:0] tmp_3_reg_730;
wire   [15:0] add_ln102_3_fu_495_p2;
reg   [15:0] add_ln102_3_reg_735;
reg   [7:0] trunc_ln1_reg_740;
reg   [10:0] trunc_ln2_reg_745;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] trunc_ln102_fu_211_p1;
wire   [13:0] shl_ln_fu_215_p3;
wire   [8:0] shl_ln102_1_fu_223_p3;
wire   [14:0] zext_ln102_fu_231_p1;
wire   [14:0] zext_ln102_1_fu_235_p1;
wire   [12:0] shl_ln1_fu_265_p3;
wire   [9:0] shl_ln103_1_fu_273_p3;
wire   [13:0] zext_ln103_fu_281_p1;
wire   [13:0] zext_ln103_1_fu_285_p1;
wire   [13:0] add_ln103_fu_289_p2;
wire   [13:0] zext_ln103_2_fu_295_p1;
wire   [13:0] add_ln103_1_fu_299_p2;
wire   [14:0] zext_ln103_3_fu_305_p1;
wire   [13:0] shl_ln103_2_fu_315_p3;
wire   [10:0] shl_ln103_3_fu_323_p3;
wire   [14:0] zext_ln103_4_fu_331_p1;
wire   [14:0] zext_ln103_5_fu_335_p1;
wire   [8:0] shl_ln103_4_fu_345_p3;
wire   [14:0] add_ln103_2_fu_339_p2;
wire   [14:0] zext_ln103_7_fu_357_p1;
wire   [14:0] shl_ln2_fu_377_p3;
wire   [11:0] shl_ln104_1_fu_385_p3;
wire   [15:0] zext_ln104_fu_393_p1;
wire   [15:0] zext_ln104_1_fu_397_p1;
wire   [12:0] shl_ln104_2_fu_407_p3;
wire   [14:0] zext_ln104_2_fu_415_p1;
wire   [14:0] add_ln104_fu_419_p2;
wire   [15:0] zext_ln104_3_fu_425_p1;
wire   [15:0] zext_ln103_6_fu_353_p1;
wire   [15:0] sub_ln104_fu_401_p2;
wire   [15:0] sub_ln104_1_fu_429_p2;
wire  signed [16:0] sext_ln104_fu_435_p1;
wire  signed [16:0] sext_ln104_1_fu_439_p1;
wire   [14:0] shl_ln102_2_fu_459_p3;
wire   [15:0] zext_ln102_2_fu_466_p1;
wire   [15:0] zext_ln102_3_fu_469_p1;
wire   [15:0] add_ln102_1_fu_473_p2;
wire   [15:0] zext_ln102_4_fu_479_p1;
wire   [15:0] add_ln102_2_fu_482_p2;
wire   [15:0] shl_ln102_3_fu_488_p3;
wire  signed [15:0] sext_ln103_fu_501_p1;
wire   [15:0] zext_ln103_8_fu_504_p1;
wire   [15:0] shl_ln103_5_fu_513_p3;
wire   [15:0] sub_ln103_1_fu_507_p2;
wire   [15:0] sub_ln103_2_fu_524_p2;
wire   [15:0] add_ln103_4_fu_530_p2;
wire   [15:0] shl_ln104_3_fu_546_p3;
wire   [16:0] zext_ln103_9_fu_520_p1;
wire   [16:0] zext_ln104_4_fu_553_p1;
wire   [16:0] add_ln104_1_fu_557_p2;
wire  signed [18:0] sext_ln104_2_fu_563_p1;
wire   [18:0] zext_ln104_5_fu_566_p1;
wire   [18:0] sub_ln104_3_fu_570_p2;
wire   [15:0] shl_ln102_4_fu_586_p3;
wire   [15:0] add_ln102_4_fu_593_p2;
wire   [15:0] add_ln102_5_fu_598_p2;
wire   [7:0] trunc_ln_fu_603_p4;
wire  signed [11:0] sext_ln104_3_fu_624_p1;
wire   [11:0] Cr_fu_627_p2;
wire   [7:0] xor_ln111_fu_619_p2;
wire   [7:0] add_ln110_fu_613_p2;
wire   [27:0] tmp_2_fu_633_p4;
wire  signed [31:0] sext_ln112_fu_643_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_stream_in_48_V_data_V_U_apdone_blk;
wire   [63:0] stream_in_48_TDATA_int_regslice;
wire    stream_in_48_TVALID_int_regslice;
reg    stream_in_48_TREADY_int_regslice;
wire    regslice_both_stream_in_48_V_data_V_U_ack_in;
wire    regslice_both_stream_in_48_V_keep_V_U_apdone_blk;
wire   [7:0] stream_in_48_TKEEP_int_regslice;
wire    regslice_both_stream_in_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_in_48_V_keep_V_U_ack_in;
wire    regslice_both_stream_in_48_V_strb_V_U_apdone_blk;
wire   [7:0] stream_in_48_TSTRB_int_regslice;
wire    regslice_both_stream_in_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_in_48_V_strb_V_U_ack_in;
wire    regslice_both_stream_in_48_V_user_V_U_apdone_blk;
wire   [0:0] stream_in_48_TUSER_int_regslice;
wire    regslice_both_stream_in_48_V_user_V_U_vld_out;
wire    regslice_both_stream_in_48_V_user_V_U_ack_in;
wire    regslice_both_stream_in_48_V_last_V_U_apdone_blk;
wire   [0:0] stream_in_48_TLAST_int_regslice;
wire    regslice_both_stream_in_48_V_last_V_U_vld_out;
wire    regslice_both_stream_in_48_V_last_V_U_ack_in;
wire   [63:0] stream_out_48_TDATA_int_regslice;
reg    stream_out_48_TVALID_int_regslice;
wire    stream_out_48_TREADY_int_regslice;
wire    regslice_both_stream_out_48_V_data_V_U_vld_out;
wire    regslice_both_stream_out_48_V_keep_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_out_48_V_strb_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_out_48_V_user_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_user_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_user_V_U_vld_out;
wire    regslice_both_stream_out_48_V_last_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_last_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

color_convert_2_regslice_both #(
    .DataWidth( 64 ))
regslice_both_stream_in_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TDATA),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_data_V_U_ack_in),
    .data_out(stream_in_48_TDATA_int_regslice),
    .vld_out(stream_in_48_TVALID_int_regslice),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_data_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_in_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TKEEP),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_keep_V_U_ack_in),
    .data_out(stream_in_48_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_keep_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_keep_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_in_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TSTRB),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_strb_V_U_ack_in),
    .data_out(stream_in_48_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_strb_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_strb_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TUSER),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_user_V_U_ack_in),
    .data_out(stream_in_48_TUSER_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_user_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_user_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TLAST),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_last_V_U_ack_in),
    .data_out(stream_in_48_TLAST_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_last_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_last_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 64 ))
regslice_both_stream_out_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_out_48_TDATA_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(stream_out_48_TREADY_int_regslice),
    .data_out(stream_out_48_TDATA),
    .vld_out(regslice_both_stream_out_48_V_data_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_data_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_out_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_keep_reg_664_pp0_iter1_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy),
    .data_out(stream_out_48_TKEEP),
    .vld_out(regslice_both_stream_out_48_V_keep_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_keep_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_out_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_strb_reg_669_pp0_iter1_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy),
    .data_out(stream_out_48_TSTRB),
    .vld_out(regslice_both_stream_out_48_V_strb_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_strb_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_user_reg_674_pp0_iter1_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_user_V_U_ack_in_dummy),
    .data_out(stream_out_48_TUSER),
    .vld_out(regslice_both_stream_out_48_V_user_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_user_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_last_reg_679_pp0_iter1_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_last_V_U_ack_in_dummy),
    .data_out(stream_out_48_TLAST),
    .vld_out(regslice_both_stream_out_48_V_last_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln102_3_reg_735 <= add_ln102_3_fu_495_p2;
        add_ln102_reg_695[14 : 1] <= add_ln102_fu_239_p2[14 : 1];
        add_ln103_3_reg_715[14 : 1] <= add_ln103_3_fu_361_p2[14 : 1];
        b_reg_690 <= {{stream_in_48_TDATA_int_regslice[31:16]}};
        b_reg_690_pp0_iter1_reg <= b_reg_690;
        curr_pixel_data_reg_659 <= stream_in_48_TDATA_int_regslice;
        curr_pixel_data_reg_659_pp0_iter1_reg <= curr_pixel_data_reg_659;
        curr_pixel_keep_reg_664 <= stream_in_48_TKEEP_int_regslice;
        curr_pixel_keep_reg_664_pp0_iter1_reg <= curr_pixel_keep_reg_664;
        curr_pixel_last_reg_679 <= stream_in_48_TLAST_int_regslice;
        curr_pixel_last_reg_679_pp0_iter1_reg <= curr_pixel_last_reg_679;
        curr_pixel_strb_reg_669 <= stream_in_48_TSTRB_int_regslice;
        curr_pixel_strb_reg_669_pp0_iter1_reg <= curr_pixel_strb_reg_669;
        curr_pixel_user_reg_674 <= stream_in_48_TUSER_int_regslice;
        curr_pixel_user_reg_674_pp0_iter1_reg <= curr_pixel_user_reg_674;
        sub_ln103_reg_710[14 : 1] <= sub_ln103_fu_309_p2[14 : 1];
        sub_ln104_2_reg_725[16 : 1] <= sub_ln104_2_fu_443_p2[16 : 1];
        tmp_1_reg_720 <= {{stream_in_48_TDATA_int_regslice[24:16]}};
        tmp_3_reg_730 <= {{stream_in_48_TDATA_int_regslice[30:16]}};
        tmp_5_reg_700 <= {{stream_in_48_TDATA_int_regslice[27:16]}};
        tmp_6_reg_705 <= {{stream_in_48_TDATA_int_regslice[28:16]}};
        tmp_6_reg_705_pp0_iter1_reg <= tmp_6_reg_705;
        tmp_s_reg_684 <= {{stream_in_48_TDATA_int_regslice[15:8]}};
        trunc_ln1_reg_740 <= {{add_ln103_4_fu_530_p2[15:8]}};
        trunc_ln2_reg_745 <= {{sub_ln104_3_fu_570_p2[18:8]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_48_TDATA_blk_n = stream_in_48_TVALID_int_regslice;
    end else begin
        stream_in_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_48_TREADY_int_regslice = 1'b1;
    end else begin
        stream_in_48_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        stream_out_48_TDATA_blk_n = stream_out_48_TREADY_int_regslice;
    end else begin
        stream_out_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_out_48_TVALID_int_regslice = 1'b1;
    end else begin
        stream_out_48_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cr_fu_627_p2 = ($signed(sext_ln104_3_fu_624_p1) + $signed(12'd128));

assign add_ln102_1_fu_473_p2 = (zext_ln102_2_fu_466_p1 + zext_ln102_3_fu_469_p1);

assign add_ln102_2_fu_482_p2 = (add_ln102_1_fu_473_p2 + zext_ln102_4_fu_479_p1);

assign add_ln102_3_fu_495_p2 = (add_ln102_2_fu_482_p2 + shl_ln102_3_fu_488_p3);

assign add_ln102_4_fu_593_p2 = (add_ln102_3_reg_735 + shl_ln102_4_fu_586_p3);

assign add_ln102_5_fu_598_p2 = (add_ln102_4_fu_593_p2 + b_reg_690_pp0_iter1_reg);

assign add_ln102_fu_239_p2 = (zext_ln102_fu_231_p1 + zext_ln102_1_fu_235_p1);

assign add_ln103_1_fu_299_p2 = (add_ln103_fu_289_p2 + zext_ln103_2_fu_295_p1);

assign add_ln103_2_fu_339_p2 = (zext_ln103_4_fu_331_p1 + zext_ln103_5_fu_335_p1);

assign add_ln103_3_fu_361_p2 = (add_ln103_2_fu_339_p2 + zext_ln103_7_fu_357_p1);

assign add_ln103_4_fu_530_p2 = (sub_ln103_1_fu_507_p2 + sub_ln103_2_fu_524_p2);

assign add_ln103_fu_289_p2 = (zext_ln103_fu_281_p1 + zext_ln103_1_fu_285_p1);

assign add_ln104_1_fu_557_p2 = (zext_ln103_9_fu_520_p1 + zext_ln104_4_fu_553_p1);

assign add_ln104_fu_419_p2 = (zext_ln103_4_fu_331_p1 + zext_ln104_2_fu_415_p1);

assign add_ln110_fu_613_p2 = (trunc_ln_fu_603_p4 + 8'd16);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (stream_in_48_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((regslice_both_stream_out_48_V_data_V_U_apdone_blk == 1'b1) | (stream_out_48_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign sext_ln103_fu_501_p1 = $signed(sub_ln103_reg_710);

assign sext_ln104_1_fu_439_p1 = $signed(sub_ln104_1_fu_429_p2);

assign sext_ln104_2_fu_563_p1 = $signed(sub_ln104_2_reg_725);

assign sext_ln104_3_fu_624_p1 = $signed(trunc_ln2_reg_745);

assign sext_ln104_fu_435_p1 = $signed(sub_ln104_fu_401_p2);

assign sext_ln112_fu_643_p1 = $signed(tmp_2_fu_633_p4);

assign shl_ln102_1_fu_223_p3 = {{trunc_ln102_fu_211_p1}, {1'd0}};

assign shl_ln102_2_fu_459_p3 = {{tmp_s_reg_684}, {7'd0}};

assign shl_ln102_3_fu_488_p3 = {{tmp_5_reg_700}, {4'd0}};

assign shl_ln102_4_fu_586_p3 = {{tmp_6_reg_705_pp0_iter1_reg}, {3'd0}};

assign shl_ln103_1_fu_273_p3 = {{trunc_ln102_fu_211_p1}, {2'd0}};

assign shl_ln103_2_fu_315_p3 = {{tmp_s_fu_191_p4}, {6'd0}};

assign shl_ln103_3_fu_323_p3 = {{tmp_s_fu_191_p4}, {3'd0}};

assign shl_ln103_4_fu_345_p3 = {{tmp_s_fu_191_p4}, {1'd0}};

assign shl_ln103_5_fu_513_p3 = {{tmp_1_reg_720}, {7'd0}};

assign shl_ln104_1_fu_385_p3 = {{trunc_ln102_fu_211_p1}, {4'd0}};

assign shl_ln104_2_fu_407_p3 = {{tmp_s_fu_191_p4}, {5'd0}};

assign shl_ln104_3_fu_546_p3 = {{tmp_3_reg_730}, {1'd0}};

assign shl_ln1_fu_265_p3 = {{trunc_ln102_fu_211_p1}, {5'd0}};

assign shl_ln2_fu_377_p3 = {{trunc_ln102_fu_211_p1}, {7'd0}};

assign shl_ln_fu_215_p3 = {{trunc_ln102_fu_211_p1}, {6'd0}};

assign stream_in_48_TREADY = regslice_both_stream_in_48_V_data_V_U_ack_in;

assign stream_out_48_TDATA_int_regslice = {{curr_pixel_data_reg_659_pp0_iter1_reg[63:32]}, {sext_ln112_fu_643_p1}};

assign stream_out_48_TVALID = regslice_both_stream_out_48_V_data_V_U_vld_out;

assign sub_ln103_1_fu_507_p2 = ($signed(sext_ln103_fu_501_p1) - $signed(zext_ln103_8_fu_504_p1));

assign sub_ln103_2_fu_524_p2 = (shl_ln103_5_fu_513_p3 - shl_ln102_3_fu_488_p3);

assign sub_ln103_fu_309_p2 = (15'd0 - zext_ln103_3_fu_305_p1);

assign sub_ln104_1_fu_429_p2 = (zext_ln104_3_fu_425_p1 - zext_ln103_6_fu_353_p1);

assign sub_ln104_2_fu_443_p2 = ($signed(sext_ln104_fu_435_p1) - $signed(sext_ln104_1_fu_439_p1));

assign sub_ln104_3_fu_570_p2 = ($signed(sext_ln104_2_fu_563_p1) - $signed(zext_ln104_5_fu_566_p1));

assign sub_ln104_fu_401_p2 = (zext_ln104_fu_393_p1 - zext_ln104_1_fu_397_p1);

assign tmp_2_fu_633_p4 = {{{Cr_fu_627_p2}, {xor_ln111_fu_619_p2}}, {add_ln110_fu_613_p2}};

assign tmp_s_fu_191_p4 = {{stream_in_48_TDATA_int_regslice[15:8]}};

assign trunc_ln102_fu_211_p1 = stream_in_48_TDATA_int_regslice[7:0];

assign trunc_ln_fu_603_p4 = {{add_ln102_5_fu_598_p2[15:8]}};

assign xor_ln111_fu_619_p2 = (trunc_ln1_reg_740 ^ 8'd128);

assign zext_ln102_1_fu_235_p1 = shl_ln102_1_fu_223_p3;

assign zext_ln102_2_fu_466_p1 = add_ln102_reg_695;

assign zext_ln102_3_fu_469_p1 = shl_ln102_2_fu_459_p3;

assign zext_ln102_4_fu_479_p1 = tmp_s_reg_684;

assign zext_ln102_fu_231_p1 = shl_ln_fu_215_p3;

assign zext_ln103_1_fu_285_p1 = shl_ln103_1_fu_273_p3;

assign zext_ln103_2_fu_295_p1 = shl_ln102_1_fu_223_p3;

assign zext_ln103_3_fu_305_p1 = add_ln103_1_fu_299_p2;

assign zext_ln103_4_fu_331_p1 = shl_ln103_2_fu_315_p3;

assign zext_ln103_5_fu_335_p1 = shl_ln103_3_fu_323_p3;

assign zext_ln103_6_fu_353_p1 = shl_ln103_4_fu_345_p3;

assign zext_ln103_7_fu_357_p1 = shl_ln103_4_fu_345_p3;

assign zext_ln103_8_fu_504_p1 = add_ln103_3_reg_715;

assign zext_ln103_9_fu_520_p1 = shl_ln102_3_fu_488_p3;

assign zext_ln103_fu_281_p1 = shl_ln1_fu_265_p3;

assign zext_ln104_1_fu_397_p1 = shl_ln104_1_fu_385_p3;

assign zext_ln104_2_fu_415_p1 = shl_ln104_2_fu_407_p3;

assign zext_ln104_3_fu_425_p1 = add_ln104_fu_419_p2;

assign zext_ln104_4_fu_553_p1 = shl_ln104_3_fu_546_p3;

assign zext_ln104_5_fu_566_p1 = add_ln104_1_fu_557_p2;

assign zext_ln104_fu_393_p1 = shl_ln2_fu_377_p3;

always @ (posedge ap_clk) begin
    add_ln102_reg_695[0] <= 1'b0;
    sub_ln103_reg_710[0] <= 1'b0;
    add_ln103_3_reg_715[0] <= 1'b0;
    sub_ln104_2_reg_725[0] <= 1'b0;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "color_convert_2_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //color_convert_2

