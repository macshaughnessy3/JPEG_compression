// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="color_convert_2_color_convert_2,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.038500,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=588,HLS_SYN_LUT=656,HLS_VERSION=2023_2}" *)

module color_convert_2 (
        ap_clk,
        ap_rst_n,
        stream_in_48_TDATA,
        stream_in_48_TVALID,
        stream_in_48_TREADY,
        stream_in_48_TKEEP,
        stream_in_48_TSTRB,
        stream_in_48_TUSER,
        stream_in_48_TLAST,
        stream_out_48_TDATA,
        stream_out_48_TVALID,
        stream_out_48_TREADY,
        stream_out_48_TKEEP,
        stream_out_48_TSTRB,
        stream_out_48_TUSER,
        stream_out_48_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [63:0] stream_in_48_TDATA;
input   stream_in_48_TVALID;
output   stream_in_48_TREADY;
input  [7:0] stream_in_48_TKEEP;
input  [7:0] stream_in_48_TSTRB;
input  [0:0] stream_in_48_TUSER;
input  [0:0] stream_in_48_TLAST;
output  [63:0] stream_out_48_TDATA;
output   stream_out_48_TVALID;
input   stream_out_48_TREADY;
output  [7:0] stream_out_48_TKEEP;
output  [7:0] stream_out_48_TSTRB;
output  [0:0] stream_out_48_TUSER;
output  [0:0] stream_out_48_TLAST;

 reg    ap_rst_n_inv;
reg    stream_in_48_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    stream_out_48_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [63:0] curr_pixel_data_reg_776;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter2;
wire    regslice_both_stream_out_48_V_data_V_U_apdone_blk;
reg    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [63:0] curr_pixel_data_reg_776_pp0_iter1_reg;
reg   [7:0] curr_pixel_keep_reg_781;
reg   [7:0] curr_pixel_keep_reg_781_pp0_iter1_reg;
reg   [7:0] curr_pixel_strb_reg_786;
reg   [7:0] curr_pixel_strb_reg_786_pp0_iter1_reg;
reg   [0:0] curr_pixel_user_reg_791;
reg   [0:0] curr_pixel_user_reg_791_pp0_iter1_reg;
reg   [0:0] curr_pixel_last_reg_796;
reg   [0:0] curr_pixel_last_reg_796_pp0_iter1_reg;
reg   [15:0] b_reg_801;
wire   [17:0] add_ln102_2_fu_291_p2;
reg   [17:0] add_ln102_2_reg_806;
reg   [11:0] tmp_4_reg_811;
reg   [12:0] tmp_5_reg_816;
wire   [17:0] add_ln103_1_fu_363_p2;
reg   [17:0] add_ln103_1_reg_821;
wire   [17:0] add_ln103_3_fu_445_p2;
reg   [17:0] add_ln103_3_reg_826;
reg   [8:0] tmp_1_reg_831;
wire   [16:0] sub_ln104_fu_493_p2;
reg   [16:0] sub_ln104_reg_836;
wire   [17:0] sub_ln104_1_fu_531_p2;
reg   [17:0] sub_ln104_1_reg_841;
reg   [14:0] tmp_6_reg_846;
reg   [10:0] trunc_ln_reg_851;
reg   [11:0] trunc_ln1_reg_856;
reg   [11:0] trunc_ln2_reg_861;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] trunc_ln102_fu_217_p1;
wire   [14:0] trunc_ln102_1_fu_229_p1;
wire   [15:0] shl_ln_fu_221_p3;
wire   [15:0] shl_ln102_1_fu_233_p3;
wire   [16:0] zext_ln102_fu_241_p1;
wire   [16:0] zext_ln102_1_fu_245_p1;
wire   [8:0] tmp_3_fu_255_p4;
wire   [16:0] add_ln102_fu_249_p2;
wire   [15:0] shl_ln102_2_fu_265_p3;
wire   [17:0] zext_ln102_2_fu_273_p1;
wire   [17:0] zext_ln102_3_fu_277_p1;
wire   [15:0] g_fu_197_p4;
wire   [17:0] add_ln102_1_fu_281_p2;
wire   [17:0] zext_ln102_4_fu_287_p1;
wire   [10:0] trunc_ln103_fu_317_p1;
wire   [13:0] trunc_ln103_1_fu_329_p1;
wire   [15:0] shl_ln1_fu_321_p3;
wire   [15:0] shl_ln103_1_fu_333_p3;
wire   [16:0] zext_ln103_fu_341_p1;
wire   [16:0] zext_ln103_1_fu_345_p1;
wire   [16:0] add_ln103_fu_349_p2;
wire   [17:0] zext_ln103_2_fu_355_p1;
wire   [17:0] zext_ln103_3_fu_359_p1;
wire   [9:0] tmp_8_fu_369_p4;
wire   [12:0] tmp_9_fu_387_p4;
wire   [15:0] shl_ln103_2_fu_379_p3;
wire   [15:0] shl_ln103_3_fu_397_p3;
wire   [16:0] zext_ln103_5_fu_405_p1;
wire   [16:0] zext_ln103_6_fu_409_p1;
wire   [14:0] tmp_s_fu_419_p4;
wire   [16:0] add_ln103_2_fu_413_p2;
wire   [15:0] shl_ln103_4_fu_429_p3;
wire   [17:0] zext_ln103_7_fu_437_p1;
wire   [17:0] zext_ln103_8_fu_441_p1;
wire   [8:0] trunc_ln104_fu_461_p1;
wire   [11:0] trunc_ln104_1_fu_473_p1;
wire   [15:0] shl_ln2_fu_465_p3;
wire   [15:0] shl_ln104_1_fu_477_p3;
wire   [16:0] zext_ln104_fu_485_p1;
wire   [16:0] zext_ln104_1_fu_489_p1;
wire   [10:0] tmp_2_fu_499_p4;
wire   [15:0] shl_ln104_2_fu_509_p3;
wire   [16:0] zext_ln104_2_fu_517_p1;
wire   [16:0] add_ln104_fu_521_p2;
wire   [17:0] zext_ln104_3_fu_527_p1;
wire   [15:0] shl_ln102_3_fu_547_p3;
wire   [18:0] zext_ln102_5_fu_554_p1;
wire   [18:0] zext_ln102_6_fu_557_p1;
wire   [15:0] shl_ln102_4_fu_567_p3;
wire   [18:0] add_ln102_3_fu_561_p2;
wire   [18:0] zext_ln102_7_fu_574_p1;
wire   [18:0] add_ln102_4_fu_578_p2;
wire   [18:0] zext_ln102_8_fu_584_p1;
wire   [18:0] add_ln102_5_fu_587_p2;
wire   [18:0] zext_ln103_4_fu_603_p1;
wire   [18:0] sub_ln103_fu_606_p2;
wire  signed [19:0] sext_ln103_fu_612_p1;
wire   [19:0] zext_ln103_9_fu_616_p1;
wire   [15:0] shl_ln103_5_fu_625_p3;
wire   [16:0] zext_ln103_10_fu_632_p1;
wire   [16:0] zext_ln103_11_fu_636_p1;
wire   [16:0] sub_ln103_2_fu_640_p2;
wire   [19:0] sub_ln103_1_fu_619_p2;
wire  signed [19:0] sext_ln103_1_fu_646_p1;
wire   [19:0] add_ln103_4_fu_650_p2;
wire  signed [18:0] sext_ln104_fu_666_p1;
wire  signed [18:0] sext_ln104_1_fu_669_p1;
wire   [15:0] shl_ln104_3_fu_678_p3;
wire   [16:0] zext_ln104_4_fu_685_p1;
wire   [18:0] sub_ln104_2_fu_672_p2;
wire   [16:0] add_ln104_1_fu_689_p2;
wire  signed [19:0] sext_ln104_2_fu_695_p1;
wire   [19:0] zext_ln104_5_fu_699_p1;
wire   [19:0] sub_ln104_3_fu_703_p2;
wire   [10:0] Y_fu_719_p2;
wire  signed [12:0] sext_ln103_2_fu_728_p1;
wire   [12:0] Cb_fu_731_p2;
wire  signed [12:0] sext_ln104_3_fu_741_p1;
wire   [12:0] Cr_fu_744_p2;
wire  signed [15:0] sext_ln103_3_fu_737_p1;
wire   [15:0] zext_ln102_9_fu_724_p1;
wire   [44:0] tmp_fu_750_p4;
wire  signed [47:0] sext_ln108_fu_760_p1;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_stream_in_48_V_data_V_U_apdone_blk;
wire   [63:0] stream_in_48_TDATA_int_regslice;
wire    stream_in_48_TVALID_int_regslice;
reg    stream_in_48_TREADY_int_regslice;
wire    regslice_both_stream_in_48_V_data_V_U_ack_in;
wire    regslice_both_stream_in_48_V_keep_V_U_apdone_blk;
wire   [7:0] stream_in_48_TKEEP_int_regslice;
wire    regslice_both_stream_in_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_in_48_V_keep_V_U_ack_in;
wire    regslice_both_stream_in_48_V_strb_V_U_apdone_blk;
wire   [7:0] stream_in_48_TSTRB_int_regslice;
wire    regslice_both_stream_in_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_in_48_V_strb_V_U_ack_in;
wire    regslice_both_stream_in_48_V_user_V_U_apdone_blk;
wire   [0:0] stream_in_48_TUSER_int_regslice;
wire    regslice_both_stream_in_48_V_user_V_U_vld_out;
wire    regslice_both_stream_in_48_V_user_V_U_ack_in;
wire    regslice_both_stream_in_48_V_last_V_U_apdone_blk;
wire   [0:0] stream_in_48_TLAST_int_regslice;
wire    regslice_both_stream_in_48_V_last_V_U_vld_out;
wire    regslice_both_stream_in_48_V_last_V_U_ack_in;
wire   [63:0] stream_out_48_TDATA_int_regslice;
reg    stream_out_48_TVALID_int_regslice;
wire    stream_out_48_TREADY_int_regslice;
wire    regslice_both_stream_out_48_V_data_V_U_vld_out;
wire    regslice_both_stream_out_48_V_keep_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_keep_V_U_vld_out;
wire    regslice_both_stream_out_48_V_strb_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_strb_V_U_vld_out;
wire    regslice_both_stream_out_48_V_user_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_user_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_user_V_U_vld_out;
wire    regslice_both_stream_out_48_V_last_V_U_apdone_blk;
wire    regslice_both_stream_out_48_V_last_V_U_ack_in_dummy;
wire    regslice_both_stream_out_48_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

color_convert_2_regslice_both #(
    .DataWidth( 64 ))
regslice_both_stream_in_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TDATA),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_data_V_U_ack_in),
    .data_out(stream_in_48_TDATA_int_regslice),
    .vld_out(stream_in_48_TVALID_int_regslice),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_data_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_in_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TKEEP),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_keep_V_U_ack_in),
    .data_out(stream_in_48_TKEEP_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_keep_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_keep_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_in_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TSTRB),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_strb_V_U_ack_in),
    .data_out(stream_in_48_TSTRB_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_strb_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_strb_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TUSER),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_user_V_U_ack_in),
    .data_out(stream_in_48_TUSER_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_user_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_user_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_in_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_in_48_TLAST),
    .vld_in(stream_in_48_TVALID),
    .ack_in(regslice_both_stream_in_48_V_last_V_U_ack_in),
    .data_out(stream_in_48_TLAST_int_regslice),
    .vld_out(regslice_both_stream_in_48_V_last_V_U_vld_out),
    .ack_out(stream_in_48_TREADY_int_regslice),
    .apdone_blk(regslice_both_stream_in_48_V_last_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 64 ))
regslice_both_stream_out_48_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(stream_out_48_TDATA_int_regslice),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(stream_out_48_TREADY_int_regslice),
    .data_out(stream_out_48_TDATA),
    .vld_out(regslice_both_stream_out_48_V_data_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_data_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_out_48_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_keep_reg_781_pp0_iter1_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_keep_V_U_ack_in_dummy),
    .data_out(stream_out_48_TKEEP),
    .vld_out(regslice_both_stream_out_48_V_keep_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_keep_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 8 ))
regslice_both_stream_out_48_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_strb_reg_786_pp0_iter1_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_strb_V_U_ack_in_dummy),
    .data_out(stream_out_48_TSTRB),
    .vld_out(regslice_both_stream_out_48_V_strb_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_strb_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_user_reg_791_pp0_iter1_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_user_V_U_ack_in_dummy),
    .data_out(stream_out_48_TUSER),
    .vld_out(regslice_both_stream_out_48_V_user_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_user_V_U_apdone_blk)
);

color_convert_2_regslice_both #(
    .DataWidth( 1 ))
regslice_both_stream_out_48_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(curr_pixel_last_reg_796_pp0_iter1_reg),
    .vld_in(stream_out_48_TVALID_int_regslice),
    .ack_in(regslice_both_stream_out_48_V_last_V_U_ack_in_dummy),
    .data_out(stream_out_48_TLAST),
    .vld_out(regslice_both_stream_out_48_V_last_V_U_vld_out),
    .ack_out(stream_out_48_TREADY),
    .apdone_blk(regslice_both_stream_out_48_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln102_2_reg_806 <= add_ln102_2_fu_291_p2;
        add_ln103_1_reg_821[17 : 1] <= add_ln103_1_fu_363_p2[17 : 1];
        add_ln103_3_reg_826[17 : 1] <= add_ln103_3_fu_445_p2[17 : 1];
        b_reg_801 <= {{stream_in_48_TDATA_int_regslice[47:32]}};
        curr_pixel_data_reg_776 <= stream_in_48_TDATA_int_regslice;
        curr_pixel_data_reg_776_pp0_iter1_reg <= curr_pixel_data_reg_776;
        curr_pixel_keep_reg_781 <= stream_in_48_TKEEP_int_regslice;
        curr_pixel_keep_reg_781_pp0_iter1_reg <= curr_pixel_keep_reg_781;
        curr_pixel_last_reg_796 <= stream_in_48_TLAST_int_regslice;
        curr_pixel_last_reg_796_pp0_iter1_reg <= curr_pixel_last_reg_796;
        curr_pixel_strb_reg_786 <= stream_in_48_TSTRB_int_regslice;
        curr_pixel_strb_reg_786_pp0_iter1_reg <= curr_pixel_strb_reg_786;
        curr_pixel_user_reg_791 <= stream_in_48_TUSER_int_regslice;
        curr_pixel_user_reg_791_pp0_iter1_reg <= curr_pixel_user_reg_791;
        sub_ln104_1_reg_841[17 : 1] <= sub_ln104_1_fu_531_p2[17 : 1];
        sub_ln104_reg_836[16 : 4] <= sub_ln104_fu_493_p2[16 : 4];
        tmp_1_reg_831 <= {{stream_in_48_TDATA_int_regslice[40:32]}};
        tmp_4_reg_811 <= {{stream_in_48_TDATA_int_regslice[43:32]}};
        tmp_5_reg_816 <= {{stream_in_48_TDATA_int_regslice[44:32]}};
        tmp_6_reg_846 <= {{stream_in_48_TDATA_int_regslice[46:32]}};
        trunc_ln1_reg_856 <= {{add_ln103_4_fu_650_p2[19:8]}};
        trunc_ln2_reg_861 <= {{sub_ln104_3_fu_703_p2[19:8]}};
        trunc_ln_reg_851 <= {{add_ln102_5_fu_587_p2[18:8]}};
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_48_TDATA_blk_n = stream_in_48_TVALID_int_regslice;
    end else begin
        stream_in_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        stream_in_48_TREADY_int_regslice = 1'b1;
    end else begin
        stream_in_48_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        stream_out_48_TDATA_blk_n = stream_out_48_TREADY_int_regslice;
    end else begin
        stream_out_48_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        stream_out_48_TVALID_int_regslice = 1'b1;
    end else begin
        stream_out_48_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cb_fu_731_p2 = ($signed(sext_ln103_2_fu_728_p1) + $signed(13'd128));

assign Cr_fu_744_p2 = ($signed(sext_ln104_3_fu_741_p1) + $signed(13'd128));

assign Y_fu_719_p2 = (trunc_ln_reg_851 + 11'd16);

assign add_ln102_1_fu_281_p2 = (zext_ln102_2_fu_273_p1 + zext_ln102_3_fu_277_p1);

assign add_ln102_2_fu_291_p2 = (add_ln102_1_fu_281_p2 + zext_ln102_4_fu_287_p1);

assign add_ln102_3_fu_561_p2 = (zext_ln102_5_fu_554_p1 + zext_ln102_6_fu_557_p1);

assign add_ln102_4_fu_578_p2 = (add_ln102_3_fu_561_p2 + zext_ln102_7_fu_574_p1);

assign add_ln102_5_fu_587_p2 = (add_ln102_4_fu_578_p2 + zext_ln102_8_fu_584_p1);

assign add_ln102_fu_249_p2 = (zext_ln102_fu_241_p1 + zext_ln102_1_fu_245_p1);

assign add_ln103_1_fu_363_p2 = (zext_ln103_2_fu_355_p1 + zext_ln103_3_fu_359_p1);

assign add_ln103_2_fu_413_p2 = (zext_ln103_5_fu_405_p1 + zext_ln103_6_fu_409_p1);

assign add_ln103_3_fu_445_p2 = (zext_ln103_7_fu_437_p1 + zext_ln103_8_fu_441_p1);

assign add_ln103_4_fu_650_p2 = ($signed(sub_ln103_1_fu_619_p2) + $signed(sext_ln103_1_fu_646_p1));

assign add_ln103_fu_349_p2 = (zext_ln103_fu_341_p1 + zext_ln103_1_fu_345_p1);

assign add_ln104_1_fu_689_p2 = (zext_ln103_11_fu_636_p1 + zext_ln104_4_fu_685_p1);

assign add_ln104_fu_521_p2 = (zext_ln103_5_fu_405_p1 + zext_ln104_2_fu_517_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_block_state4_pp0_stage0_iter3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_pp0_stage0_iter2)) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter3 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state4_pp0_stage0_iter3))) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((stream_out_48_TREADY_int_regslice == 1'b0) | (1'b1 == ap_block_state3_pp0_stage0_iter2))) | ((1'b1 == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (stream_in_48_TVALID_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (stream_out_48_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((stream_out_48_TREADY_int_regslice == 1'b0) | (regslice_both_stream_out_48_V_data_V_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign g_fu_197_p4 = {{stream_in_48_TDATA_int_regslice[31:16]}};

assign sext_ln103_1_fu_646_p1 = $signed(sub_ln103_2_fu_640_p2);

assign sext_ln103_2_fu_728_p1 = $signed(trunc_ln1_reg_856);

assign sext_ln103_3_fu_737_p1 = $signed(Cb_fu_731_p2);

assign sext_ln103_fu_612_p1 = $signed(sub_ln103_fu_606_p2);

assign sext_ln104_1_fu_669_p1 = $signed(sub_ln104_1_reg_841);

assign sext_ln104_2_fu_695_p1 = $signed(sub_ln104_2_fu_672_p2);

assign sext_ln104_3_fu_741_p1 = $signed(trunc_ln2_reg_861);

assign sext_ln104_fu_666_p1 = $signed(sub_ln104_reg_836);

assign sext_ln108_fu_760_p1 = $signed(tmp_fu_750_p4);

assign shl_ln102_1_fu_233_p3 = {{trunc_ln102_1_fu_229_p1}, {1'd0}};

assign shl_ln102_2_fu_265_p3 = {{tmp_3_fu_255_p4}, {7'd0}};

assign shl_ln102_3_fu_547_p3 = {{tmp_4_reg_811}, {4'd0}};

assign shl_ln102_4_fu_567_p3 = {{tmp_5_reg_816}, {3'd0}};

assign shl_ln103_1_fu_333_p3 = {{trunc_ln103_1_fu_329_p1}, {2'd0}};

assign shl_ln103_2_fu_379_p3 = {{tmp_8_fu_369_p4}, {6'd0}};

assign shl_ln103_3_fu_397_p3 = {{tmp_9_fu_387_p4}, {3'd0}};

assign shl_ln103_4_fu_429_p3 = {{tmp_s_fu_419_p4}, {1'd0}};

assign shl_ln103_5_fu_625_p3 = {{tmp_1_reg_831}, {7'd0}};

assign shl_ln104_1_fu_477_p3 = {{trunc_ln104_1_fu_473_p1}, {4'd0}};

assign shl_ln104_2_fu_509_p3 = {{tmp_2_fu_499_p4}, {5'd0}};

assign shl_ln104_3_fu_678_p3 = {{tmp_6_reg_846}, {1'd0}};

assign shl_ln1_fu_321_p3 = {{trunc_ln103_fu_317_p1}, {5'd0}};

assign shl_ln2_fu_465_p3 = {{trunc_ln104_fu_461_p1}, {7'd0}};

assign shl_ln_fu_221_p3 = {{trunc_ln102_fu_217_p1}, {6'd0}};

assign stream_in_48_TREADY = regslice_both_stream_in_48_V_data_V_U_ack_in;

assign stream_out_48_TDATA_int_regslice = {{curr_pixel_data_reg_776_pp0_iter1_reg[63:48]}, {sext_ln108_fu_760_p1}};

assign stream_out_48_TVALID = regslice_both_stream_out_48_V_data_V_U_vld_out;

assign sub_ln103_1_fu_619_p2 = ($signed(sext_ln103_fu_612_p1) - $signed(zext_ln103_9_fu_616_p1));

assign sub_ln103_2_fu_640_p2 = (zext_ln103_10_fu_632_p1 - zext_ln103_11_fu_636_p1);

assign sub_ln103_fu_606_p2 = (19'd0 - zext_ln103_4_fu_603_p1);

assign sub_ln104_1_fu_531_p2 = (zext_ln104_3_fu_527_p1 - zext_ln103_8_fu_441_p1);

assign sub_ln104_2_fu_672_p2 = ($signed(sext_ln104_fu_666_p1) - $signed(sext_ln104_1_fu_669_p1));

assign sub_ln104_3_fu_703_p2 = ($signed(sext_ln104_2_fu_695_p1) - $signed(zext_ln104_5_fu_699_p1));

assign sub_ln104_fu_493_p2 = (zext_ln104_fu_485_p1 - zext_ln104_1_fu_489_p1);

assign tmp_2_fu_499_p4 = {{stream_in_48_TDATA_int_regslice[26:16]}};

assign tmp_3_fu_255_p4 = {{stream_in_48_TDATA_int_regslice[24:16]}};

assign tmp_8_fu_369_p4 = {{stream_in_48_TDATA_int_regslice[25:16]}};

assign tmp_9_fu_387_p4 = {{stream_in_48_TDATA_int_regslice[28:16]}};

assign tmp_fu_750_p4 = {{{Cr_fu_744_p2}, {sext_ln103_3_fu_737_p1}}, {zext_ln102_9_fu_724_p1}};

assign tmp_s_fu_419_p4 = {{stream_in_48_TDATA_int_regslice[30:16]}};

assign trunc_ln102_1_fu_229_p1 = stream_in_48_TDATA_int_regslice[14:0];

assign trunc_ln102_fu_217_p1 = stream_in_48_TDATA_int_regslice[9:0];

assign trunc_ln103_1_fu_329_p1 = stream_in_48_TDATA_int_regslice[13:0];

assign trunc_ln103_fu_317_p1 = stream_in_48_TDATA_int_regslice[10:0];

assign trunc_ln104_1_fu_473_p1 = stream_in_48_TDATA_int_regslice[11:0];

assign trunc_ln104_fu_461_p1 = stream_in_48_TDATA_int_regslice[8:0];

assign zext_ln102_1_fu_245_p1 = shl_ln102_1_fu_233_p3;

assign zext_ln102_2_fu_273_p1 = add_ln102_fu_249_p2;

assign zext_ln102_3_fu_277_p1 = shl_ln102_2_fu_265_p3;

assign zext_ln102_4_fu_287_p1 = g_fu_197_p4;

assign zext_ln102_5_fu_554_p1 = add_ln102_2_reg_806;

assign zext_ln102_6_fu_557_p1 = shl_ln102_3_fu_547_p3;

assign zext_ln102_7_fu_574_p1 = shl_ln102_4_fu_567_p3;

assign zext_ln102_8_fu_584_p1 = b_reg_801;

assign zext_ln102_9_fu_724_p1 = Y_fu_719_p2;

assign zext_ln102_fu_241_p1 = shl_ln_fu_221_p3;

assign zext_ln103_10_fu_632_p1 = shl_ln103_5_fu_625_p3;

assign zext_ln103_11_fu_636_p1 = shl_ln102_3_fu_547_p3;

assign zext_ln103_1_fu_345_p1 = shl_ln103_1_fu_333_p3;

assign zext_ln103_2_fu_355_p1 = add_ln103_fu_349_p2;

assign zext_ln103_3_fu_359_p1 = shl_ln102_1_fu_233_p3;

assign zext_ln103_4_fu_603_p1 = add_ln103_1_reg_821;

assign zext_ln103_5_fu_405_p1 = shl_ln103_2_fu_379_p3;

assign zext_ln103_6_fu_409_p1 = shl_ln103_3_fu_397_p3;

assign zext_ln103_7_fu_437_p1 = add_ln103_2_fu_413_p2;

assign zext_ln103_8_fu_441_p1 = shl_ln103_4_fu_429_p3;

assign zext_ln103_9_fu_616_p1 = add_ln103_3_reg_826;

assign zext_ln103_fu_341_p1 = shl_ln1_fu_321_p3;

assign zext_ln104_1_fu_489_p1 = shl_ln104_1_fu_477_p3;

assign zext_ln104_2_fu_517_p1 = shl_ln104_2_fu_509_p3;

assign zext_ln104_3_fu_527_p1 = add_ln104_fu_521_p2;

assign zext_ln104_4_fu_685_p1 = shl_ln104_3_fu_678_p3;

assign zext_ln104_5_fu_699_p1 = add_ln104_1_fu_689_p2;

assign zext_ln104_fu_485_p1 = shl_ln2_fu_465_p3;

always @ (posedge ap_clk) begin
    add_ln103_1_reg_821[0] <= 1'b0;
    add_ln103_3_reg_826[0] <= 1'b0;
    sub_ln104_reg_836[3:0] <= 4'b0000;
    sub_ln104_1_reg_841[0] <= 1'b0;
end


reg find_kernel_block = 0;
// synthesis translate_off
`include "color_convert_2_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //color_convert_2

